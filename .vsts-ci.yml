phases:
- phase: Windows_NT
  # variables apply to every build configuration in the matrix
  variables: 
    PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json
    SignType: real
    UseEsrpSigning: true
    TeamName: DotNetCore
  queue:
    name: DotNetCore-Build
    parallel: 2
    demands: 
      - agent.os -equals Windows_NT
    matrix:
      Build_Debug:
        BuildConfig: Debug
        PublishType: none
      Build_Release:
        BuildConfig: Release
        PublishType: blob
  steps:
  - checkout: self
    clean: true
    fetchDepth: 1
  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
    displayName: Install MicroBuild plugin
    inputs:
      signType: '$(SignType)'
      zipSources: false
      esrpSigning: '$(UseEsrpSigning)'
    env:
      TeamName: $(TeamName)
    continueOnError: false
    condition: and(succeeded(), in(variables.SignType, 'real', 'test'))
  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'DotNet-VSTS'
      KeyVaultName: EngKeyVault
      SecretsFilter: 'dotnetfeed-storage-access-key-1'
  # Build and Publish on the Release configuration
  - script: build\CIBuild.cmd -configuration $(BuildConfig)
              /p:PB_PublishType=$(PublishType)
              /p:PB_PublishBlobFeedUrl=$(PublishBlobFeedUrl)
              /p:PB_PublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
              /p:SignType=$(SignType)
    name: Build_Publish
    displayName: Build / Publish
    env:
      OfficialBuildId: $(BUILD.BUILDNUMBER)
  # Copy build logs to a staging directory
  - task: CopyFiles@2
    displayName: Gather Logs
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\artifacts'
      Contents: '**\*log'
      TargetFolder: '$(Build.StagingDirectory)\BuildLogs'
    continueOnError: true
    condition: succeededOrFailed()
  # Publish build logs to VSTS  
  - task: PublishBuildArtifacts@1
    displayName: Publish Logs to VSTS
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)\BuildLogs'
      ArtifactName: Windows_$(Agent.JobName)
      publishLocation: Container
    continueOnError: true
    condition: succeededOrFailed()
    
- phase: Linux
  variables:
    # set _PREVIEW_VSTS_DOCKER_IMAGE to the docker image you want to automatically run in a container
    _PREVIEW_VSTS_DOCKER_IMAGE: microsoft/dotnet-buildtools-prereqs:ubuntu-14.04-cross-0cd4667-20170319080304
  queue:
    name: Hosted Linux Preview
    parallel: 2
    demands:
    - agent.os -equals linux
    matrix:
      Build_Debug:
        BuildConfig: Debug
      Build_Release:
        BuildConfig: Release
  steps:
  - checkout: self
    clean: true
    fetchDepth: 1
  - script: build/cibuild.sh --configuration $(BuildConfig)
    name: Build
    env:
      OfficialBuildId: $(BUILD.BUILDNUMBER)
  # Copy build logs to a staging directory
  - task: CopyFiles@2
    displayName: Gather Logs
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/artifacts'
      Contents: '**/*log'
      TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
    continueOnError: true
    condition: succeededOrFailed()
  # Publish build logs to VSTS  
  - task: PublishBuildArtifacts@1
    displayName: Publish Logs to VSTS
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)/BuildLogs'
      ArtifactName: Linux_$(Agent.JobName)
      publishLocation: Container
    continueOnError: true
    condition: succeededOrFailed()
