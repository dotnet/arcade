trigger:
  batch: true
  branches:
    include:
    - main
    - release/6.0
    
pr:
  branches:
    include:
    - main
    - release/6.0
    - templates

variables:
- template: eng/common-variables.yml

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-stream-9

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts: true
          logs: true
          manifests: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      enableSourceIndex: true
      enableSourceBuild: true
      workspace:
        clean: all
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          vmImage: windows-latest
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
            Build_Debug:
              _BuildConfig: Debug
        preSteps:
        - checkout: self
          clean: true
          fetchDepth: 0

        steps:
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
          displayName: Windows Build / Publish

        - powershell: |
            # Detects if current change contains change for which we need to run XHarness E2E tests
            git fetch --all
            $diff=$(git diff HEAD HEAD~ --name-only -- src/Microsoft.DotNet.Helix/Sdk 'tests/XHarness*')

            if ($diff) {
              Write-Host "Detected changes that will require running XHarness E2E tests. Changed files:"
              Write-Host $diff
              Write-Host "##vso[task.setvariable variable=RunXHarnessTests;isOutput=true]True"
              exit 0
            }

            # Detects if Version.Details.xml or Versions.props changed (a version bump)
            $fullDiff=$(git diff --unified=0 HEAD HEAD~ -- eng/Version.Details.xml eng/Versions.props)
            if ($fullDiff -match 'Microsoft.DotNet.XHarness.CLI')
            {
              Write-Host "Detected a version bump of Microsoft.DotNet.XHarness.CLI, will run XHarness E2E tests"
              Write-Host "##vso[task.setvariable variable=RunXHarnessTests;isOutput=true]True"
              exit 0
            }

            Write-Host "No changes detected that will require running XHarness E2E tests"
          name: XHarnessChangeDetection
          displayName: Detect XHarness changes

      - job: Linux
        container: LinuxContainer
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
            Build_Release:
              _BuildConfig: Release
        preSteps:
        - checkout: self
          clean: true
        steps:
        - script: eng/common/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            /p:Test=false
          displayName: Unix Build / Publish

- stage: Test
  dependsOn: build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts:
            name: Artifacts_Test_$(Agent.OS)_$(_BuildConfig)
          logs:
            name: Logs_Test_$(Agent.OS)_$(_BuildConfig)
        download: true
      workspace:
        clean: all
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          vmimage: windows-latest
        variables:
          - name: runXHarnessTests
            value: $[ dependencies.build.Windows_NT.Build_Release.outputs['XHarnessChangeDetection.RunXHarnessTests'] ]
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
            Build_Debug:
              _BuildConfig: Debug
        preSteps:
        - checkout: self
          clean: true
        steps:
        - task: PowerShell@2
          displayName: sdk-task verification
          inputs:
            filePath: eng\common\sdk-task.ps1
            arguments: -task PublishToSymbolServers /p:DryRun="true" -restore -msbuildEngine dotnet
              /p:DotNetSymbolServerTokenMsdl=DryRunPTA
              /p:DotNetSymbolServerTokenSymWeb=DryRunPTA
              /p:PDBArtifactsDirectory='$(Build.ArtifactStagingDirectory)/PDBArtifacts/'
              /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
              /p:SymbolPublishingExclusionsFile='$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
              /p:Configuration=Release
              /p:PublishToMSDL=false

        - powershell: eng\common\build.ps1
            -configuration $(_BuildConfig)
            -prepareMachine
            -ci
            -restore
            -test
            -warnAsError $false
            -projects $(Build.SourcesDirectory)\tests\UnitTests.proj
            /bl:$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)\Helix.binlog
            /p:RestoreUsingNuGetTargets=false
          displayName: Run Helix Tests
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: ''

        - powershell: eng\common\build.ps1
            -configuration $(_BuildConfig)
            -prepareMachine
            -ci
            -restore
            -test
            -warnAsError $false
            -projects $(Build.SourcesDirectory)\tests\XHarness.Android.DeviceTests.proj
            /bl:$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)\Helix.XHarness.Android.Device.Tests.binlog
            /p:RestoreUsingNuGetTargets=false
          displayName: XHarness Android Helix Testing (Windows)
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: ''
          condition: and(succeeded(), eq(variables.runXHarnessTests, 'true'))

      - job: Linux
        timeoutInMinutes: 180
        container: LinuxContainer
        pool:
          vmimage: ubuntu-latest
        variables:
          - name: runXHarnessTests
            value: $[ dependencies.build.Windows_NT.Build_Release.outputs['XHarnessChangeDetection.RunXHarnessTests'] ]
        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
            Build_Release:
              _BuildConfig: Release
        preSteps:
        - checkout: self
          clean: true
        steps:
        - script: eng/common/build.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            --ci
            --restore
            --test
            --warnAsError false
            --projects $(Build.SourcesDirectory)/tests/UnitTests.proj
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.binlog
            /p:RestoreUsingNuGetTargets=false
          displayName: Run Helix Tests
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: ''

        - script: eng/common/build.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            -ci
            -restore
            -test
            -warnAsError false
            -projects $(Build.SourcesDirectory)/tests/XHarness.Apple.DeviceTests.proj
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.XHarness.Apple.Device.Tests.binlog
            /p:RestoreUsingNuGetTargets=false
          displayName: XHarness Apple Device Helix Testing
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: ''
          condition: and(succeeded(), eq(variables.runXHarnessTests, 'true'))

        - script: eng/common/build.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            -ci
            -restore
            -test
            -warnAsError false
            -projects $(Build.SourcesDirectory)/tests/XHarness.Android.SimulatorTests.proj
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.XHarness.Android.Simulator.Tests.binlog
            /p:RestoreUsingNuGetTargets=false
          displayName: XHarness Android Helix Testing (Linux)
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: ''
          condition: and(succeeded(), eq(variables.runXHarnessTests, 'true'))
