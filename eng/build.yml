parameters:
  name: ''
  # send telemetry if build is not a public build  
  enableTelemetry: true
  # install Microbuild plugin if not a public build
  enableMicrobuild: true
  # queue YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#queue
  queue: {}
  # variables YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#phase
  variables: {}

phases:
- template: /eng/common/templates/phases/base.yml
  parameters:
    enableTelemetry: ${{ parameters.enableTelemetry }}

    enableMicrobuild: ${{ parameters.enableMicrobuild }}

    name: ${{ parameters.name }}

    queue: ${{ parameters.queue }}

    variables: 
      ${{ insert }}: ${{ parameters.variables }}
      _HelixType: build/product
      _HelixBuildConfig: $(_BuildConfig)
      ${{ if notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
        _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
        _TeamName: DotNetCore
        _PublishArgs: /p:PB_PublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) 
          /p:PB_PublishBlobFeedUrl=$(_PublishBlobFeedUrl) 
          /p:PB_PublishType=$(_PublishType) 
        _HelixSource: official/dotnet/arcade/$(Build.SourceBranch)
      ${{ if in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
        _PublishArgs: ''
        _HelixSource: pr/dotnet/arcade/$(Build.SourceBranch)

    steps:
    # Internal only build steps
    - template: /eng/common/templates/steps/build-reason.yml
      parameters:
        conditions: not IndividualCI,BatchedCI,PullRequest
        steps:
        - task: AzureKeyVault@1
          inputs:
            azureSubscription: 'DotNet-Engineering-Services_KeyVault'
            KeyVaultName: EngKeyVault
            SecretsFilter: 'dotnetfeed-storage-access-key-1'
          condition: and(succeeded(), eq(variables['Agent.Os'], 'Windows_NT'))

    # Use utility script to run script command dependent on agent OS
    - script: eng\common\cibuild.cmd
        -configuration $(_BuildConfig) 
        -prepareMachine
        /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        /p:DotNetSignType=$(_SignType)
        /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
        /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
        $(_PublishArgs)
      displayName: Build / Publish
      condition: and(succeeded(), eq(variables['Agent.Os'], 'Windows_NT'))
        
    - script: eng/common/cibuild.sh
        --configuration $(_BuildConfig) 
        --prepareMachine
        /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        /p:DotNetSignType=$(_SignType)
        /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
        /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
        $(_PublishArgs)
      displayName: Build / Publish
      condition: and(succeeded(), ne(variables['Agent.Os'], 'Windows_NT'))

    # Internal only build steps (until publishing artifacts in public CI is supported)
    - template: /eng/common/templates/steps/build-reason.yml
      parameters:
        conditions: not IndividualCI,BatchedCI,PullRequest
        steps:
        - task: CopyFiles@2
          displayName: Gather Logs
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/$(_BuildConfig)/log'
            TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
          continueOnError: true
          condition: succeededOrFailed()
        - task: PublishBuildArtifacts@1
          displayName: Publish Logs to VSTS
          inputs:
            PathtoPublish: '$(Build.StagingDirectory)/BuildLogs'
            PublishLocation: Container
            ArtifactName: $(Agent.Os)_$(Agent.JobName)
          continueOnError: true
          condition: succeededOrFailed()
