parameters:
  # [Windows_NT (default), Linux, OSX] Used in templates to define variables which are OS specific
  agentOs: Windows_NT
  # send telemetry if build is not a PR or CI build  
  enableTelemetry: true
  # queue YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#queue
  queue: {}
  # variables YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#phase
  variables: {}

phases:
- template: /eng/common/templates/phases/base.yml
  parameters:
    agentOs: ${{ parameters.agentOs }}

    enableTelemetry: ${{ parameters.enableTelemetry }}

    name: ${{ parameters.agentOs }}

    queue: ${{ parameters.queue }}

    variables: 
      ${{ insert }}: ${{ parameters.variables }}
      _HelixType: build/product
      _HelixBuildConfig: $(_BuildConfig)
      ${{ if notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
        _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
        _TeamName: DotNetCore
        _PublishArgs: /p:PB_PublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) 
          /p:PB_PublishBlobFeedUrl=$(_PublishBlobFeedUrl) 
          /p:PB_PublishType=$(_PublishType) 
        _HelixSource: official/dotnet/arcade/$(Build.SourceBranch)
      ${{ if in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
        _PublishArgs: ''
        _HelixSource: pr/dotnet/arcade/$(Build.SourceBranch)

    steps:
    # Internal only build steps
    - template: /eng/common/templates/steps/build-reason.yml
      parameters:
        conditions: not IndividualCI,BatchedCI,PullRequest
        steps:
        - template: /eng/common/templates/steps/run-on-windows.yml
          parameters:
            agentOs: ${{ parameters.agentOs }} 
            steps:
            - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
              displayName: Install MicroBuild plugin
              inputs:
                signType: $(_SignType)
                zipSources: false
                esrpSigning: $(_UseEsrpSigning)
              env:
                TeamName: $(_TeamName)
              continueOnError: false
              condition: and(succeeded(), in(variables['_SignType'], 'real', 'test'))
            - task: AzureKeyVault@1
              inputs:
                azureSubscription: 'DotNet-Engineering-Services_KeyVault'
                KeyVaultName: EngKeyVault
                SecretsFilter: 'dotnetfeed-storage-access-key-1'
              condition: succeeded()

    # Use utility script to run script command dependent on agent OS
    - template: /eng/common/templates/steps/run-script-ifequalelse.yml
      parameters:
        parameter1: Windows_NT
        parameter2: ${{ parameters.agentOs }}
        ifScript: eng\common\cibuild.cmd
          -configuration $(_BuildConfig) 
          -prepareMachine
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
          /p:DotNetSignType=$(_SignType)
          /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
          /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
          $(_PublishArgs)
        elseScript: eng/common/cibuild.sh
          --configuration $(_BuildConfig) 
          --prepareMachine
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
          /p:DotNetSignType=$(_SignType)
          /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
          /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
          $(_PublishArgs)
        name: Build_Publish
        displayName: Build / Publish
        condition: succeeded()

    # Internal only build steps (until publishing artifacts in public CI is supported)
    - template: /eng/common/templates/steps/build-reason.yml
      parameters:
        conditions: not IndividualCI,BatchedCI,PullRequest
        steps:
        - task: CopyFiles@2
          displayName: Gather Logs
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/$(_BuildConfig)/log'
            TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
          continueOnError: true
          condition: succeededOrFailed()
        - task: PublishBuildArtifacts@1
          displayName: Publish Logs to VSTS
          inputs:
            PathtoPublish: '$(Build.StagingDirectory)/BuildLogs'
            PublishLocation: Container
            ${{ if eq(parameters.agentOs, 'Windows_NT') }}:
              ArtifactName: Windows_NT_$(Agent.JobName)
            ${{ if ne(parameters.agentOs, 'Windows_NT') }}:
              ArtifactName: Linux_$(Agent.JobName)
          continueOnError: true
          condition: succeededOrFailed()
