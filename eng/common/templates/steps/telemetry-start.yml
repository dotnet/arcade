parameters:
  helixSource: 'undefined_defaulted_in_telemetry.yml'
  helixType: 'undefined_defaulted_in_telemetry.yml'
  buildConfig: ''

steps:
- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'HelixProd_KeyVault'
    KeyVaultName: HelixProdKV
    SecretsFilter: 'HelixApiAccessToken'
  condition: always()
- bash: |
    /bin/bash ./telemetry/start-job.sh --source "$Source" --type "$Type" --build "$Build" --queue-id "$QueueId" --attempt "$Attempt" -p "operatingSystem=$OperatingSystem" -p "configuration=$Configuration"
  workingDirectory: $(Build.SourcesDirectory)/eng/common
  displayName: Send Job Start Telemetry
  env:
    HelixApiAccessToken: $(HelixApiAccessToken)
    Source: ${{ parameters.helixSource }}
    Type: ${{ parameters.helixType }}
    Build: $(Build.BuildNumber)
    QueueId: $(Agent.Os)
    Attempt: 1
    OperatingSystem: $(Agent.Os)
    Configuration: ${{ parameters.buildConfig }}
  condition: and(always(), ne(variables['Agent.Os'], 'Windows_NT'))
- bash: |
    /bin/bash ./telemetry/build/start.sh --build-uri "$BuildUri"
  workingDirectory: $(Build.SourcesDirectory)/eng/common
  displayName: Send Build Start Telemetry
  env:
    BuildUri: $(System.TaskDefinitionsUri)$(System.TeamProject)/_build/index?buildId=$(Build.BuildId)&_a=summary
    # defined via VSTS variables in start-job.sh
    Helix_JobToken: $(Helix_JobToken)
  condition: and(always(), ne(variables['Agent.Os'], 'Windows_NT'))
  
- powershell: |
    ./telemetry/start-job.ps1 -Source $env:Source -Type $env:Type -Build $env:Build -QueueId $env:QueueId -Attempt $env:Attempt -Properties @{ operatingSystem=$env:OperatingSystem; configuration=$env:Configuration } -Verbose
    if ($LASTEXITCODE -ne 0) {
      exit $LASTEXITCODE
    }
  workingDirectory: $(Build.SourcesDirectory)/eng/common
  displayName: Send Job Start Telemetry
  env:
    HelixApiAccessToken: $(HelixApiAccessToken)
    Source: ${{ parameters.helixSource }}
    Type: ${{ parameters.helixType }}
    Build: $(Build.BuildNumber)
    QueueId: $(Agent.Os)
    Attempt: 1
    OperatingSystem: $(Agent.Os)
    Configuration: ${{ parameters.buildConfig }}
  condition: and(always(), eq(variables['Agent.Os'], 'Windows_NT'))
- powershell: |
    ./telemetry/build/start.ps1 -BuildUri $env:BuildUri
    if ($LASTEXITCODE -ne 0) {
      exit $LASTEXITCODE
    }
  workingDirectory: $(Build.SourcesDirectory)/eng/common
  displayName: Send Build Start Telemetry
  env:
    BuildUri: $(System.TaskDefinitionsUri)$(System.TeamProject)/_build/index?buildId=$(Build.BuildId)&_a=summary
    # defined via VSTS variables in start-job.ps1
    Helix_JobToken: $(Helix_JobToken)
  condition: and(always(), eq(variables['Agent.Os'], 'Windows_NT'))
