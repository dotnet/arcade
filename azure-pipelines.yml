trigger:
  batch: true
  branches:
    include:
    - main
    - release/3.x
    - release/5.0

pr:
  branches:
    include:
    - main
    - release/3.x
    - release/5.0
    - templates

variables:
- template: eng/common-variables.yml

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-14.04-cross-0cd4667-20170319080304

stages:
- stage: build
  displayName: Build
  jobs:
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
    - template: /eng/common/templates/job/onelocbuild.yml
      parameters:
        MirrorRepo: arcade
        LclSource: lclFilesFromPackage
        LclPackageId: 'LCL-JUNO-PROD-ARCADE'
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts: true
          logs: true
          manifests: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      enableSourceIndex: true
      enableSourceBuild: true
      workspace:
        clean: all
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          ${{ if eq(variables._RunAsPublic, True) }}:
            vmImage: windows-latest
          ${{ if eq(variables._RunAsInternal, True) }}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals Build.Server.Amd64.VS2019
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Build_Debug:
                _BuildConfig: Debug
        preSteps:
        - checkout: self
          clean: true
        steps:
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
          displayName: Windows Build / Publish

      - ${{ if eq(variables._RunAsPublic, True) }}:
        - job: Linux
          container: LinuxContainer
          pool:
            vmImage: ubuntu-latest
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
              Build_Release:
                _BuildConfig: Release
          preSteps:
          - checkout: self
            clean: true
          steps:
          - script: eng/common/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              /p:Test=false
            displayName: Unix Build / Publish

- ${{ if eq(variables._RunAsPublic, True) }}:
  - stage: Test
    dependsOn: build
    jobs:
    - template: /eng/common/templates/jobs/jobs.yml
      parameters:
        artifacts:
          publish:
            logs: 
              name: Logs_Test_$(Agent.OS)_$(_BuildConfig)_$(_Testing)
          download: true
        workspace:
          clean: all
        jobs:
        - job: Windows_NT
          timeoutInMinutes: 90
          pool:
            vmimage: windows-latest
          strategy:
            matrix:
              Build_Release:
                _BuildConfig: Release
              Build_Debug:
                _BuildConfig: Debug
          variables:
          - _Testing: Helix
          preSteps:
          - checkout: self
            clean: true
          steps:
          - task: PowerShell@2
            displayName: sdk-task verification
            inputs:
              filePath: eng\common\sdk-task.ps1
              arguments: -task PublishToSymbolServers /p:DryRun="true" -restore -msbuildEngine dotnet
                /p:DotNetSymbolServerTokenMsdl=DryRunPTA
                /p:DotNetSymbolServerTokenSymWeb=DryRunPTA
                /p:PDBArtifactsDirectory='$(Build.ArtifactStagingDirectory)/PDBArtifacts/'
                /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
                /p:SymbolPublishingExclusionsFile='$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
                /p:Configuration=Release
                /p:PublishToMSDL=false
          - powershell: eng\common\build.ps1
              -configuration $(_BuildConfig) 
              -prepareMachine
              -ci
              -restore
              -test
              -warnAsError $false
              -projects $(Build.SourcesDirectory)\tests\UnitTests.proj
              /bl:$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)\Helix.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: Run Helix Tests
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
        - job: Windows_NT_XHarness
          timeoutInMinutes: 90
          pool:
            vmimage: windows-latest
          strategy:
            matrix:
              Build_Release:
                _BuildConfig: Release
              Build_Debug:
                _BuildConfig: Debug
          variables:
          - _Testing: Xharness
          preSteps:
          - checkout: self
            clean: true
          steps:
          - powershell: eng\common\build.ps1
              -configuration $(_BuildConfig) 
              -prepareMachine
              -ci
              -restore
              -test
              -warnAsError $false
              -projects $(Build.SourcesDirectory)\tests\XHarness.Android.DeviceTests.proj
              /bl:$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)\Helix.XHarness.Android.Device.Tests.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: XHarness Android Helix Testing (Windows)
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
        - job: Linux
          timeoutInMinutes: 90
          container: LinuxContainer
          pool:
            vmimage: ubuntu-latest
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
              Build_Release:
                _BuildConfig: Release
          variables:
          - _Testing: Helix
          preSteps:
          - checkout: self
            clean: true
          steps:
          - script: eng/common/build.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              --ci
              --restore
              --test
              --warnAsError false
              --projects $(Build.SourcesDirectory)/tests/UnitTests.proj
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: Run Helix Tests
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
        - job: Linux_XHarness_Apple_Simulator
          timeoutInMinutes: 90
          container: LinuxContainer
          pool:
            vmimage: ubuntu-latest
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
              Build_Release:
                _BuildConfig: Release
          variables:
          - _Testing: Xharness_Apple_Simulator
          preSteps:
          - checkout: self
            clean: true
          steps:
          - script: eng/common/build.sh
              -configuration $(_BuildConfig)
              -prepareMachine
              -ci
              -restore
              -test
              -warnAsError false
              -projects $(Build.SourcesDirectory)/tests/XHarness.Apple.SimulatorTests.proj
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/XHarness.Apple.Simulator.Tests.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: XHarness Apple Simulator Helix Testing
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
        - job: Linux_XHarness_Apple_Device
          timeoutInMinutes: 90
          container: LinuxContainer
          pool:
            vmimage: ubuntu-latest
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
              Build_Release:
                _BuildConfig: Release
          variables:
          - _Testing: Xharness_Apple_Device
          preSteps:
          - checkout: self
            clean: true
          steps:
          - script: eng/common/build.sh
              -configuration $(_BuildConfig)
              -prepareMachine
              -ci
              -restore
              -test
              -warnAsError false
              -projects $(Build.SourcesDirectory)/tests/XHarness.Apple.DeviceTests.proj
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.XHarness.Apple.Device.Tests.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: XHarness Apple Device Helix Testing
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
        - job: Linux_XHarness
          timeoutInMinutes: 90
          container: LinuxContainer
          pool:
            vmimage: ubuntu-latest
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
              Build_Release:
                _BuildConfig: Release
          variables:
          - _Testing: Xharness
          preSteps:
          - checkout: self
            clean: true
          steps:
          - script: eng/common/build.sh
              -configuration $(_BuildConfig) 
              -prepareMachine
              -ci
              -restore
              -test
              -warnAsError false
              -projects $(Build.SourcesDirectory)/tests/XHarness.Android.SimulatorTests.proj
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.XHarness.Android.Simulator.Tests.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: XHarness Android Helix Testing (Linux)
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''

- ${{ if eq(variables._RunAsInternal, True) }}:
  - stage: ValidateSdk
    displayName: Validate Arcade SDK
    dependsOn: build
    jobs:
    - template: /eng/validate-sdk.yml
      parameters:
        buildArgs: -configuration $(_BuildConfig) 
          -prepareMachine
          $(_InternalBuildArgs)
          /p:Test=false

  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      publishingInfraVersion: 3
      # signing validation will not run, even if the below value is 'true', if the 'PostBuildSign' variable is set to 'true'
      enableSigningValidation: false      
      # Sourcelink validation isn't passing for Arcade due to some regressions. This should be
      # enabled back once this issue is resolved: https://github.com/dotnet/arcade/issues/2912
      enableSourceLinkValidation: false
      publishDependsOn:
      - Validate
      - ValidateSdk
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: true
        continueOnError: false
        params: ' -SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "Arcade"
        -TsaCodebaseName "Arcade"
        -TsaPublish $True
        -PoliCheckAdditionalRunConfigParams @("UserExclusionPath < $(Build.SourcesDirectory)/eng/PoliCheckExclusions.xml")'
