trigger:
  batch: true
  branches:
    include:
    - master
    - release/3.x
    - release/5.0

pr:
  branches:
    include:
    - master
    - release/3.x
    - release/5.0
    - templates

variables:
- template: eng/common-variables.yml

resources:
  containers:
  - container: LinuxContainer
    image: microsoft/dotnet-buildtools-prereqs:ubuntu-14.04-cross-0cd4667-20170319080304

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts: true
          logs: true
          manifests: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      workspace:
        clean: all
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          ${{ if eq(variables._RunAsPublic, True) }}:
            name: NetCorePublic-Pool
            queue: BuildPool.Server.Amd64.VS2017.Arcade.Open
          ${{ if eq(variables._RunAsInternal, True) }}:
            name: NetCoreInternal-Pool
            queue: BuildPool.Server.Amd64.VS2017.Arcade
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Build_Debug:
                _BuildConfig: Debug
        preSteps:
        - checkout: self
          clean: true
        steps:
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
          displayName: Windows Build / Publish
        - task: ComponentGovernanceComponentDetection@0
      - ${{ if eq(variables._RunAsPublic, True) }}:
        - job: Linux
          container: LinuxContainer
          pool:
            name:  NetCorePublic-Pool
            queue: BuildPool.Ubuntu.1604.Amd64.Arcade.Open
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
              Build_Release:
                _BuildConfig: Release
          preSteps:
          - checkout: self
            clean: true
          steps:
          - script: eng/common/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              /p:Test=false
            displayName: Unix Build / Publish

- ${{ if eq(variables._RunAsPublic, True) }}:
  - stage: Test
    dependsOn: build
    jobs:
    - template: /eng/common/templates/jobs/jobs.yml
      parameters:
        artifacts:
          publish:
            artifacts:
              name: Artifacts_Test_$(Agent.OS)_$(_BuildConfig)
            logs: 
              name: Logs_Test_$(Agent.OS)_$(_BuildConfig)
          download: true
        workspace:
          clean: all
        jobs:
        - job: Windows_NT
          timeoutInMinutes: 90
          pool:
            vmimage: windows-latest
          strategy:
            matrix:
              Build_Release:
                _BuildConfig: Release
              Build_Debug:
                _BuildConfig: Debug
          preSteps:
          - checkout: self
            clean: true
          steps:
          - powershell: eng\common\build.ps1
              -configuration $(_BuildConfig) 
              -prepareMachine
              -ci
              -restore
              -test
              -projects $(Build.SourcesDirectory)\tests\UnitTests.proj
              /bl:$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)\Helix.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: Run Helix Tests
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
          - powershell: eng\common\build.ps1
              -configuration $(_BuildConfig) 
              -prepareMachine
              -ci
              -restore
              -test
              -projects $(Build.SourcesDirectory)\tests\UnitTests.XHarness.Android.proj
              /bl:$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)\Helix.XHarness.Android.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: XHarness Android Helix Testing
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
        - job: Linux
          container: LinuxContainer
          pool:
            vmimage: ubuntu-latest
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
              Build_Release:
                _BuildConfig: Release
          preSteps:
          - checkout: self
            clean: true
          steps:
          - script: eng/common/build.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              --ci
              --restore
              --test
              --projects $(Build.SourcesDirectory)/tests/UnitTests.proj
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: Run Helix Tests
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
          - script: eng/common/build.sh
              -configuration $(_BuildConfig)
              -prepareMachine
              -ci
              -restore
              -test
              -projects $(Build.SourcesDirectory)/tests/UnitTests.XHarness.iOS.proj
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.XHarness.iOS.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: XHarness iOS Helix Testing
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''
          - script: eng/common/build.sh
              -configuration $(_BuildConfig)
              -prepareMachine
              -ci
              -restore
              -test
              -projects $(Build.SourcesDirectory)/tests/UnitTests.XHarness.iOS.IncludeCliOnly.proj
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.XHarness.CLI.binlog
              /p:RestoreUsingNuGetTargets=false
            displayName: XHarness CLI pre-install Helix Testing
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              HelixAccessToken: ''

- ${{ if eq(variables._RunAsInternal, True) }}:
  - stage: ValidateSdk
    displayName: Validate Arcade SDK
    dependsOn: build
    jobs:
    - template: /eng/validate-sdk.yml
      parameters:
        buildArgs: -configuration $(_BuildConfig) 
          -prepareMachine
          $(_InternalBuildArgs)
          /p:Test=false

  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      publishingInfraVersion: 3

      # Sourcelink validation isn't passing for Arcade due to some regressions. This should be
      # enabled back once this issue is resolved: https://github.com/dotnet/arcade/issues/2912
      enableSourceLinkValidation: false
      publishDependsOn:
      - Validate
      - ValidateSdk
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: true
        continueOnError: false
        params: ' -SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "Arcade"
        -TsaCodebaseName "Arcade"
        -TsaPublish $True'
