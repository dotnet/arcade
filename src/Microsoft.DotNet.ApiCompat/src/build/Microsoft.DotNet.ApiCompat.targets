<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <PropertyGroup>
    <ApiCompatAssembly Condition="'$(MSBuildRuntimeType)' == 'core'">$(MSBuildThisFileDirectory)..\tools\net7.0\Microsoft.DotNet.ApiCompat.dll</ApiCompatAssembly>
    <ApiCompatAssembly Condition="'$(MSBuildRuntimeType)' != 'core'">$(MSBuildThisFileDirectory)..\tools\net472\Microsoft.DotNet.ApiCompat.exe</ApiCompatAssembly>

    <!-- By default, run API Compat if this package is referenced. -->
    <RunApiCompat Condition="'$(RunApiCompat)' == '' and '$(DesignTimeBuild)' != 'true'">true</RunApiCompat>
    <RunApiCompatForSrc Condition="'$(RunApiCompatForSrc)' == ''">$(RunApiCompat)</RunApiCompatForSrc>
    <RunMatchingRefApiCompat Condition="'$(RunMatchingRefApiCompat)' == ''">false</RunMatchingRefApiCompat>

    <_ApiCompatSemaphoreFile>$(MSBuildThisFileName).semaphore</_ApiCompatSemaphoreFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RunApiCompat)' == 'true'">
    <TargetsTriggeredByCompilation Condition="'$(RunApiCompatForSrc)' == 'true'">$(TargetsTriggeredByCompilation);ValidateApiCompatForSrc</TargetsTriggeredByCompilation>
    <TargetsTriggeredByCompilation Condition="'$(RunMatchingRefApiCompat)' == 'true'">$(TargetsTriggeredByCompilation);RunMatchingRefApiCompat</TargetsTriggeredByCompilation>
  </PropertyGroup>

  <ItemGroup>
    <!-- Support the existing ApiCompatExcludeAttributeList property switch to not break existing consumers. -->
    <ApiCompatExcludeAttributesFile Include="$(ApiCompatExcludeAttributeList.Split(','))" Condition="'$(ApiCompatExcludeAttributeList)' != ''" />
    <CustomAdditionalCompileInputs Condition="Exists('$(IntermediateOutputPath)$(_ApiCompatSemaphoreFile)')" Include="$(IntermediateOutputPath)$(_ApiCompatSemaphoreFile)" />
  </ItemGroup>

  <UsingTask TaskName="Microsoft.DotNet.ApiCompat.ApiCompatTask" AssemblyFile="$(ApiCompatAssembly)" />

  <!-- ApiCompat for Implementation Assemblies  -->
  <Target Name="ValidateApiCompatForSrc"
          DependsOnTargets="$(ApiCompatDependsOn)"
          Condition="'$(RunApiCompatForSrc)' == 'true' and '$(RunApiCompat)' == 'true'">

    <Error Condition="'@(ResolvedMatchingContract)' == ''"
           Text="ResolvedMatchingContract item must be specified to run API compat." />
    <Error Condition="!Exists('%(ResolvedMatchingContract.FullPath)')"
           Text="ResolvedMatchingContract '%(ResolvedMatchingContract.FullPath)' did not exist." />

    <ItemGroup>
      <_DependencyDirectoriesTemp Include="@(ReferencePath -> '%(RootDir)%(Directory)')" />
      <!-- Remove duplicate directories by batching over them -->
      <!-- Add project references first to give precedence to project-specific files -->
      <_DependencyDirectories Condition="'%(_DependencyDirectoriesTemp.ReferenceSourceTarget)' == 'ProjectReference'" Include="%(_DependencyDirectoriesTemp.Identity)" />
      <_DependencyDirectories Condition="'%(_DependencyDirectoriesTemp.ReferenceSourceTarget)' != 'ProjectReference'" Include="%(_DependencyDirectoriesTemp.Identity)" />
      <_ContractDependencyDirectories Include="@(ResolvedMatchingContract -> '%(RootDir)%(Directory)')" />
      <_ContractDependencyDirectories Include="@(ResolvedMatchingContract -> '%(DependencyPaths)')" />
      <_ContractDependencyDirectories Include="$(ContractDependencyPaths)" />
      <ApiCompatBaselineFile Condition="Exists('$(MSBuildProjectDirectory)\ApiCompatBaseline.$(TargetFramework).txt')" Include="$(MSBuildProjectDirectory)\ApiCompatBaseline.$(TargetFramework).txt" />
      <ApiCompatBaselineFile Condition="Exists('$(MSBuildProjectDirectory)\ApiCompatBaseline.txt')" Include="$(MSBuildProjectDirectory)\ApiCompatBaseline.txt" />
    </ItemGroup>

    <MakeDir Directories="$(IntermediateOutputPath)" />
    <ApiCompatTask Contracts="@(ResolvedMatchingContract)"
                   ImplementationDirectories="$(IntermediateOutputPath);@(_DependencyDirectories)"
                   ContractDepends="@(_ContractDependencyDirectories)"
                   ExcludeAttributes="@(ApiCompatExcludeAttributesFile)"
                   EnforceOptionalRules="$(ApiCompatEnforceOptionalRules)"
                   BaselineFiles="@(ApiCompatBaselineFile)"
                   ValidateBaseline="$(ApiCompatValidateBaseline)"
                   IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="ApiCompatExitCode" />
    </ApiCompatTask>
    
    <!-- To force incremental builds to show failures again we are invalidating one compile input. -->
    <Touch Condition="'$(ApiCompatExitCode)' != '0'" Files="$(IntermediateOutputPath)$(_ApiCompatSemaphoreFile)" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
    <Error Condition="'$(ApiCompatExitCode)' != '0'" Text="ApiCompat failed for '$(TargetPath)'" />
  </Target>

  <!-- Reverse APICompat to verify that the reference assembly has all the APIs that are in the implementation -->
  <Target Name="RunMatchingRefApiCompat"
          DependsOnTargets="$(ApiCompatDependsOn)"
          Condition="'$(RunMatchingRefApiCompat)' == 'true' and '$(RunApiCompat)' == 'true'">

    <Error Condition="'@(ResolvedMatchingContract)' == ''"
           Text="ResolvedMatchingContract item must be specified to run API compat." />
    <Error Condition="!Exists('%(ResolvedMatchingContract.FullPath)')"
           Text="ResolvedMatchingContract '%(ResolvedMatchingContract.FullPath)' did not exist." />

    <ItemGroup>
      <_ContractDependencyDirectoriesTemp Include="@(ReferencePath -> '%(RootDir)%(Directory)')" />
      <!-- Remove duplicate directories by batching over them -->
      <!-- Add project references first to give precedence to project-specific files -->
      <_ContractDependencyDirectories Remove="@(_ContractDependencyDirectories)" />
      <_ContractDependencyDirectories Condition="'%(_ContractDependencyDirectoriesTemp.ReferenceSourceTarget)' == 'ProjectReference'" Include="%(_ContractDependencyDirectoriesTemp.Identity)" />
      <_ContractDependencyDirectories Condition="'%(_ContractDependencyDirectoriesTemp.ReferenceSourceTarget)' != 'ProjectReference'" Include="%(_ContractDependencyDirectoriesTemp.Identity)" />
      <_ImplementationDependencyDirectories Include="@(ResolvedMatchingContract -> '%(RootDir)%(Directory)')" />
      <_ImplementationDependencyDirectories Include="@(ResolvedMatchingContract -> '%(DependencyPaths)')" />
      <_ImplementationDependencyDirectories Include="$(ContractDependencyPaths)" />
      <MatchingRefApiCompatBaseline Condition="Exists('$(MSBuildProjectDirectory)\MatchingRefApiCompatBaseline.$(TargetFramework).txt')" Include="$(MSBuildProjectDirectory)\MatchingRefApiCompatBaseline.$(TargetFramework).txt" />
      <MatchingRefApiCompatBaseline Condition="Exists('$(MSBuildProjectDirectory)\MatchingRefApiCompatBaseline.txt')" Include="$(MSBuildProjectDirectory)\MatchingRefApiCompatBaseline.txt" />
    </ItemGroup>

    <MakeDir Directories="$(IntermediateOutputPath)" />
    <ApiCompatTask Contracts="@(IntermediateAssembly)"
                   ContractDepends="@(_ContractDependencyDirectories)"
                   EnforceOptionalRules="$(ApiCompatEnforceOptionalRules)"
                   ExcludeAttributes="@(ApiCompatExcludeAttributesFile)"
                   ImplementationDirectories="@(_ImplementationDependencyDirectories)"
                   LeftOperand="implementation"
                   RightOperand="reference"
                   BaselineFiles="@(MatchingRefApiCompatBaseline)"
                   ValidateBaseline="$(ApiCompatValidateBaseline)"
                   IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="MatchingRefApiCompatExitCode" />
    </ApiCompatTask>

    <!-- To force incremental builds to show failures again we are invalidating one compile input. -->
    <Touch Condition="'$(MatchingRefApiCompatExitCode)' != '0'" Files="$(IntermediateOutputPath)$(_ApiCompatSemaphoreFile)" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
    <Error Condition="'$(MatchingRefApiCompatExitCode)' != '0'" Text="MatchingRefApiCompat failed - The reference assembly doesn't match all the APIs in the implementation for '$(TargetPath)'. To address either fix errors in the reference assembly (referenced as implementation in compat errors for this reverse compat check), add the issues to the baseline file '@(MatchingRefApiCompatBaseline)' or disable this check by setting RunMatchingRefApiCompat=false in this project." />
  </Target>

</Project>
