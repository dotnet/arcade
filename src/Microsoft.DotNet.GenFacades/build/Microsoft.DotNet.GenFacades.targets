<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="'$(IsPartialFacadeAssembly)' == 'true' AND '$(IsReferenceAssembly)' != 'true'">
    <!-- Tell ResolveMatchingContract to run and resolve contract to project reference -->
    <ResolveMatchingContract>true</ResolveMatchingContract>
    <FillPartialFacadeDependsOn>
      $(FillPartialFacadeDependsOn);ResolveMatchingContract
    </FillPartialFacadeDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsPartialFacadeAssembly)' == 'true' AND '$(IsReferenceAssembly)' == 'true'">
    <!-- reference facades will always have overlapping types so suppress compiler warnings -->
    <NoWarn>$(NoWarn);0436</NoWarn>
  </PropertyGroup>

  <!-- Inputs and outputs of FillPartialFacade -->
  <PropertyGroup Condition="'$(IsPartialFacadeAssembly)' == 'true'">
    <PartialFacadeAssemblyPath>$(IntermediateOutputPath)$(TargetName)$(TargetExt)</PartialFacadeAssemblyPath>
    <PartialFacadeSymbols>$(IntermediateOutputPath)$(TargetName).pdb</PartialFacadeSymbols>
    <GenFacadesInputPath>$(IntermediateOutputPath)PreGenFacades/</GenFacadesInputPath>
    <GenFacadesInputAssembly>$(GenFacadesInputPath)$(TargetName)$(TargetExt)</GenFacadesInputAssembly>
    <GenFacadesInputSymbols>$(GenFacadesInputPath)$(TargetName).pdb</GenFacadesInputSymbols>
    <GenFacadesOutputPath>$(IntermediateOutputPath)</GenFacadesOutputPath>
    <GenFacadesResponseFile>$(GenFacadesInputPath)genfacades.rsp</GenFacadesResponseFile>
  </PropertyGroup>

  <PropertyGroup>
    <_MicrosoftDotNetGenFacadesTaskDir Condition="'$(MSBuildRuntimeType)' == 'core'">$(MSBuildThisFileDirectory)../tools/netcoreapp2.1/</_MicrosoftDotNetGenFacadesTaskDir>
    <_MicrosoftDotNetGenFacadesTaskDir Condition="'$(MSBuildRuntimeType)' != 'core'">$(MSBuildThisFileDirectory)../tools/net472/</_MicrosoftDotNetGenFacadesTaskDir>
  </PropertyGroup>

  <UsingTask TaskName="GenFacadesTask" AssemblyFile="$(_MicrosoftDotNetGenFacadesTaskDir)Microsoft.DotNet.GenFacades.dll" />

  <!-- Hook both partial-facade-related targets into TargetsTriggeredByCompilation. This will cause them
          to only be invoked upon a successful compilation; they can conceptualized as an extension
          of the assembly compilation process.
  -->
  <PropertyGroup>
    <TargetsTriggeredByCompilation Condition="'$(IsPartialFacadeAssembly)' == 'true' and '$(DesignTimeBuild)' != 'true'">
      $(TargetsTriggeredByCompilation);FillPartialFacadeUsingTask
    </TargetsTriggeredByCompilation>
  </PropertyGroup>

  <!-- FillPartialFacade
       Inputs:
         * An "input assembly"
         * A contract assembly
         * Seed assemblies

       Fills the "input assembly" by finding types in the contract assembly that are missing from it, and adding type-forwards
         to those matching types in the seed assemblies.
  -->
  <Target Name="FillPartialFacadeUsingTask" DependsOnTargets="$(FillPartialFacadeDependsOn)">

    <ItemGroup>
      <!-- References used for compilation are automatically included as seed assemblies -->
      <GenFacadesSeeds Include="@(ReferencePath)" />
    </ItemGroup>

    <Error Text="No single matching contract found." Condition="'$(IsReferenceAssembly)' != 'true' AND '@(ResolvedMatchingContract->Count())' != '1'" />

    <MakeDir Directories="$(GenFacadesInputPath)" />

    <!-- Move the assembly into a subdirectory for GenFacades -->
    <Move SourceFiles="$(PartialFacadeAssemblyPath)"
          DestinationFolder="$(GenFacadesInputPath)"
    />

    <PropertyGroup>
      <ProducePdb>true</ProducePdb>
      <!-- Partial facade PDB generation only functions on Windows -->
      <ProducePdb Condition="'$(DebugSymbols)' == 'false' OR '$(RunningOnUnix)' == 'true'">false</ProducePdb>
      <GenFacadesIgnoreMissingTypes Condition="'$(GenFacadesIgnoreMissingTypes)' == ''">false</GenFacadesIgnoreMissingTypes>
      <GenFacadesIgnoreBuildAndRevisionMismatch Condition="'$(GenFacadesIgnoreBuildAndRevisionMismatch)' == ''">false</GenFacadesIgnoreBuildAndRevisionMismatch>
    </PropertyGroup>

    <!-- Move the PDB into a subdirectory for GenFacades if we are producing PDBs -->
    <Move SourceFiles="$(PartialFacadeSymbols)"
          DestinationFolder="$(GenFacadesInputPath)"
          Condition="$(ProducePdb)" />

    <PropertyGroup Condition="'$(IsReferenceAssembly)' != 'true'">
      <GenFacadesPartialFacadeAssemblyPath>$(GenFacadesInputAssembly)</GenFacadesPartialFacadeAssemblyPath>
      <GenFacadesContracts>%(ResolvedMatchingContract.Identity)</GenFacadesContracts>
    </PropertyGroup>

    <PropertyGroup Condition="'$(IsReferenceAssembly)' == 'true'">
      <GenFacadesContracts>$(GenFacadesInputAssembly)</GenFacadesContracts>
      <GenFacadesBuildPartialReferenceFacade>true</GenFacadesBuildPartialReferenceFacade>
    </PropertyGroup>

    <GenFacadesTask
      PartialFacadeAssemblyPath="$(GenFacadesPartialFacadeAssemblyPath)"
      Contracts="$(GenFacadesContracts)"
      Seeds="@(GenFacadesSeeds, ',')"
      FacadePath="$(GenFacadesOutputPath.TrimEnd('/'))"
      SeedTypePreferencesUnsplit="@(SeedTypePreference)"
      ProducePdb="$(ProducePdb)"
      ClearBuildAndRevision="$(GenFacadesClearBuildAndRevision)"
      IgnoreMissingTypes="$(GenFacadesIgnoreMissingTypes)"
      IgnoreBuildAndRevisionMismatch="$(GenFacadesIgnoreBuildAndRevisionMismatch)"
      BuildDesignTimeFacades="$(GenFacadesBuildDesignTimeFacades)"
      InclusionContracts="$(GenFacadesInclusionContracts)"
      SeedLoadErrorTreatment="$(GenFacadesSeedLoadErrorTreatment)"
      ContractLoadErrorTreatment="$(GenFacadesContractLoadErrorTreatment)"
      ForceZeroVersionSeeds="$(GenFacadesForceZeroVersionSeeds)"
      BuildPartialReferenceFacade="$(GenFacadesBuildPartialReferenceFacade)"
    />

    <ItemGroup>
      <FileWrites Include="$(GenFacadesInputAssembly)" />
      <FileWrites Include="$(GenFacadesInputSymbols)" />
    </ItemGroup>
  </Target>
</Project>