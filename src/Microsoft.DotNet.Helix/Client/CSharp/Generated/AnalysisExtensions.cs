// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Analysis.
    /// </summary>
    public static partial class AnalysisExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='job'>
            /// </param>
            /// <param name='workitem'>
            /// </param>
            /// <param name='analysisType'>
            /// </param>
            /// <param name='analysisName'>
            /// </param>
            /// <param name='reason'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetReasonAsync(this IAnalysis operations, string job, string workitem, string analysisType, string analysisName, FailureReason reason, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.SetReasonWithHttpMessagesAsync(job, workitem, analysisType, analysisName, reason, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='job'>
            /// </param>
            /// <param name='workitem'>
            /// </param>
            /// <param name='analysisType'>
            /// </param>
            /// <param name='analysisName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDetailsAsync(this IAnalysis operations, string job, string workitem, string analysisType, string analysisName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(job, workitem, analysisType, analysisName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
