// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Storage operations.
    /// </summary>
    public partial interface IStorage
    {
        /// <summary>
        /// This API requires authentication.
        /// List of the containers associated with a specified user, optionally
        /// freshly generating read/write tokens for their use.
        /// </summary>
        /// <param name='getSasTokens'>
        /// Optional: Generate fresh SAS tokens for provided containers
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<ContainerInformation>>> ListWithHttpMessagesAsync(bool? getSasTokens = default(bool?), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This API requires authentication.
        /// Create a new drop container in the Helix-managed storage accounts.
        /// </summary>
        /// <remarks>
        /// POST body should be empty or contain a JSON blob.
        ///
        /// If JSON is specified, it may contain the following:
        /// ExpirationTimeUtc - Requested time for expiration of the container
        /// (after which it will be deleted)
        /// DesiredName - Name of container if this does not already exist.
        ///
        /// Creator field will be set to the authenticated user
        /// </remarks>
        /// <param name='newContainer'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ContainerInformation>> NewOperationWithHttpMessagesAsync(ContainerCreationRequest newContainer, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This API requires authentication.
        /// Extend the lifespan of a container, in days, up to the maximum
        /// allowed lifespan of a new container relative to UtcNow
        /// </summary>
        /// <remarks>
        /// POST body should contain a JSON blob matching
        /// ContainerExtensionRequest type
        ///
        /// If JSON is specified, it may contain the following:
        ///
        /// ExtensionInDays - Days to increment expiration time
        /// ContainerName - Name of container (must be created by user)
        /// StorageAccountName - Storage account name for container.
        /// </remarks>
        /// <param name='extensionRequest'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ContainerInformation>> ExtendExpirationWithHttpMessagesAsync(ContainerExtensionRequest extensionRequest, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
