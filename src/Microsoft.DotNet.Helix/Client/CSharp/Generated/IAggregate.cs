// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Aggregate operations.
    /// </summary>
    public partial interface IAggregate
    {
        /// <summary>
        /// Get an aggregation of all workitem analyses for a specific workitem
        /// in the job set.
        /// </summary>
        /// <param name='workitem'>
        /// The workitem name to retrieve analyses for.
        /// </param>
        /// <param name='groupBy'>
        /// A list of grouping expressions that will control
        /// the groups of the returned list. For more information, see 'jobs'
        /// method. {!:JobSummary(JobFilter,string[],int)}
        /// </param>
        /// <param name='otherProperties'>
        /// A list of other job properties to return.
        /// </param>
        /// <param name='filtercreator'>
        /// The job creator.
        /// </param>
        /// <param name='filtersource'>
        /// The job source.
        /// </param>
        /// <param name='filtertype'>
        /// The job type.
        /// </param>
        /// <param name='filterbuild'>
        /// The build number.
        /// </param>
        /// <param name='filtername'>
        /// The Name/CorrelationId number.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<AggregateWorkItemSummary>> AnalysisSummaryWithHttpMessagesAsync(string workitem, IList<string> groupBy, IList<string> otherProperties, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the build history for the past 30 days from the specified
        /// source and type pair(s)
        /// </summary>
        /// <remarks>
        /// The source(s) and type(s) must come in pairs
        /// </remarks>
        /// <param name='source'>
        /// The sources to get build history for
        /// </param>
        /// <param name='type'>
        /// The types to get build history for
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<BuildHistoryItem>>> BuildHistoryWithHttpMessagesAsync(IList<string> source, IList<string> type, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the information for the specified build.
        /// </summary>
        /// <remarks>
        /// The source(s) and type(s) must come in pairs
        /// </remarks>
        /// <param name='sources'>
        /// The sources for the build
        /// </param>
        /// <param name='types'>
        /// The types for the build
        /// </param>
        /// <param name='buildNumber'>
        /// The build number
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<BuildAggregation>> BuildWithHttpMessagesAsync(IList<string> sources, IList<string> types, string buildNumber, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a summary of all the latest jobs that match the given filter.
        /// Aggregation will include a passed/running/failed status for the
        /// aggregation
        /// </summary>
        /// <param name='groupBy'>
        /// A list of grouping expressions that will control
        /// the groups of the returned list. All jobs that have the same values
        /// for
        /// all provided group parameters will be aggregated into a single
        /// entry.
        /// Valid values for the values are : 'job.build'; 'job.properties.*",
        /// where * is any property sent with the job
        /// in the "Properties" value.
        /// </param>
        /// <param name='maxResultSets'>
        /// The maximum number of the first grouping parameter
        /// to return. For example, if your groups were ['job.build',
        /// 'job.properties.config'],
        /// passing 6 will limit the return value to the first 6 builds.
        /// Additional
        /// group arguments are not limited.
        /// </param>
        /// <param name='filtercreator'>
        /// The job creator.
        /// </param>
        /// <param name='filtersource'>
        /// The job source.
        /// </param>
        /// <param name='filtertype'>
        /// The job type.
        /// </param>
        /// <param name='filterbuild'>
        /// The build number.
        /// </param>
        /// <param name='filtername'>
        /// The Name/CorrelationId number.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<AggregatedWorkItemCounts>>> JobSummaryMethodWithHttpMessagesAsync(IList<string> groupBy, int maxResultSets, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets an aggregation of unique workitems in a job set.
        /// </summary>
        /// <param name='groupBy'>
        /// A list of grouping expressions that will control
        /// the groups of the returned list. For more information, see 'jobs'
        /// method.
        /// {M:Helix.LifeTime.Web.Controllers.Api_2017_04_14.AggregateApi_2017_04_14_Controller.JobSummary(Helix.LifeTime.Web.Shared.JobFilter,System.String[],System.Int32)}
        /// </param>
        /// <param name='filtercreator'>
        /// The job creator.
        /// </param>
        /// <param name='filtersource'>
        /// The job source.
        /// </param>
        /// <param name='filtertype'>
        /// The job type.
        /// </param>
        /// <param name='filterbuild'>
        /// The build number.
        /// </param>
        /// <param name='filtername'>
        /// The Name/CorrelationId number.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<AggregatedWorkItemCounts>>> WorkItemSummaryMethodWithHttpMessagesAsync(IList<string> groupBy, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <param name='source'>
        /// </param>
        /// <param name='type'>
        /// </param>
        /// <param name='build'>
        /// </param>
        /// <param name='workitem'>
        /// </param>
        /// <param name='analysisType'>
        /// </param>
        /// <param name='analysisName'>
        /// </param>
        /// <param name='groupBy'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<AggregateAnalysisDetail>>> AnalysisDetailWithHttpMessagesAsync(string source, string type, string build, string workitem, string analysisType, string analysisName, IList<string> groupBy, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the properties for a build. This will return any properties
        /// that are common
        /// among all jobs in a given build. If a job doesn't have a particular
        /// property,
        /// that property will still be returned if it is not different among
        /// jobs that have it.
        ///
        /// For example, if all your build jobs have a "sourceVersion" property
        /// referencing the
        /// hash used in the build, that property would be returned.
        /// </summary>
        /// <param name='filtercreator'>
        /// The job creator.
        /// </param>
        /// <param name='filtersource'>
        /// The job source.
        /// </param>
        /// <param name='filtertype'>
        /// The job type.
        /// </param>
        /// <param name='filterbuild'>
        /// The build number.
        /// </param>
        /// <param name='filtername'>
        /// The Name/CorrelationId number.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>>> PropertiesWithHttpMessagesAsync(string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Continue a previous call to 'investigation'. See the GET
        /// 'investigation' API for more details
        /// </summary>
        /// <param name='id'>
        /// The token from a previous call to 'investigation'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<InvestigationResult>> ContinueOperationWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Begin an investigation query. This call may not return all results
        /// immediately.
        /// If the "Token" value of the response is set, future calls to
        /// investigation/continue will
        /// be required to get further data.
        /// Something requires "investigation" at least on provider detects a
        /// failure that does not
        /// have an associated "reason" (PUT {job}/{analysisType}/reason).
        /// </summary>
        /// <param name='groupBy'>
        /// A list of grouping expressions that will control
        /// the groups of the returned list. For more information, see 'jobs'
        /// method.
        /// {M:Helix.LifeTime.Web.Controllers.Api_2017_04_14.AggregateApi_2017_04_14_Controller.JobSummary(Helix.LifeTime.Web.Shared.JobFilter,System.String[],System.Int32)}
        /// </param>
        /// <param name='maxGroups'>
        /// Maximum number of groups to return
        /// </param>
        /// <param name='maxResults'>
        /// Maximum number of results across all groups to return
        /// </param>
        /// <param name='filtercreator'>
        /// The job creator.
        /// </param>
        /// <param name='filtersource'>
        /// The job source.
        /// </param>
        /// <param name='filtertype'>
        /// The job type.
        /// </param>
        /// <param name='filterbuild'>
        /// The build number.
        /// </param>
        /// <param name='filtername'>
        /// The Name/CorrelationId number.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<InvestigationResult>> InvestigationWithHttpMessagesAsync(IList<string> groupBy, int maxGroups, int maxResults, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the status history for a given analysis over the past several
        /// builds.
        /// Using the same source and type, builds are walked backward from the
        /// current
        /// time until a number of days matching {!:days} days worth
        /// of results are found, and all status counts grouped by build are
        /// returned.
        /// </summary>
        /// <param name='source'>
        /// The 'source' of all jobs to consider
        /// </param>
        /// <param name='type'>
        /// The 'type' of all jobs to consider
        /// </param>
        /// <param name='workitem'>
        /// The name of the workitem to analyse
        /// </param>
        /// <param name='analysisType'>
        /// The type of analysis to get details for
        /// </param>
        /// <param name='analysisName'>
        /// The name of a specific item in the analysis to get details for
        /// </param>
        /// <param name='days'>
        /// Number of days of history to examine
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<HistoricalAnalysisItem>>> HistoryWithHttpMessagesAsync(string source, string type, string workitem, string analysisType, string analysisName, int days, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MultiSourceResponse>> MultiSourceWithHttpMessagesAsync(MultiSourceRequest request, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
