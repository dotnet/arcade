// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class WorkItemError
    {
        /// <summary>
        /// Initializes a new instance of the WorkItemError class.
        /// </summary>
        public WorkItemError()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkItemError class.
        /// </summary>
        /// <param name="id">Error id that was fired from Helix</param>
        /// <param name="message">Error message that was sent from
        /// helix</param>
        /// <param name="logUri">Optional. Any log uri that was provide with
        /// the error.</param>
        public WorkItemError(string id, string message, string logUri = default(string))
        {
            Id = id;
            Message = message;
            LogUri = logUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets error id that was fired from Helix
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets error message that was sent from helix
        /// </summary>
        [JsonProperty(PropertyName = "Message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets optional. Any log uri that was provide with the error.
        /// </summary>
        [JsonProperty(PropertyName = "LogUri")]
        public string LogUri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
        }
    }
}
