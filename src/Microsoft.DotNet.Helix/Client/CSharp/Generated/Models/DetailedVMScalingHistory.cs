// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DetailedVMScalingHistory
    {
        /// <summary>
        /// Initializes a new instance of the DetailedVMScalingHistory class.
        /// </summary>
        public DetailedVMScalingHistory()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DetailedVMScalingHistory class.
        /// </summary>
        /// <param name="scaleSetName">Name of the scaleSet</param>
        /// <param name="vMState">State of the scaleSet
        /// Succeeded - Scaling completed successfully.
        /// Failed - Scaling operation failed.
        /// Updating - Scaling is in progress and the VM counts are being
        /// updated according to the rules.</param>
        /// <param name="vMCount">Number of VMs that belong to the
        /// scaleSet</param>
        /// <param name="timestamp">The timestamp at which the snapshot was
        /// taken</param>
        /// <param name="queueName">Name of the queue that the scaleset is
        /// listening to.</param>
        /// <param name="messageCount">Number of active messages in the queue
        /// that the scaleset is listening to.</param>
        public DetailedVMScalingHistory(string scaleSetName, string vMState, int vMCount, System.DateTimeOffset timestamp, string queueName = default(string), int? messageCount = default(int?))
        {
            ScaleSetName = scaleSetName;
            VMState = vMState;
            VMCount = vMCount;
            QueueName = queueName;
            MessageCount = messageCount;
            Timestamp = timestamp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the scaleSet
        /// </summary>
        [JsonProperty(PropertyName = "ScaleSetName")]
        public string ScaleSetName { get; set; }

        /// <summary>
        /// Gets or sets state of the scaleSet
        /// Succeeded - Scaling completed successfully.
        /// Failed - Scaling operation failed.
        /// Updating - Scaling is in progress and the VM counts are being
        /// updated according to the rules.
        /// </summary>
        [JsonProperty(PropertyName = "VMState")]
        public string VMState { get; set; }

        /// <summary>
        /// Gets or sets number of VMs that belong to the scaleSet
        /// </summary>
        [JsonProperty(PropertyName = "VMCount")]
        public int VMCount { get; set; }

        /// <summary>
        /// Gets or sets name of the queue that the scaleset is listening to.
        /// </summary>
        [JsonProperty(PropertyName = "QueueName")]
        public string QueueName { get; set; }

        /// <summary>
        /// Gets or sets number of active messages in the queue that the
        /// scaleset is listening to.
        /// </summary>
        [JsonProperty(PropertyName = "MessageCount")]
        public int? MessageCount { get; set; }

        /// <summary>
        /// Gets or sets the timestamp at which the snapshot was taken
        /// </summary>
        [JsonProperty(PropertyName = "Timestamp")]
        public System.DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ScaleSetName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScaleSetName");
            }
            if (VMState == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VMState");
            }
        }
    }
}
