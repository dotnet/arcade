// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ContainerInformation
    {
        /// <summary>
        /// Initializes a new instance of the ContainerInformation class.
        /// </summary>
        public ContainerInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContainerInformation class.
        /// </summary>
        /// <param name="created">UTC DateTimeOffset representing when this
        /// container was created</param>
        /// <param name="expiration">UTC DateTime representing when this
        /// container may be automatedly cleaned up
        /// Cleanup is not guaranteed on the exact moment of expiration but any
        /// tool
        /// that does cleanup will use this value, and SAS tokens will no
        /// longer be granted</param>
        /// <param name="creator">User who originally created this
        /// container.</param>
        /// <param name="containerName">Name of container being used in this
        /// request.</param>
        /// <param name="storageAccountName">Name of provided storage
        /// account</param>
        /// <param name="readToken">If the user requesting this information is
        /// the same who created it, we'll provide a read-only
        /// SAS token to this storage container which expires up to a max time
        /// determined by the Expiration date.</param>
        /// <param name="writeToken">If the user requesting this information is
        /// the same who created it, we'll provide a write
        /// SAS token to this storage container which expires up to a max time
        /// determined by the expiration.</param>
        public ContainerInformation(System.DateTimeOffset created, System.DateTimeOffset expiration, string creator, string containerName, string storageAccountName, string readToken = default(string), string writeToken = default(string))
        {
            Created = created;
            Expiration = expiration;
            ReadToken = readToken;
            WriteToken = writeToken;
            Creator = creator;
            ContainerName = containerName;
            StorageAccountName = storageAccountName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets UTC DateTimeOffset representing when this container
        /// was created
        /// </summary>
        [JsonProperty(PropertyName = "Created")]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Gets or sets UTC DateTime representing when this container may be
        /// automatedly cleaned up
        /// Cleanup is not guaranteed on the exact moment of expiration but any
        /// tool
        /// that does cleanup will use this value, and SAS tokens will no
        /// longer be granted
        /// </summary>
        [JsonProperty(PropertyName = "Expiration")]
        public System.DateTimeOffset Expiration { get; set; }

        /// <summary>
        /// Gets or sets if the user requesting this information is the same
        /// who created it, we'll provide a read-only
        /// SAS token to this storage container which expires up to a max time
        /// determined by the Expiration date.
        /// </summary>
        [JsonProperty(PropertyName = "ReadToken")]
        public string ReadToken { get; set; }

        /// <summary>
        /// Gets or sets if the user requesting this information is the same
        /// who created it, we'll provide a write
        /// SAS token to this storage container which expires up to a max time
        /// determined by the expiration.
        /// </summary>
        [JsonProperty(PropertyName = "WriteToken")]
        public string WriteToken { get; set; }

        /// <summary>
        /// Gets or sets user who originally created this container.
        /// </summary>
        [JsonProperty(PropertyName = "Creator")]
        public string Creator { get; set; }

        /// <summary>
        /// Gets or sets name of container being used in this request.
        /// </summary>
        [JsonProperty(PropertyName = "ContainerName")]
        public string ContainerName { get; set; }

        /// <summary>
        /// Gets or sets name of provided storage account
        /// </summary>
        [JsonProperty(PropertyName = "StorageAccountName")]
        public string StorageAccountName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Creator == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Creator");
            }
            if (ContainerName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContainerName");
            }
            if (StorageAccountName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageAccountName");
            }
        }
    }
}
