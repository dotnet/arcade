// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AggregateWorkItemSummary
    {
        /// <summary>
        /// Initializes a new instance of the AggregateWorkItemSummary class.
        /// </summary>
        public AggregateWorkItemSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AggregateWorkItemSummary class.
        /// </summary>
        public AggregateWorkItemSummary(IList<WorkItemAggregateSummary> workItems, IList<KeyedData> analyses)
        {
            WorkItems = workItems;
            Analyses = analyses;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "WorkItems")]
        public IList<WorkItemAggregateSummary> WorkItems { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Analyses")]
        public IList<KeyedData> Analyses { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WorkItems == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WorkItems");
            }
            if (Analyses == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Analyses");
            }
            if (Analyses != null)
            {
                foreach (var element in Analyses)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
