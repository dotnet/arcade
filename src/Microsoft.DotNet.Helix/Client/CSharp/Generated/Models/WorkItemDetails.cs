// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class WorkItemDetails
    {
        /// <summary>
        /// Initializes a new instance of the WorkItemDetails class.
        /// </summary>
        public WorkItemDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkItemDetails class.
        /// </summary>
        /// <param name="id">Internal helix ID value (usually a GUID)</param>
        /// <param name="machineName">Machine this job is/was running on. Not
        /// set if item has not started</param>
        /// <param name="job">Job name for this work item</param>
        /// <param name="name">Work item name that was uploaded when the job
        /// was started</param>
        /// <param name="state">Current state of the workitem. Options are:
        /// Unscheduled - Work item has not been scheduled to a queue yet.
        /// Waiting - Item has been queued, but is not yet running.
        /// Running- Work item is currently running on a Helix machine.
        /// Finished - Item is complete and results are recorded.
        /// Passed - Item is complete and all analyses report no failures.
        /// Failed - The item is completed, and failed to execute successfully;
        /// this includes an analysis determining failure (failed XUnit tests)
        /// or non-zero exit code.</param>
        /// <param name="exitCode">Exit code from work item. Only set once in
        /// the Finished state</param>
        /// <param name="consoleOutputUri">Uri to any console output generated
        /// by the work item</param>
        /// <param name="errors">List of any errors that were generated and
        /// reported to Helix during this work item</param>
        /// <param name="warnings">List of any warnings that were generated and
        /// reported to Helix during this work item</param>
        /// <param name="logs">List of all logs generated and uploaded from
        /// this work item</param>
        /// <param name="analysis">Analysis as provided by analysis plug-ins.
        /// For information about specific analysis, see
        /// individual documentation.</param>
        /// <param name="otherEvents">Any unrecognized events that were
        /// reported to Helix related to this work item.</param>
        public WorkItemDetails(string id, string machineName, string job, string name, string state, FailureReason failureReason = default(FailureReason), int? exitCode = default(int?), string consoleOutputUri = default(string), IList<WorkItemError> errors = default(IList<WorkItemError>), IList<WorkItemError> warnings = default(IList<WorkItemError>), IList<WorkItemLog> logs = default(IList<WorkItemLog>), AnalysisReport analysis = default(AnalysisReport), IList<object> otherEvents = default(IList<object>))
        {
            FailureReason = failureReason;
            Id = id;
            MachineName = machineName;
            ExitCode = exitCode;
            ConsoleOutputUri = consoleOutputUri;
            Errors = errors;
            Warnings = warnings;
            Logs = logs;
            Analysis = analysis;
            OtherEvents = otherEvents;
            Job = job;
            Name = name;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FailureReason")]
        public FailureReason FailureReason { get; set; }

        /// <summary>
        /// Gets or sets internal helix ID value (usually a GUID)
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets machine this job is/was running on. Not set if item
        /// has not started
        /// </summary>
        [JsonProperty(PropertyName = "MachineName")]
        public string MachineName { get; set; }

        /// <summary>
        /// Gets or sets exit code from work item. Only set once in the
        /// Finished state
        /// </summary>
        [JsonProperty(PropertyName = "ExitCode")]
        public int? ExitCode { get; set; }

        /// <summary>
        /// Gets or sets uri to any console output generated by the work item
        /// </summary>
        [JsonProperty(PropertyName = "ConsoleOutputUri")]
        public string ConsoleOutputUri { get; set; }

        /// <summary>
        /// Gets or sets list of any errors that were generated and reported to
        /// Helix during this work item
        /// </summary>
        [JsonProperty(PropertyName = "Errors")]
        public IList<WorkItemError> Errors { get; set; }

        /// <summary>
        /// Gets or sets list of any warnings that were generated and reported
        /// to Helix during this work item
        /// </summary>
        [JsonProperty(PropertyName = "Warnings")]
        public IList<WorkItemError> Warnings { get; set; }

        /// <summary>
        /// Gets or sets list of all logs generated and uploaded from this work
        /// item
        /// </summary>
        [JsonProperty(PropertyName = "Logs")]
        public IList<WorkItemLog> Logs { get; set; }

        /// <summary>
        /// Gets or sets analysis as provided by analysis plug-ins. For
        /// information about specific analysis, see
        /// individual documentation.
        /// </summary>
        [JsonProperty(PropertyName = "Analysis")]
        public AnalysisReport Analysis { get; set; }

        /// <summary>
        /// Gets or sets any unrecognized events that were reported to Helix
        /// related to this work item.
        /// </summary>
        [JsonProperty(PropertyName = "OtherEvents")]
        public IList<object> OtherEvents { get; set; }

        /// <summary>
        /// Gets or sets job name for this work item
        /// </summary>
        [JsonProperty(PropertyName = "Job")]
        public string Job { get; set; }

        /// <summary>
        /// Gets or sets work item name that was uploaded when the job was
        /// started
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets current state of the workitem. Options are:
        /// Unscheduled - Work item has not been scheduled to a queue yet.
        /// Waiting - Item has been queued, but is not yet running.
        /// Running- Work item is currently running on a Helix machine.
        /// Finished - Item is complete and results are recorded.
        /// Passed - Item is complete and all analyses report no failures.
        /// Failed - The item is completed, and failed to execute successfully;
        /// this includes an analysis determining failure (failed XUnit tests)
        /// or non-zero exit code.
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (MachineName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MachineName");
            }
            if (Job == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Job");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (State == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "State");
            }
            if (Errors != null)
            {
                foreach (var element in Errors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Warnings != null)
            {
                foreach (var element1 in Warnings)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Logs != null)
            {
                foreach (var element2 in Logs)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
