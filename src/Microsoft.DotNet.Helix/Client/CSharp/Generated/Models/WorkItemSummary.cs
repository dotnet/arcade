// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class WorkItemSummary
    {
        /// <summary>
        /// Initializes a new instance of the WorkItemSummary class.
        /// </summary>
        public WorkItemSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkItemSummary class.
        /// </summary>
        /// <param name="detailsUrl">Uri to the details for the current work
        /// item</param>
        /// <param name="job">Job name for this work item</param>
        /// <param name="name">Work item name that was uploaded when the job
        /// was started</param>
        /// <param name="state">Current state of the workitem. Options are:
        /// Unscheduled - Work item has not been scheduled to a queue yet.
        /// Waiting - Item has been queued, but is not yet running.
        /// Running- Work item is currently running on a Helix machine.
        /// Finished - Item is complete and results are recorded.
        /// Passed - Item is complete and all analyses report no failures.
        /// Failed - The item is completed, and failed to execute successfully;
        /// this includes an analysis determining failure (failed XUnit tests)
        /// or non-zero exit code.</param>
        public WorkItemSummary(string detailsUrl, string job, string name, string state)
        {
            DetailsUrl = detailsUrl;
            Job = job;
            Name = name;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets uri to the details for the current work item
        /// </summary>
        [JsonProperty(PropertyName = "DetailsUrl")]
        public string DetailsUrl { get; set; }

        /// <summary>
        /// Gets or sets job name for this work item
        /// </summary>
        [JsonProperty(PropertyName = "Job")]
        public string Job { get; set; }

        /// <summary>
        /// Gets or sets work item name that was uploaded when the job was
        /// started
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets current state of the workitem. Options are:
        /// Unscheduled - Work item has not been scheduled to a queue yet.
        /// Waiting - Item has been queued, but is not yet running.
        /// Running- Work item is currently running on a Helix machine.
        /// Finished - Item is complete and results are recorded.
        /// Passed - Item is complete and all analyses report no failures.
        /// Failed - The item is completed, and failed to execute successfully;
        /// this includes an analysis determining failure (failed XUnit tests)
        /// or non-zero exit code.
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DetailsUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DetailsUrl");
            }
            if (Job == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Job");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (State == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "State");
            }
        }
    }
}
