// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class JobCreationResult
    {
        /// <summary>
        /// Initializes a new instance of the JobCreationResult class.
        /// </summary>
        public JobCreationResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobCreationResult class.
        /// </summary>
        /// <param name="name">Name of the job that was created</param>
        /// <param name="summaryUrl">Url to navigate to get summary information
        /// about the current job</param>
        /// <param name="waitUrl">Url to call to long poll for job
        /// completion</param>
        public JobCreationResult(string name, string summaryUrl, string waitUrl)
        {
            Name = name;
            SummaryUrl = summaryUrl;
            WaitUrl = waitUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the job that was created
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets url to navigate to get summary information about the
        /// current job
        /// </summary>
        [JsonProperty(PropertyName = "SummaryUrl")]
        public string SummaryUrl { get; set; }

        /// <summary>
        /// Gets or sets url to call to long poll for job completion
        /// </summary>
        [JsonProperty(PropertyName = "WaitUrl")]
        public string WaitUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (SummaryUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SummaryUrl");
            }
            if (WaitUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WaitUrl");
            }
        }
    }
}
