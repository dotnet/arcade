// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class InvestigationAnalysis
    {
        /// <summary>
        /// Initializes a new instance of the InvestigationAnalysis class.
        /// </summary>
        public InvestigationAnalysis()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InvestigationAnalysis class.
        /// </summary>
        public InvestigationAnalysis(string job, string workItem, string name, object analysis)
        {
            Job = job;
            WorkItem = workItem;
            Name = name;
            Analysis = analysis;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Job")]
        public string Job { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "WorkItem")]
        public string WorkItem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Analysis")]
        public object Analysis { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Job == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Job");
            }
            if (WorkItem == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WorkItem");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Analysis == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Analysis");
            }
        }
    }
}
