// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class JobCreationRequest
    {
        /// <summary>
        /// Initializes a new instance of the JobCreationRequest class.
        /// </summary>
        public JobCreationRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobCreationRequest class.
        /// </summary>
        /// <param name="source">Source of the code being sent through the job,
        /// prefixed with either
        /// 'automated', 'official', or 'pr'. e.g. 'pr/corefx/master'</param>
        /// <param name="type">Type of the build, e.g.
        /// 'test/functional/uwp'</param>
        /// <param name="build">Build number. Must be in the format
        /// XXXXX.YY</param>
        /// <param name="properties">Custom properties for the job</param>
        /// <param name="listUri">Uri to internet accessible JSON object
        /// describing workitem operations</param>
        /// <param name="queueId">Queue id that identifies which Helix queue to
        /// run this job on</param>
        /// <param name="resultsUri">Azure blob storage URI prefix for any
        /// results uploaded from all workitems.</param>
        /// <param name="resultsUriRSAS">Read-only SAS token for
        /// ResultsUri</param>
        /// <param name="resultsUriWSAS">Read/Write SAS token for
        /// ResultsUri</param>
        /// <param name="creator">Original creator of the job (only allowed for
        /// non-authenticated jobs)</param>
        /// <param name="pullRequestId">ID of the pull request this is
        /// associated with</param>
        /// <param name="maxRetryCount">MaxRetryCount for Auto-Retry, eg:
        /// MaxRetryCount = 1 means at least 1 retry apart from the original
        /// run</param>
        /// <param name="attempt">Identifier for a given attempt. Must be
        /// lexically sortable.</param>
        /// <param name="jobStartIdentifier">Unique string sent with job; if
        /// included, users can safely re-post jobs
        /// supplying the same value, and the API will indicate success if the
        /// job was successfully enqueued once.</param>
        public JobCreationRequest(string source, string type, string build, IDictionary<string, string> properties, string listUri, string queueId, string resultsUri, string resultsUriRSAS, string resultsUriWSAS, string creator = default(string), string pullRequestId = default(string), int? maxRetryCount = default(int?), string attempt = default(string), string jobStartIdentifier = default(string))
        {
            Source = source;
            Type = type;
            Build = build;
            Properties = properties;
            ListUri = listUri;
            QueueId = queueId;
            ResultsUri = resultsUri;
            ResultsUriRSAS = resultsUriRSAS;
            ResultsUriWSAS = resultsUriWSAS;
            Creator = creator;
            PullRequestId = pullRequestId;
            MaxRetryCount = maxRetryCount;
            Attempt = attempt;
            JobStartIdentifier = jobStartIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets source of the code being sent through the job,
        /// prefixed with either
        /// 'automated', 'official', or 'pr'. e.g. 'pr/corefx/master'
        /// </summary>
        [JsonProperty(PropertyName = "Source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets type of the build, e.g. 'test/functional/uwp'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets build number. Must be in the format XXXXX.YY
        /// </summary>
        [JsonProperty(PropertyName = "Build")]
        public string Build { get; set; }

        /// <summary>
        /// Gets or sets custom properties for the job
        /// </summary>
        [JsonProperty(PropertyName = "Properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets uri to internet accessible JSON object describing
        /// workitem operations
        /// </summary>
        [JsonProperty(PropertyName = "ListUri")]
        public string ListUri { get; set; }

        /// <summary>
        /// Gets or sets queue id that identifies which Helix queue to run this
        /// job on
        /// </summary>
        [JsonProperty(PropertyName = "QueueId")]
        public string QueueId { get; set; }

        /// <summary>
        /// Gets or sets azure blob storage URI prefix for any results uploaded
        /// from all workitems.
        /// </summary>
        [JsonProperty(PropertyName = "ResultsUri")]
        public string ResultsUri { get; set; }

        /// <summary>
        /// Gets or sets read-only SAS token for ResultsUri
        /// </summary>
        [JsonProperty(PropertyName = "ResultsUriRSAS")]
        public string ResultsUriRSAS { get; set; }

        /// <summary>
        /// Gets or sets read/Write SAS token for ResultsUri
        /// </summary>
        [JsonProperty(PropertyName = "ResultsUriWSAS")]
        public string ResultsUriWSAS { get; set; }

        /// <summary>
        /// Gets or sets original creator of the job (only allowed for
        /// non-authenticated jobs)
        /// </summary>
        [JsonProperty(PropertyName = "Creator")]
        public string Creator { get; set; }

        /// <summary>
        /// Gets or sets ID of the pull request this is associated with
        /// </summary>
        [JsonProperty(PropertyName = "PullRequestId")]
        public string PullRequestId { get; set; }

        /// <summary>
        /// Gets or sets maxRetryCount for Auto-Retry, eg: MaxRetryCount = 1
        /// means at least 1 retry apart from the original run
        /// </summary>
        [JsonProperty(PropertyName = "MaxRetryCount")]
        public int? MaxRetryCount { get; set; }

        /// <summary>
        /// Gets or sets identifier for a given attempt. Must be lexically
        /// sortable.
        /// </summary>
        [JsonProperty(PropertyName = "Attempt")]
        public string Attempt { get; set; }

        /// <summary>
        /// Gets or sets unique string sent with job; if included, users can
        /// safely re-post jobs
        /// supplying the same value, and the API will indicate success if the
        /// job was successfully enqueued once.
        /// </summary>
        [JsonProperty(PropertyName = "JobStartIdentifier")]
        public string JobStartIdentifier { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Build == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Build");
            }
            if (Properties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Properties");
            }
            if (ListUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ListUri");
            }
            if (QueueId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "QueueId");
            }
            if (ResultsUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResultsUri");
            }
            if (ResultsUriRSAS == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResultsUriRSAS");
            }
            if (ResultsUriWSAS == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResultsUriWSAS");
            }
        }
    }
}
