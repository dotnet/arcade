// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class JobInfo
    {
        /// <summary>
        /// Initializes a new instance of the JobInfo class.
        /// </summary>
        public JobInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobInfo class.
        /// </summary>
        /// <param name="queueId">The Helix QueueId the job was "sent"
        /// to</param>
        /// <param name="source">The Source for this job</param>
        /// <param name="type">The Type for this job</param>
        /// <param name="build">The Build for this job</param>
        /// <param name="attempt">The Attempt for this job</param>
        /// <param name="properties">The Collection of Properties for this
        /// job</param>
        /// <param name="initialWorkItemCount">The Count of work items expected
        /// in this job</param>
        public JobInfo(string queueId, string source, string type, string build, string attempt = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>), int? initialWorkItemCount = default(int?))
        {
            QueueId = queueId;
            Source = source;
            Type = type;
            Build = build;
            Attempt = attempt;
            Properties = properties;
            InitialWorkItemCount = initialWorkItemCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Helix QueueId the job was "sent" to
        /// </summary>
        [JsonProperty(PropertyName = "QueueId")]
        public string QueueId { get; set; }

        /// <summary>
        /// Gets or sets the Source for this job
        /// </summary>
        [JsonProperty(PropertyName = "Source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the Type for this job
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the Build for this job
        /// </summary>
        [JsonProperty(PropertyName = "Build")]
        public string Build { get; set; }

        /// <summary>
        /// Gets or sets the Attempt for this job
        /// </summary>
        [JsonProperty(PropertyName = "Attempt")]
        public string Attempt { get; set; }

        /// <summary>
        /// Gets or sets the Collection of Properties for this job
        /// </summary>
        [JsonProperty(PropertyName = "Properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets the Count of work items expected in this job
        /// </summary>
        [JsonProperty(PropertyName = "InitialWorkItemCount")]
        public int? InitialWorkItemCount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (QueueId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "QueueId");
            }
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Build == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Build");
            }
        }
    }
}
