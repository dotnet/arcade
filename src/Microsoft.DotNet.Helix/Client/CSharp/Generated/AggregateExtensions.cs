// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Helix.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Aggregate.
    /// </summary>
    public static partial class AggregateExtensions
    {
            /// <summary>
            /// Get an aggregation of all workitem analyses for a specific workitem in the
            /// job set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workitem'>
            /// The workitem name to retrieve analyses for.
            /// </param>
            /// <param name='groupBy'>
            /// A list of grouping expressions that will control
            /// the groups of the returned list. For more information, see 'jobs' method.
            /// {!:JobSummary(JobFilter,string[],int)}
            /// </param>
            /// <param name='otherProperties'>
            /// A list of other job properties to return.
            /// </param>
            /// <param name='filtercreator'>
            /// The job creator.
            /// </param>
            /// <param name='filtersource'>
            /// The job source.
            /// </param>
            /// <param name='filtertype'>
            /// The job type.
            /// </param>
            /// <param name='filterbuild'>
            /// The build number.
            /// </param>
            /// <param name='filtername'>
            /// The Name/CorrelationId number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AggregateWorkItemSummary> AnalysisSummaryAsync(this IAggregate operations, string workitem, IList<string> groupBy, IList<string> otherProperties, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AnalysisSummaryWithHttpMessagesAsync(workitem, groupBy, otherProperties, filtercreator, filtersource, filtertype, filterbuild, filtername, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the build history for the past 30 days from the specified source and
            /// type pair(s)
            /// </summary>
            /// <remarks>
            /// The source(s) and type(s) must come in pairs
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='source'>
            /// The sources to get build history for
            /// </param>
            /// <param name='type'>
            /// The types to get build history for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BuildHistoryItem>> BuildHistoryAsync(this IAggregate operations, IList<string> source, IList<string> type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BuildHistoryWithHttpMessagesAsync(source, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the information for the specified build.
            /// </summary>
            /// <remarks>
            /// The source(s) and type(s) must come in pairs
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sources'>
            /// The sources for the build
            /// </param>
            /// <param name='types'>
            /// The types for the build
            /// </param>
            /// <param name='buildNumber'>
            /// The build number
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BuildAggregation> BuildAsync(this IAggregate operations, IList<string> sources, IList<string> types, string buildNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BuildWithHttpMessagesAsync(sources, types, buildNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a summary of all the latest jobs that match the given filter.
            /// Aggregation will include a passed/running/failed status for the aggregation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupBy'>
            /// A list of grouping expressions that will control
            /// the groups of the returned list. All jobs that have the same values for
            /// all provided group parameters will be aggregated into a single entry.
            /// Valid values for the values are : 'job.build'; 'job.properties.*", where *
            /// is any property sent with the job
            /// in the "Properties" value.
            /// </param>
            /// <param name='maxResultSets'>
            /// The maximum number of the first grouping parameter
            /// to return. For example, if your groups were ['job.build',
            /// 'job.properties.config'],
            /// passing 6 will limit the return value to the first 6 builds. Additional
            /// group arguments are not limited.
            /// </param>
            /// <param name='filtercreator'>
            /// The job creator.
            /// </param>
            /// <param name='filtersource'>
            /// The job source.
            /// </param>
            /// <param name='filtertype'>
            /// The job type.
            /// </param>
            /// <param name='filterbuild'>
            /// The build number.
            /// </param>
            /// <param name='filtername'>
            /// The Name/CorrelationId number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AggregatedWorkItemCounts>> JobSummaryMethodAsync(this IAggregate operations, IList<string> groupBy, int maxResultSets, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.JobSummaryMethodWithHttpMessagesAsync(groupBy, maxResultSets, filtercreator, filtersource, filtertype, filterbuild, filtername, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an aggregation of unique workitems in a job set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupBy'>
            /// A list of grouping expressions that will control
            /// the groups of the returned list. For more information, see 'jobs' method.
            /// {M:Helix.LifeTime.Web.Controllers.Api_2017_04_14.AggregateApi_2017_04_14_Controller.JobSummary(Helix.LifeTime.Web.Shared.JobFilter,System.String[],System.Int32)}
            /// </param>
            /// <param name='filtercreator'>
            /// The job creator.
            /// </param>
            /// <param name='filtersource'>
            /// The job source.
            /// </param>
            /// <param name='filtertype'>
            /// The job type.
            /// </param>
            /// <param name='filterbuild'>
            /// The build number.
            /// </param>
            /// <param name='filtername'>
            /// The Name/CorrelationId number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AggregatedWorkItemCounts>> WorkItemSummaryMethodAsync(this IAggregate operations, IList<string> groupBy, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.WorkItemSummaryMethodWithHttpMessagesAsync(groupBy, filtercreator, filtersource, filtertype, filterbuild, filtername, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='source'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='build'>
            /// </param>
            /// <param name='workitem'>
            /// </param>
            /// <param name='analysisType'>
            /// </param>
            /// <param name='analysisName'>
            /// </param>
            /// <param name='groupBy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AggregateAnalysisDetail>> AnalysisDetailAsync(this IAggregate operations, string source, string type, string build, string workitem, string analysisType, string analysisName, IList<string> groupBy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AnalysisDetailWithHttpMessagesAsync(source, type, build, workitem, analysisType, analysisName, groupBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the properties for a build. This will return any properties that are
            /// common
            /// among all jobs in a given build. If a job doesn't have a particular
            /// property,
            /// that property will still be returned if it is not different among jobs that
            /// have it.
            ///
            /// For example, if all your build jobs have a "sourceVersion" property
            /// referencing the
            /// hash used in the build, that property would be returned.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filtercreator'>
            /// The job creator.
            /// </param>
            /// <param name='filtersource'>
            /// The job source.
            /// </param>
            /// <param name='filtertype'>
            /// The job type.
            /// </param>
            /// <param name='filterbuild'>
            /// The build number.
            /// </param>
            /// <param name='filtername'>
            /// The Name/CorrelationId number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> PropertiesAsync(this IAggregate operations, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PropertiesWithHttpMessagesAsync(filtercreator, filtersource, filtertype, filterbuild, filtername, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Continue a previous call to 'investigation'. See the GET 'investigation'
            /// API for more details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The token from a previous call to 'investigation'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InvestigationResult> ContinueOperationAsync(this IAggregate operations, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ContinueOperationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Begin an investigation query. This call may not return all results
            /// immediately.
            /// If the "Token" value of the response is set, future calls to
            /// investigation/continue will
            /// be required to get further data.
            /// Something requires "investigation" at least on provider detects a failure
            /// that does not
            /// have an associated "reason" (PUT {job}/{analysisType}/reason).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupBy'>
            /// A list of grouping expressions that will control
            /// the groups of the returned list. For more information, see 'jobs' method.
            /// {M:Helix.LifeTime.Web.Controllers.Api_2017_04_14.AggregateApi_2017_04_14_Controller.JobSummary(Helix.LifeTime.Web.Shared.JobFilter,System.String[],System.Int32)}
            /// </param>
            /// <param name='maxGroups'>
            /// Maximum number of groups to return
            /// </param>
            /// <param name='maxResults'>
            /// Maximum number of results across all groups to return
            /// </param>
            /// <param name='filtercreator'>
            /// The job creator.
            /// </param>
            /// <param name='filtersource'>
            /// The job source.
            /// </param>
            /// <param name='filtertype'>
            /// The job type.
            /// </param>
            /// <param name='filterbuild'>
            /// The build number.
            /// </param>
            /// <param name='filtername'>
            /// The Name/CorrelationId number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InvestigationResult> InvestigationAsync(this IAggregate operations, IList<string> groupBy, int maxGroups, int maxResults, string filtercreator = default(string), string filtersource = default(string), string filtertype = default(string), string filterbuild = default(string), string filtername = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.InvestigationWithHttpMessagesAsync(groupBy, maxGroups, maxResults, filtercreator, filtersource, filtertype, filterbuild, filtername, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the status history for a given analysis over the past several builds.
            /// Using the same source and type, builds are walked backward from the current
            /// time until a number of days matching {!:days} days worth
            /// of results are found, and all status counts grouped by build are returned.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='source'>
            /// The 'source' of all jobs to consider
            /// </param>
            /// <param name='type'>
            /// The 'type' of all jobs to consider
            /// </param>
            /// <param name='workitem'>
            /// The name of the workitem to analyse
            /// </param>
            /// <param name='analysisType'>
            /// The type of analysis to get details for
            /// </param>
            /// <param name='analysisName'>
            /// The name of a specific item in the analysis to get details for
            /// </param>
            /// <param name='days'>
            /// Number of days of history to examine
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HistoricalAnalysisItem>> HistoryAsync(this IAggregate operations, string source, string type, string workitem, string analysisType, string analysisName, int days, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.HistoryWithHttpMessagesAsync(source, type, workitem, analysisType, analysisName, days, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MultiSourceResponse> MultiSourceAsync(this IAggregate operations, MultiSourceRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.MultiSourceWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
