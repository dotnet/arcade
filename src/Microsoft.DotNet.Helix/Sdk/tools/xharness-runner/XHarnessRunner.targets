<Project>

  <PropertyGroup Condition=" '$(IncludeXHarnessCli)' == 'true' ">
    <!-- We then invoke the CLI DLL directly using .NET runtime without the need for .NET SDK -->
    <IncludeDotNetCli>true</IncludeDotNetCli>
    <IncludeXHarnessCli>true</IncludeXHarnessCli>
    <DotNetCliPackageType Condition="'$(DotNetCliPackageType)' != 'sdk'">aspnetcore-runtime</DotNetCliPackageType>
    <DotNetCliVersion Condition="'$(DotNetCliVersion)' == ''">3.1.5</DotNetCliVersion>
  </PropertyGroup>

  <Target Name="AddXHarnessCli"
          Condition=" '$(IncludeXHarnessCli)' == 'true' "
          BeforeTargets="CoreTest"
          AfterTargets="AddDotNetSdk">

    <Error Condition=" '$(_XHarnessPackageVersion)' == '' " Text="XHarness CLI version not defined! Please specify it using the MicrosoftDotNetXHarnessCLIVersion property" />

    <!-- When XHarnessNupkgPath is set, we send the .nupkg with the job and install the tool from there -->
    <Message Condition=" '$(XHarnessNupkgPath)' != '' " Text="XHarnessNupkgPath is set so XHarnessPackageSource will be ignored" Importance="normal" />

    <PropertyGroup Condition=" '$(XHarnessNupkgPath)' != '' ">
      <XHarnessPackageSource>$([System.IO.Path]::GetDirectoryName($(XHarnessNupkgPath))) --no-cache</XHarnessPackageSource>
    </PropertyGroup>

    <!-- We install the tool locally on the build machine, then, installed as-is, we zip it up and send as a correlation payload -->
    <PropertyGroup>
      <_XHarnessLocalToolPath>$(ArtifactsTmpDir)Microsoft.DotNet.XHarness.CLI</_XHarnessLocalToolPath>
      <_XHarnessCliPath>$(_XHarnessLocalToolPath)\.store\microsoft.dotnet.xharness.cli\$(_XHarnessPackageVersion)\microsoft.dotnet.xharness.cli\$(_XHarnessPackageVersion)</_XHarnessCliPath>
    </PropertyGroup>

    <!-- It can happen that the SDK is invoked in parallel and then it can fail when re-using the install location, so we ignore the exit code -->
    <Exec Command="dotnet tool install --tool-path $(_XHarnessLocalToolPath) --version $(_XHarnessPackageVersion) --add-source $(XHarnessPackageSource) $(_XHarnessPackageName)"
          WorkingDirectory="$(ArtifactsTmpDir)"
          IgnoreExitCode="true" />

    <!-- There are files we don't need extracted inside of the extracted tool dir (such as the original .nupkg) that blow up the size 3x, so we remove them -->
    <ItemGroup>
      <_XHarnessExtraToolFiles Include="$(_XHarnessCliPath)\*.*" />
    </ItemGroup>
    <Delete Files="@(_XHarnessExtraToolFiles)" />

    <ItemGroup>
      <HelixCorrelationPayload Include="$(_XHarnessCliPath)">
        <Destination>microsoft.dotnet.xharness.cli</Destination>
        <IncludeDirectoryName>true</IncludeDirectoryName>
      </HelixCorrelationPayload>
    </ItemGroup>

    <!-- When using a dotnet 'tool' that is not installed globally, we must set DOTNET_ROOT.
         This is because a framework dependent dotnet tool only searches in program files folders for runtimes.
         When .NET is not already installed there, we set DOTNET_ROOT to help it find the right one. -->
    <PropertyGroup Condition="$(IsPosixShell)">
      <HelixPreCommands>$(HelixPreCommands);export PATH=$HELIX_CORRELATION_PAYLOAD/xharness-cli:$PATH</HelixPreCommands>
      <HelixPreCommands>$(HelixPreCommands);export XHARNESS_DISABLE_COLORED_OUTPUT=true</HelixPreCommands>
      <HelixPreCommands>$(HelixPreCommands);export XHARNESS_LOG_WITH_TIMESTAMPS=true</HelixPreCommands>
      <HelixPreCommands>$(HelixPreCommands);export XHARNESS_CLI_PATH=$HELIX_CORRELATION_PAYLOAD/microsoft.dotnet.xharness.cli/$(_XHarnessPackageVersion)/tools/netcoreapp3.1/any/Microsoft.DotNet.XHarness.CLI.dll</HelixPreCommands>
    </PropertyGroup>

    <PropertyGroup Condition="!$(IsPosixShell)">
      <HelixPreCommands>$(HelixPreCommands);set PATH=%HELIX_CORRELATION_PAYLOAD%\xharness-cli%3B%PATH%</HelixPreCommands>
      <HelixPreCommands>$(HelixPreCommands);set XHARNESS_DISABLE_COLORED_OUTPUT=true</HelixPreCommands>
      <HelixPreCommands>$(HelixPreCommands);set XHARNESS_LOG_WITH_TIMESTAMPS=true</HelixPreCommands>
      <HelixPreCommands>$(HelixPreCommands);set XHARNESS_CLI_PATH=%HELIX_CORRELATION_PAYLOAD%\microsoft.dotnet.xharness.cli\$(_XHarnessPackageVersion)\tools\netcoreapp3.1\any\Microsoft.DotNet.XHarness.CLI.dll</HelixPreCommands>
    </PropertyGroup>
  </Target>

  <Target Name="BuildXHarnessAndroidProjects"
          Condition=" '@(XHarnessAndroidProject)' != '' "
          BeforeTargets="CoreBuild"
          Outputs="%(XHarnessAndroidProject.Identity)%(XHarnessAndroidProject.AdditionalProperties)">
    <PropertyGroup>
      <_CurrentXHarnessAndroidProject>%(XHarnessAndroidProject.Identity)</_CurrentXHarnessAndroidProject>
      <_CurrentAdditionalProperties>%(XHarnessAndroidProject.AdditionalProperties)</_CurrentAdditionalProperties>
    </PropertyGroup>
    <MSBuild Projects="$(_CurrentXHarnessAndroidProject)" Targets="Build" Properties="$(_CurrentAdditionalProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="XHarnessApkToTest" />
    </MSBuild>
  </Target>

  <Target Name="BuildXHarnessAppleProjects"
          Condition=" '@(XHarnessAppleProject)' != '' "
          BeforeTargets="CoreBuild"
          Outputs="%(XHarnessAppleProject.Identity)%(XHarnessAppleProject.AdditionalProperties)">
    <PropertyGroup>
      <_CurrentXHarnessAppleProject>%(XHarnessAppleProject.Identity)</_CurrentXHarnessAppleProject>
      <_CurrentAdditionalProperties>%(XHarnessAppleProject.AdditionalProperties)</_CurrentAdditionalProperties>
    </PropertyGroup>
    <MSBuild Projects="$(_CurrentXHarnessAppleProject)" Targets="Build" Properties="$(_CurrentAdditionalProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="XHarnessAppBundleToTest" />
    </MSBuild>
  </Target>

  <Target Name="CreateAndroidWorkItems"
          Condition=" '@(XHarnessApkToTest)' != '' "
          BeforeTargets="CoreTest">
    <CreateXHarnessAndroidWorkItems Apks="@(XHarnessApkToTest)"
                                    IsPosixShell="$(IsPosixShell)">
      <Output TaskParameter="WorkItems" ItemName="HelixWorkItem"/>
    </CreateXHarnessAndroidWorkItems>
  </Target>

  <Target Name="CreateAppleWorkItems"
          Condition=" '@(XHarnessAppBundleToTest)' != '' "
          BeforeTargets="CoreTest">
    <DownloadFile SourceUrl="$(XHarnessAppleProvisioningProfileUrl)"
                  Condition=" '$(XHarnessAppleProvisioningProfileUrl)' != '' "
                  DestinationFolder="$(ArtifactsTmpDir)"
                  SkipUnchangedFiles="True"
                  Retries="5">
      <Output TaskParameter="DownloadedFile" ItemName="_XHarnessProvisioningProfile" />
    </DownloadFile>

    <CreateXHarnessAppleWorkItems AppBundles="@(XHarnessAppBundleToTest)"
                                  IsPosixShell="$(IsPosixShell)"
                                  XcodeVersion="$(XHarnessXcodeVersion)"
                                  ProvisioningProfilePath="@(_XHarnessProvisioningProfile)">
      <Output TaskParameter="WorkItems" ItemName="HelixWorkItem"/>
    </CreateXHarnessAppleWorkItems>
  </Target>

</Project>
