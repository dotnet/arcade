<?xml version="1.0" encoding="utf-8"?>
<Project>
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      Set by Microsoft.Common.targets, some targets must be removed while others are left as standard extension mechanisms.
    -->
    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      PostBuildEvent
    </CoreBuildDependsOn>

    <PrepareForBuildDependsOn></PrepareForBuildDependsOn>

    <ResolveReferencesDependsOn>
      BeforeResolveReferences;
      AssignProjectConfiguration;
      ResolveProjectReferences;
      FindInvalidProjectReferences;
      AfterResolveReferences
    </ResolveReferencesDependsOn>

    <TestDependsOn>
      Build
    </TestDependsOn>

    <CleanDependsOn>
      BeforeClean;
      UnmanagedUnregistration;
      CoreClean;
      PrepareProjectReferences;
      CleanPublishFolder;
      AfterClean
    </CleanDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <EnableXUnitReporter Condition=" '$(EnableXUnitReporter)' != 'true' ">false</EnableXUnitReporter>

    <IncludeDotNetCli Condition=" '$(IncludeDotNetCli)' != 'true' ">false</IncludeDotNetCli>
    <DotNetCliPackageType Condition=" '$(DotNetCliPackageType)' == '' ">runtime</DotNetCliPackageType>
    <DotNetCliVersion Condition=" '$(DotNetCliVersion)' == '' AND '$(DotNetCliPackageType)' == 'runtime' ">2.1.5</DotNetCliVersion>
    <DotNetCliVersion Condition=" '$(DotNetCliVersion)' == '' AND '$(DotNetCliPackageType)' == 'sdk' ">2.1.403</DotNetCliVersion>
  </PropertyGroup>

  <Choose>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('windows'))">
      <PropertyGroup>
        <IsPosixShell>false</IsPosixShell>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <IsPosixShell>true</IsPosixShell>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!--
    Select DotNetCliRuntime based on TargetQueue if it isn't set
    TODO: Use the Helix Queue Info api to determine this information
  -->
  <Choose>
    <When Condition=" '$(DotNetCliRuntime)' != '' ">
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().StartsWith('windows'))">
      <PropertyGroup>
        <DotNetCliRuntime>win-x64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().StartsWith('osx'))">
      <PropertyGroup>
        <DotNetCliRuntime>mac-x64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('arm32'))">
      <PropertyGroup>
        <DotNetCliRuntime>linux-arm-32</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('arm64'))">
      <PropertyGroup>
        <DotNetCliRuntime>linux-arm-64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <DotNetCliRuntime>linux-x64</DotNetCliRuntime>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <Target Name="AddDotNetSdk" Condition="$(IncludeDotNetCli)" BeforeTargets="Test">
    <FindDotNetCliPackage Version="$(DotNetCliVersion)" Runtime="$(DotNetCliRuntime)" PackageType="$(DotNetCliPackageType)">
      <Output TaskParameter="PackageUri" PropertyName="DotNetCliPackageUri"/>
    </FindDotNetCliPackage>
    <ItemGroup>
      <HelixCorrelationPayload Include="dotnet-cli">
        <Uri>$(DotNetCliPackageUri)</Uri>
      </HelixCorrelationPayload>
    </ItemGroup>
    <PropertyGroup>
      <HelixPreCommands Condition="$(IsPosixShell)">$(HelixPreCommands);export PATH=$HELIX_CORRELATION_PAYLOAD:$PATH</HelixPreCommands>
      <HelixPreCommands Condition="!$(IsPosixShell)">$(HelixPreCommands);set PATH=%HELIX_CORRELATION_PAYLOAD%%3B%PATH%</HelixPreCommands> <!-- %3B is an escaped ; -->
    </PropertyGroup>
  </Target>
  
  <Target Name="AddXUnitReporter" Condition="$(EnableXUnitReporter)" BeforeTargets="Test">
    <ItemGroup>
      <HelixCorrelationPayload Include="$(MSBuildThisFileDirectory)xunit-reporter"/>
    </ItemGroup>
    <PropertyGroup>
      <HelixPostCommands Condition="$(IsPosixShell)">$(HelixPostCommands);$HELIX_PYTHONPATH $HELIX_CORRELATION_PAYLOAD/xunit-reporter.py</HelixPostCommands>
      <HelixPostCommands Condition="!$(IsPosixShell)">$(HelixPostCommands);%HELIX_PYTHONPATH% %HELIX_CORRELATION_PAYLOAD%\xunit-reporter.py</HelixPostCommands>
    </PropertyGroup>
  </Target>

  <ItemGroup>
    <HelixProperties Condition="'$(HelixConfiguration)' != ''" Include="configuration" Value="$(HelixConfiguration)" />
    <HelixProperties Condition="'$(HelixArchitecture)' != ''" Include="architecture" Value="$(HelixArchitecture)" />
    <HelixProperties Include="operatingSystem" Value="$(HelixTargetQueue)" />
  </ItemGroup>

  <Target Name="Test"
    DependsOnTargets="$(TestDependsOn)" Returns="@(SentJob)">
    <PropertyGroup Condition="$(IsPosixShell)">
      <HelixPreCommands>set -x;$(HelixPreCommands)</HelixPreCommands>
    </PropertyGroup>
    <SendHelixJob Source="$(HelixSource)"
                  Type="$(HelixType)"
                  Build="$(HelixBuild)"
                  TargetQueue="$(HelixTargetQueue)"
                  IsPosixShell="$(IsPosixShell)"
                  BaseUri="$(HelixBaseUri)"
                  AccessToken="$(HelixAccessToken)"
                  PreCommands="$(HelixPreCommands)"
                  PostCommands="$(HelixPostCommands)"
                  CorrelationPayloads="@(HelixCorrelationPayload)"
                  WorkItems="@(HelixWorkItem)"
                  HelixProperties="@(HelixProperties)">
      <Output TaskParameter="JobCorrelationId" PropertyName="HelixJobId"/>
    </SendHelixJob>
    <ItemGroup>
      <SentJob Include="$(HelixJobId)">
        <WorkItemCount>@(HelixWorkItem->Count())</WorkItemCount>
      </SentJob>
    </ItemGroup>
    <Message Text="Sent Helix Job $(HelixJobId)" Importance="High" />
  </Target>
</Project>
