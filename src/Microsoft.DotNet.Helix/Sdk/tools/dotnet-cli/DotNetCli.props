<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>

  <PropertyGroup>
    <IncludeDotNetCli Condition=" '$(IncludeDotNetCli)' != 'true' ">false</IncludeDotNetCli>
    <!-- Use the bundled runtime version as the SDK doesn't expose an equivalent bundled version for aspnetcore.
         The runtime and aspnetcore versions are aligned since .NET 10 P6. -->
    <AspNetCoreRuntimeVersion>$(BundledNETCoreAppPackageVersion)</AspNetCoreRuntimeVersion>
    <DotNetCliPackageType Condition=" '$(DotNetCliPackageType)' == '' ">runtime</DotNetCliPackageType>
    <DotNetCliVersion Condition=" '$(DotNetCliVersion)' == '' AND '$(DotNetCliPackageType)' == 'runtime' ">$(BundledNETCoreAppPackageVersion)</DotNetCliVersion>
    <DotNetCliVersion Condition=" '$(DotNetCliVersion)' == '' AND '$(DotNetCliPackageType)' == 'aspnetcore-runtime' ">$(AspNetCoreRuntimeVersion)</DotNetCliVersion>
    <DotNetCliVersion Condition=" '$(DotNetCliVersion)' == '' AND '$(DotNetCliPackageType)' == 'sdk' ">$(NETCoreSdkVersion)</DotNetCliVersion>
    <DotNetCliChannel Condition=" '$(DotNetCliChannel)' == '' ">Current</DotNetCliChannel>
    <DotNetCliDestination>dotnet-cli</DotNetCliDestination>
    <_HelixMonoQueueTargets>$(_HelixMonoQueueTargets);$(MSBuildThisFileDirectory)DotNetCli.targets</_HelixMonoQueueTargets>
  </PropertyGroup>

  <!--
    Select DotNetCliRuntime based on TargetQueue if it isn't set
    TODO: Use the Helix Queue Info api to determine this information
  -->
  <Choose>
    <When Condition=" '$(DotNetCliRuntime)' != '' ">
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('windows')) AND $(HelixTargetQueue.ToLowerInvariant().Contains('arm64'))">
      <PropertyGroup>
        <DotNetCliRuntime>win-arm64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('windows')) AND $(HelixTargetQueue.ToLowerInvariant().Contains('arm32'))">
      <PropertyGroup>
        <DotNetCliRuntime>win-arm</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('windows'))">
      <PropertyGroup>
        <DotNetCliRuntime>win-x64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('osx')) AND $(HelixTargetQueue.ToLowerInvariant().Contains('arm64'))">
      <PropertyGroup>
        <DotNetCliRuntime>osx-arm64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('osx'))">
      <PropertyGroup>
        <DotNetCliRuntime>osx-x64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('alpine')) AND $(HelixTargetQueue.ToLowerInvariant().Contains('arm64'))">
      <PropertyGroup>
        <DotNetCliRuntime>linux-musl-arm64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('alpine')) AND $(HelixTargetQueue.ToLowerInvariant().Contains('arm32'))">
      <PropertyGroup>
        <DotNetCliRuntime>linux-musl-arm</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('alpine'))">
      <PropertyGroup>
        <DotNetCliRuntime>linux-musl-x64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('arm32'))">
      <PropertyGroup>
        <DotNetCliRuntime>linux-arm</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <When Condition="$(HelixTargetQueue.ToLowerInvariant().Contains('arm64'))">
      <PropertyGroup>
        <DotNetCliRuntime>linux-arm64</DotNetCliRuntime>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <DotNetCliRuntime>linux-x64</DotNetCliRuntime>
      </PropertyGroup>
    </Otherwise>
  </Choose>

</Project>
