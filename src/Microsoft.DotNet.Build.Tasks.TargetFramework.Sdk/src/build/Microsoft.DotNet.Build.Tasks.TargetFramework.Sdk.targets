<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <UsingTask TaskName="ChooseBestP2PTargetFrameworkTask" AssemblyFile="$(DotNetBuildTasksTargetFrameworkSdkAssembly)" />
  <UsingTask TaskName="ChooseBestTargetFrameworksTask" AssemblyFile="$(DotNetBuildTasksTargetFrameworkSdkAssembly)" />
  <UsingTask TaskName="AddTargetFrameworksToProjectTask" AssemblyFile="$(DotNetBuildTasksTargetFrameworkSdkAssembly)" />
  <UsingTask TaskName="GenerateRuntimeOSPropsFile" AssemblyFile="$(DotNetBuildTasksTargetFrameworkSdkAssembly)" />
  
  <PropertyGroup>
    <_OriginalTargetFrameworks>$(TargetFrameworks)</_OriginalTargetFrameworks>
  </PropertyGroup>

  <!-- Strip away placeholder tfms and TargetFrameworkSuffix during the graph build. -->
  <PropertyGroup Condition="'$(IsGraphBuild)' == 'true' and '$(MSBuildRestoreSessionId)' != ''">
    <TargetFrameworks Condition="'$(TargetFrameworks)' != ''">$([System.Text.RegularExpressions.Regex]::Replace('$(TargetFrameworks)', '(-[^;]+)|(;?_[^;]+)', ''))</TargetFrameworks>
  </PropertyGroup>
  
  <Target Name="RemovePlaceHolderConfigs"
          Condition="'$(MSBuildProjectExtension)' != '.pkgproj'"
          BeforeTargets="DispatchToInnerBuilds;Clean">
    <ItemGroup>
      <_InnerBuildProjects Remove="@(_InnerBuildProjects)" Condition="$([System.String]::Copy('%(_InnerBuildProjects.AdditionalProperties)').Contains('TargetFramework=_'))" />
    </ItemGroup>
  </Target>
     
  <Target Name="RunOnlyBestTargetFrameworks"
          Condition="'$(BuildAllConfigurations)' != 'true' or '$(MSBuildProjectExtension)' == '.pkgproj'" 
          BeforeTargets="DispatchToInnerBuilds"
          DependsOnTargets="GetProjectWithBestTargetFrameworks">
    <ItemGroup>
      <_InnerBuildProjects Remove="@(_InnerBuildProjects)" />
      <_InnerBuildProjects Include="@(InnerBuildProjectsWithBestTargetFramework)" />
    </ItemGroup>
  </Target>
  
  <Target Name="GetProjectWithBestTargetFrameworks">
    <ChooseBestTargetFrameworksTask BuildTargetFrameworks="$(BuildTargetFramework)-$(TargetOS);$(AdditionalBuildTargetFrameworks)"
                                    SupportedTargetFrameworks="$(TargetFrameworks)"
                                    RuntimeGraph="$(RuntimeGraph)" >
      <Output TaskParameter="BestTargetFrameworks" ItemName="_BestTargetFramework" />
    </ChooseBestTargetFrameworksTask>

    <AddTargetFrameworksToProjectTask ProjectName="$(MSBuildProjectFile)"
                                      BestTargetFrameworks="@(_BestTargetFramework)" >
      <Output TaskParameter="InnerBuildProjects" ItemName="InnerBuildProjectsWithBestTargetFramework" />
    </AddTargetFrameworksToProjectTask>
  </Target>

  <!-- Attaching the TargetFrameworkSuffix after restore for build.-->
  <Target Name="AttachTargetFrameworkSuffixToTargetFrameworks"
          AfterTargets="Restore">
    <PropertyGroup>
      <TargetFrameworks>$(_OriginalTargetFrameworks)</TargetFrameworks>
    </PropertyGroup>
  </Target>

  <!--
    Runs in a leaf project (csproj) to determine best configuration for ProjectReferences.
    Make sure to run late enough for transitive dependencies which runs before AssignProjectConfiguration.
  -->
  <Target Name="ResolveP2PReferences"
          Condition="'@(ProjectReference)' != ''"
          BeforeTargets="AssignProjectConfiguration"
          DependsOnTargets="ResolvePackageDependenciesForBuild">
    <MSBuild Projects="@(ProjectReference)"
             Targets="GetTargetFrameworks"
             ContinueOnError="true"
             SkipNonexistentTargets="true">
      <Output TaskParameter="TargetOutputs" ItemName="_ProjectRefWithTfms"/>
    </MSBuild>
     
    <PropertyGroup>
      <_OriginalTargetFramework Condition="'$(_OriginalTargetFramework)' == ''">$(TargetFramework)</_OriginalTargetFramework>
    </PropertyGroup>

    <ChooseBestP2PTargetFrameworkTask TargetFramework="$(_OriginalTargetFramework)"
                                      ProjectReferencesWithTargetFrameworks="@(_ProjectRefWithTfms)"
                                      RuntimeGraph="$(RuntimeGraph)" >
      <Output TaskParameter="AnnotatedProjectReferencesWithSetTargetFramework" ItemName="_ProjectReferencesWithBestTargetFrameworks" />
    </ChooseBestP2PTargetFrameworkTask>
    
    <ItemGroup>
      <ProjectReference Remove="@(ProjectReference)" />
      <ProjectReference Include="@(_ProjectReferencesWithBestTargetFrameworks)" SkipGetTargetFrameworkProperties="true"/>
    </ItemGroup>
  </Target>

  <Target Name="ExpandAllPackageTargetFrameworks"
          BeforeTargets="ExpandProjectReferences"
          Condition="'$(MSBuildProjectExtension)' == '.pkgproj'">
    <MSBuild Targets="GetPackageTargetFrameworksList"
             Projects="@(_NonPkgProjProjectReference)">
      <Output TaskParameter="TargetOutputs"
              ItemName="_NonPkgProjProjectReferenceTargetFramework" />
    </MSBuild>
    
    <ItemGroup>
      <!-- assign TargetFramework as a separate step to prevent batching during the transform which can reorder the list.
           order or projects matters here since this applies to traversal projects which build projects serially. -->
      <_NonPkgProjProjectReferenceTargetFrameworkWithAdditionalProperties Include="@(_NonPkgProjProjectReferenceTargetFramework->'%(OriginalItemSpec)')">
        <AdditionalProperties>TargetFramework=%(_NonPkgProjProjectReferenceTargetFramework.Identity);%(_NonPkgProjProjectReferenceTargetFramework.AdditionalProperties)</AdditionalProperties>
      </_NonPkgProjProjectReferenceTargetFrameworkWithAdditionalProperties>

    </ItemGroup>

    <ItemGroup>
      <_NonPkgProjProjectReference Remove="@(_NonPkgProjProjectReference)" />
      <_NonPkgProjProjectReference Include="@(_NonPkgProjProjectReferenceTargetFrameworkWithAdditionalProperties)" />
    </ItemGroup>
  </Target>

  <Target Name="GetPackageTargetFrameworksList"
          Returns="$(PackageTargetFrameworks)">
    <ItemGroup>
      <PackageTargetFrameworksList Include="$(TargetFrameworks)" />
      <PackageTargetFrameworksList Remove="@(PackageTargetFrameworksList)" Condition="$([System.String]::Copy('%(Identity)').StartsWith('_'))" />
    </ItemGroup>

    <PropertyGroup>
      <PackageTargetFrameworks>@(PackageTargetFrameworksList)</PackageTargetFrameworks>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateRuntimeOSPropsFile">
    <GenerateRuntimeOSPropsFile RuntimePropsFilePath="$(RuntimePropsFile)" />
  </Target>

</Project>
