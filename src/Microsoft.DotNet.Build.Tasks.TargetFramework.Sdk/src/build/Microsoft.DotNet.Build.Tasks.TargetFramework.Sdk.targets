<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>
  <UsingTask TaskName="ChooseBestP2PTargetFrameworkTask" AssemblyFile="$(DotNetBuildTasksTargetFrameworkSdkAssembly)" />
  <UsingTask TaskName="ChooseBestTargetFrameworksTask" AssemblyFile="$(DotNetBuildTasksTargetFrameworkSdkAssembly)" />
  <UsingTask TaskName="AddTargetFrameworksToProjectTask" AssemblyFile="$(DotNetBuildTasksTargetFrameworkSdkAssembly)" />

  <!-- Strip away the TargetPlatforms during the graph build restore for frameworks older than net5.0 -->
  <PropertyGroup Condition="'$(IsGraphBuild)' == 'true' and '$(MSBuildRestoreSessionId)' != ''">
    <TargetFrameworks Condition="'$(TargetFrameworks)' != ''">$([System.Text.RegularExpressions.Regex]::Replace('$(TargetFrameworks)', '$(TargetFrameworkPattern)', '${1}'))</TargetFrameworks>
  </PropertyGroup>

  <!-- We filter _InnerBuildProjects items during DispatchToInnerBuilds and Clean to only run for best target frameworks. -->
  <Target Name="RunOnlyBestTargetFrameworks"
          Condition="'$(IsCrossTargetingBuild)' == 'true' and ('$(BuildTargetFramework)' != '' or '$(MSBuildProjectExtension)' == '.pkgproj')" 
          BeforeTargets="DispatchToInnerBuilds;Clean"
          DependsOnTargets="GetProjectWithBestTargetFrameworks">
    <ItemGroup>
      <_OriginalInnerBuildProjects Include="@(_InnerBuildProjects)" />
      <_InnerBuildProjects Remove="@(_InnerBuildProjects)" />
      <_InnerBuildProjects Include="@(InnerBuildProjectsWithBestTargetFramework)" />
    </ItemGroup>
  </Target>

  <!-- As _InnerBuildProjects items are used in the GetTargetFrameworks path as well (>= .NET 5), we restore the item state. -->
  <Target Name="RestoreInnerBuildProjects"
          BeforeTargets="GetTargetFrameworksWithPlatformFromInnerBuilds"
          AfterTargets="DispatchToInnerBuilds;Clean"
          Condition="'@(_OriginalInnerBuildProjects)' != ''">
    <ItemGroup>
      <_InnerBuildProjects Remove="@(_InnerBuildProjects)" />
      <_InnerBuildProjects Include="@(_OriginalInnerBuildProjects)" />
    </ItemGroup>
  </Target>
  
  <Target Name="GetProjectWithBestTargetFrameworks">
    <ItemGroup Condition="'$(BuildTargetFramework)' != ''">
      <_BuildTargetFrameworkWithTargetOS Include="$(BuildTargetFramework)-$(TargetOS)" />
    </ItemGroup>
    <ItemGroup Condition="'$(BuildTargetFramework)' == ''">
      <_BuildTargetFrameworkWithoutOS Include="$([MSBuild]::Unescape($([System.Text.RegularExpressions.Regex]::Replace('$(TargetFrameworks)', '(-[^;]+)', ''))))" />
      <!-- TODO: Find a better way to filter out non applicable TargetOS values for .NET Framework. -->
      <_BuildTargetFrameworkWithTargetOS Include="@(_BuildTargetFrameworkWithoutOS->Distinct()->'%(Identity)-$(TargetOS)')"
                                         Condition="'$(TargetOS)' == 'windows' or !$([System.String]::Copy('%(Identity)').StartsWith('net4'))" />
    </ItemGroup>
    
    <ChooseBestTargetFrameworksTask BuildTargetFrameworks="@(_BuildTargetFrameworkWithTargetOS);$(AdditionalBuildTargetFrameworks)"
                                    SupportedTargetFrameworks="$(TargetFrameworks)"
                                    RuntimeGraph="$(RuntimeGraph)">
      <Output TaskParameter="BestTargetFrameworks" ItemName="_BestTargetFramework" />
    </ChooseBestTargetFrameworksTask>

    <AddTargetFrameworksToProjectTask ProjectName="$(MSBuildProjectFile)"
                                      BestTargetFrameworks="@(_BestTargetFramework)" >
      <Output TaskParameter="InnerBuildProjects" ItemName="InnerBuildProjectsWithBestTargetFramework" />
    </AddTargetFrameworksToProjectTask>
  </Target>

  <!--
    Runs in a leaf project (csproj) to determine best configuration for ProjectReferences.
    Make sure to run late enough for transitive dependencies which runs before AssignProjectConfiguration.
  -->
  <Target Name="ResolveP2PReferences"
          Condition="'@(ProjectReference)' != ''"
          BeforeTargets="AssignProjectConfiguration"
          DependsOnTargets="ResolvePackageDependenciesForBuild">
    <PropertyGroup>
      <_OriginalTargetFramework Condition="'$(_OriginalTargetFramework)' == ''">$(TargetFramework)</_OriginalTargetFramework>
    </PropertyGroup>

    <MSBuild Projects="@(ProjectReference)"
             Targets="GetTargetFrameworks"
             BuildInParallel="$(BuildInParallel)"
             RemoveProperties="TargetFramework;RuntimeIdentifier"
             Condition="'%(ProjectReference.SkipGetTargetFrameworkProperties)' != 'true'"
             SkipNonexistentTargets="true">
      <Output TaskParameter="TargetOutputs" ItemName="_ProjectReferenceWithTargetFrameworks" />
    </MSBuild>

    <ItemGroup>
      <_ProjectReferenceWithTargetFrameworks Include="@(ProjectReference->WithMetadataValue('SkipGetTargetFrameworkProperties', 'true'))" />
    </ItemGroup>

    <ChooseBestP2PTargetFrameworkTask TargetFramework="$(_OriginalTargetFramework)"
                                      ProjectReferencesWithTargetFrameworks="@(_ProjectReferenceWithTargetFrameworks)"
                                      RuntimeGraph="$(RuntimeGraph)" >
      <Output TaskParameter="AnnotatedProjectReferencesWithSetTargetFramework" ItemName="_ProjectReferenceWithBestTargetFramework" />
    </ChooseBestP2PTargetFrameworkTask>
    
    <ItemGroup>
      <ProjectReference Remove="@(ProjectReference)" />
      <ProjectReference Include="@(_ProjectReferenceWithBestTargetFramework)" />
    </ItemGroup>
  </Target>

  <Target Name="ExpandAllPackageTargetFrameworks"
          BeforeTargets="ExpandProjectReferences"
          Condition="'$(MSBuildProjectExtension)' == '.pkgproj'">
    <MSBuild Targets="GetPackageTargetFrameworksList"
             Projects="@(_NonPkgProjProjectReference)">
      <Output TaskParameter="TargetOutputs"
              ItemName="_NonPkgProjProjectReferenceTargetFramework" />
    </MSBuild>
    
    <ItemGroup>
      <!-- assign TargetFramework as a separate step to prevent batching during the transform which can reorder the list.
           order or projects matters here since this applies to traversal projects which build projects serially. -->
      <_NonPkgProjProjectReferenceTargetFrameworkWithAdditionalProperties Include="@(_NonPkgProjProjectReferenceTargetFramework->'%(OriginalItemSpec)')">
        <AdditionalProperties>TargetFramework=%(_NonPkgProjProjectReferenceTargetFramework.Identity);%(_NonPkgProjProjectReferenceTargetFramework.AdditionalProperties)</AdditionalProperties>
      </_NonPkgProjProjectReferenceTargetFrameworkWithAdditionalProperties>

    </ItemGroup>

    <ItemGroup>
      <_NonPkgProjProjectReference Remove="@(_NonPkgProjProjectReference)" />
      <_NonPkgProjProjectReference Include="@(_NonPkgProjProjectReferenceTargetFrameworkWithAdditionalProperties)" />
    </ItemGroup>
  </Target>

  <Target Name="GetPackageTargetFrameworksList"
          Returns="$(PackageTargetFrameworks)">
    <ItemGroup>
      <PackageTargetFrameworksList Include="$(TargetFrameworks)" />
      <PackageTargetFrameworksList Remove="@(PackageTargetFrameworksList)" Condition="$([System.String]::Copy('%(Identity)').StartsWith('_'))" />
    </ItemGroup>

    <PropertyGroup>
      <PackageTargetFrameworks>@(PackageTargetFrameworksList)</PackageTargetFrameworks>
    </PropertyGroup>
  </Target>

</Project>
