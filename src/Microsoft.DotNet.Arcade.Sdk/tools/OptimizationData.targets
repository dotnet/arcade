<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <!--
    Properties:
      IbcOptimizationDataDir             The directory containing IBC optimization data. Optimization data are not applied if unset.
      ApplyPartialNgenOptimization       Set to true in a project to apply Partial NGEN optimization data to the built binary.

    Items:  
      OptimizeAssembly                   Set of assemblies to apply Partial NGEN optimization data to.
  -->

  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.Unsign" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />
  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.GroupItemsBy" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />

  <PropertyGroup>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
  </PropertyGroup>

  <!--
    We need to write out this sentinel file so that when ApplyOptimizations runs and compares the intermediate assemby location
    against itself the PostCompileBinaryModificationSentinelFile will have a newer timestamp allowing the target to be run.
  -->
  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="_InitializeAssemblyOptimizationWithTargetAssembly;ApplyOptimizations"
          Condition="'$(IsWpfTempProject)' != 'true' and '$(ApplyPartialNgenOptimization)' == 'true' and '$(IbcOptimizationDataDir)' != ''"
          Inputs="$(MSBuildAllProjects);@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_InitializeAssemblyOptimizationWithTargetAssembly">
    <ItemGroup>
      <OptimizeAssembly Include="@(IntermediateAssembly)" />
    </ItemGroup>
  </Target>

  <Target Name="_LocateIbcMerge">
    <PropertyGroup>
      <_IbcMergePath>$(NuGetPackageRoot)microsoft.dotnet.ibcmerge\$(MicrosoftDotNetIBCMergeVersion)\lib\net45\ibcmerge.exe</_IbcMergePath>

      <_RunIbcMerge>false</_RunIbcMerge>
      <_RunIbcMerge Condition="'$(OfficialBuild)' == 'true' or Exists('$(_IbcMergePath)')">true</_RunIbcMerge>
    </PropertyGroup>
  </Target>

  <Target Name="_CalculateIbcMergeInvocations">

    <Error Text="ApplyPartialNgenOptimization is true but directory specified in IbcOptimizationDataDir does not exist: '$(IbcOptimizationDataDir)'" 
           Condition="!Exists('$(IbcOptimizationDataDir)')" />

    <ItemGroup>
      <!--
        Find all .ibc files generated for assemblies to optimize.

        The optimization data directory has the following structure:
          $(IbcOptimizationDataDir)\path\{AssemblyFileName}\{AssemblyFileName}
          $(IbcOptimizationDataDir)\path\{AssemblyFileName}\Scenario1.ibc
          $(IbcOptimizationDataDir)\path\{AssemblyFileName}\Scenario2.ibc

        One assembly might be copied to multiple subdirectories (e.g. in MSBuild and in IDE). 
        We assume that these copies are the same and merge all scenarios together.
        We could produce multiple different assemblies with IBC data embedded if there 
        was a significant benefit in optimizing them separately.
        This would however require a more complicated setup authoring.
      -->
      <_IbcFile Include="$(IbcOptimizationDataDir)\**\%(OptimizeAssembly.FileName)%(OptimizeAssembly.Extension)\*.ibc" OptimizeAssemblyPath="%(OptimizeAssembly.Identity)"/>

      <_AssemblyWithoutRawIbcData Include="@(OptimizeAssembly)" Exclude="@(_IbcFile->'%(OptimizeAssemblyPath)')" />

      <_IbcFile>
        <PreviousAssemblyDir>$([System.IO.Path]::GetDirectoryName('%(Identity)'))</PreviousAssemblyDir>
        <AssemblyFileName>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName('%(Identity)'))))</AssemblyFileName>
      </_IbcFile>

      <_IbcFileByAssemblyName Include="@(_IbcFile->'%(AssemblyFileName)')"
                              IbcFiles="%(_IbcFile.Identity)"
                              PreviousAssemblyPath="%(_IbcFile.PreviousAssemblyDir)\%(_IbcFile.AssemblyFileName)"
                              PreviousAssemblyCopyPath="$(ArtifactsTmpDir)OptimizedAssemblies\$([System.Guid]::NewGuid())"
                              OptimizeAssemblyPath="%(_IbcFile.OptimizeAssemblyPath)" />
    </ItemGroup>

    <Error Text="No optimization data found for assemblies: @(_AssemblyWithoutRawIbcData, ', ')"
           Condition="'@(_AssemblyWithoutRawIbcData)' != ''" />

    <Microsoft.DotNet.Arcade.Sdk.GroupItemsBy Items="@(_IbcFileByAssemblyName)" GroupMetadata="IbcFiles">
      <Output TaskParameter="GroupedItems" ItemName="_AssemblyWithRawIbcData" />
    </Microsoft.DotNet.Arcade.Sdk.GroupItemsBy>

    <ItemGroup>
      <_IbcMergeInvocation Include="%(_AssemblyWithRawIbcData.AssemblyFileName) [MergeRawToPrevious]">
        <CopyFilesSource>%(_AssemblyWithRawIbcData.PreviousAssemblyPath)</CopyFilesSource>
        <CopyFilesDestination>%(_AssemblyWithRawIbcData.PreviousAssemblyCopyPath)</CopyFilesDestination>

        <!--
          -delete to delete data previously embedded in the binary. 
        -->
        <IbcMergeArgs>-q -f -partialNGEN -minify -delete -mo "%(_AssemblyWithRawIbcData.PreviousAssemblyCopyPath)" "$([MSBuild]::ValueOrDefault('%(_AssemblyWithRawIbcData.IbcFiles)', '').Replace(';', '" "'))"</IbcMergeArgs>
      </_IbcMergeInvocation>

      <_IbcMergeInvocation Include="%(_AssemblyWithRawIbcData.AssemblyFileName) [MergePreviousToCurrent]">
        <!--
          -delete to delete data previously embedded in the binary. This is a no-op for binaries produced by this build, but is needed for dependencies such as System.Reflection.Metadata.
          -incremental to map data stored in the optimized binary, which comes from a previous build, to the new build of the binary.
        -->
        <IbcMergeArgs>-q -f -partialNGEN -minify -delete -mo "%(_AssemblyWithRawIbcData.OptimizeAssemblyPath)" -incremental "%(_AssemblyWithRawIbcData.PreviousAssemblyCopyPath)"</IbcMergeArgs>

        <UnsignFile>%(_AssemblyWithRawIbcData.OptimizeAssemblyPath)</UnsignFile>
      </_IbcMergeInvocation>
    </ItemGroup>
  </Target>

  <!--
    Merges optimization data to assemblies specified in OptimizeAssembly item group.

    Non-incremental. Calling targets need to handle incremental build if necessary.
    Runs during any CI build. Performs the actual merge only when IBCMerge tool is available. It is expected to be available in an official build.
  -->
  <Target Name="ApplyOptimizations"
          DependsOnTargets="_LocateIbcMerge;_CalculateIbcMergeInvocations"
          Condition="'@(OptimizeAssembly)' != '' and '$(Configuration)' == 'Release' and '$(ContinuousIntegrationBuild)' == 'true' and '$(ApplyPartialNgenOptimization)' == 'true' and '$(IbcOptimizationDataDir)' != ''">

    <Message Text='IBCMerge tool will be run in an official build with arguments: %(_IbcMergeInvocation.IbcMergeArgs)'
             Condition="'$(_RunIbcMerge)' != 'true'" 
             Importance="normal"/>

    <Copy SourceFiles="%(_IbcMergeInvocation.CopyFilesSource)" 
          DestinationFiles="%(_IbcMergeInvocation.CopyFilesDestination)" 
          Condition="'%(_IbcMergeInvocation.CopyFilesSource)' != ''" />

    <Exec Command='"$(_IbcMergePath)" %(_IbcMergeInvocation.IbcMergeArgs)' ConsoleToMSBuild="true" Condition="'$(_RunIbcMerge)' == 'true'">
      <Output TaskParameter="ConsoleOutput" PropertyName="_IbcMergeOutput" />
    </Exec>

    <Message Text="$(_IbcMergeOutput)" Importance="low" />

    <!-- Remove Authenticode signing record if present. -->
    <Microsoft.DotNet.Arcade.Sdk.Unsign FilePath="%(_IbcMergeInvocation.UnsignFile)" Condition="'%(_IbcMergeInvocation.UnsignFile)' != ''" />
  </Target>

</Project>
