<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) Microsoft Corporation. All rights reserved.
  
  Licensed under the MIT license.
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Set LanguageTargets to Microsoft.Common.targets for any project that the SDK won't (.proj, .noproj, etc)
    https://github.com/dotnet/sdk/blob/50ddfbb91be94d068514e8f4b0ce1052156364a0/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.targets#L28
    
    We can't default LanguageTargets it is set in the SDK and immediately imported.  So we can only default
    it if we know the SDK won't.  Projects probably won't load in Visual Studio but will build from the
    command-line just fine.
  -->
  <PropertyGroup>
    <LanguageTargets Condition=" '$(LanguageTargets)' == '' And '$(MSBuildProjectExtension)' != '.csproj' And '$(MSBuildProjectExtension)' != '.vbproj' And '$(MSBuildProjectExtension)' != '.fsproj' ">$(MSBuildToolsPath)\Microsoft.Common.targets</LanguageTargets>
    <MSBuildAllProjects Condition="'$(MSBuildToolsVersion)' != 'Current'">$(MSBuildAllProjects);$(MsBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Import Project="$(CustomBeforeNoTargets)" Condition="'$(CustomBeforeNoTargets)' != '' and Exists('$(CustomBeforeNoTargets)')" />

  <PropertyGroup>
    <!-- Don't include build output in a package since NoTargets projects don't emit an assembly. -->
    <IncludeBuildOutput Condition="'$(IncludeBuildOutput)' == ''">false</IncludeBuildOutput>

    <!-- For CPS/VS support. See https://github.com/dotnet/project-system/blob/master/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/DesignTimeTargets/Microsoft.Managed.DesignTime.targets#L60 -->
    <CustomBeforeMicrosoftCommonTargets Condition="'$(ManagedLanguageTargetsGotImported)' == '' And Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets')">$(CustomBeforeMicrosoftCommonTargets);$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets</CustomBeforeMicrosoftCommonTargets>
  </PropertyGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition=" '$(CommonTargetsPath)' == '' " />

  <PropertyGroup>
    <!-- This property must be overridden to remove a few targets that compile assemblies -->
    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      Compile;
      GetTargetPath;
      PrepareForRun;
      IncrementalClean;
      PostBuildEvent
    </CoreBuildDependsOn>
    
    <!-- Disable symbol generation -->
    <DebugType>None</DebugType>
    <DebugSymbols>false</DebugSymbols>
    
    <!-- Don't emit a reference assembly -->
    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
  </PropertyGroup>

  <!-- Clear output group items which are read by the IDE and NuGet. -->
  <ItemGroup>
    <BuiltProjectOutputGroupKeyOutput Remove="@(BuiltProjectOutputGroupKeyOutput)" />
    <DebugSymbolsProjectOutputGroupOutput Remove="@(DebugSymbolsProjectOutputGroupOutput)" />
    <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    <IntermediateRefAssembly Remove="@(IntermediateRefAssembly)" />
    <Reference Remove="mscorlib" />
  </ItemGroup>

  <!--
    The CopyFilesToOutputDirectory target is hard coded to depend on ComputeIntermediateSatelliteAssemblies.  NoTargets projects do no generate resource assemblies
    so the target is replaced with a no-op
  -->
  <Target Name="ComputeIntermediateSatelliteAssemblies" />

  <!--
    NoTargets projects do not build an assembly so dependent projects shouldn't get a path to the target.  Override the GetTargetPath to do nothing.
  -->
  <Target Name="GetTargetPath" />

  <!--
    The GetTargetPathWithTargetPlatformMoniker target uses a BeforeTargets so the only way to disable it is to override it with an empty target.
  -->
  <Target Name="GetTargetPathWithTargetPlatformMoniker" />

  <!--
    The GetReferenceAssemblyPaths does not need to run since reference assemblies aren't needed.
  -->
  <Target Name="GetFrameworkPaths" DependsOnTargets="$(GetFrameworkPathsDependsOn)" />
  <Target Name="GetReferenceAssemblyPaths" DependsOnTargets="$(GetReferenceAssemblyPathsDependsOn)" />

  <Import Project="$(CustomAfterNoTargets)" Condition="'$(CustomAfterNoTargets)' != '' and Exists('$(CustomAfterNoTargets)')" />

  <!-- 
    Microsoft.Managed.Targets is imported by the managed language target files in MSBuild 16.0 and above, but most of the msbuild tasks are actually in Microsoft.Common.Currentversion.targets.
    So import it when the managed targets do not get imported.
  -->
  <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.targets" Condition="'$(MSBuildAssemblyVersion)' >= '16.0' And '$(ManagedLanguageTargetsGotImported)' != 'true'" />

  <!-- Override stock CoreCompile target to do nothing but keep extensibility points -->
  <Target Name="CoreCompile"
          DependsOnTargets="$(CoreCompileDependsOn)">
    <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''" />
  </Target>

  <Target Name="_GenerateCompileInputs" />
  <Target Name="_GenerateCompileDependencyCache" />

  <!-- Disables the _CopyFilesMarkedCopyLocal target to not copy references when SkipCopyFilesMarkedCopyLocal is set to false. -->
  <Import Project="Microsoft.Build.NoTargets.3.7.56.DisableCopyFilesMarkedCopyLocal.targets" Condition="'$(SkipCopyFilesMarkedCopyLocal)' == 'true'" />
</Project>
