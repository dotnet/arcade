<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>

  <PropertyGroup>
    <!-- By default, search for sign aritfacts under the list of known directories. -->
    <EnableDefaultArtifacts>true</EnableDefaultArtifacts>
  </PropertyGroup>

  <!-- Repo extension point to sign and/or publish. Artifacts are shipping and blobs by default. -->
  <ItemDefinitionGroup>
    <Artifact>
      <PublishFlatContainer>true</PublishFlatContainer>
      <!-- Possible values: Blob, Package, PDB -->
      <!-- Currently unset, indicating that a repo hasn't started using this property. If it's set, then it
           wins over PublishFlatContaner. If it is not set, then PublishFlatContainer wins.
           After existing usage of PublishFlatContainer is no longer around, set to "Blob" -->
      <Kind></Kind>
      <IsShipping>true</IsShipping>
    </Artifact>
  </ItemDefinitionGroup>

  <ItemGroup>
    <!--
      This is intended to hold information about the certificates used for signing.
    -->
    <CertificatesSignInfo Include="3PartyDual" DualSigningAllowed="true" />
    <CertificatesSignInfo Include="3PartySHA2" DualSigningAllowed="true" />
    <!-- This signing information indicates certificates that represent a sign and notarize operation. -->
    <CertificatesSignInfo Include="MacDeveloperHardenWithNotarization" MacCertificate="MacDeveloperHarden" MacNotarizationAppName="dotnet" />
    <CertificatesSignInfo Include="MacDeveloperWithNotarization" MacCertificate="MacDeveloper" MacNotarizationAppName="dotnet" />
    <CertificatesSignInfo Include="MacDeveloperVNextWithNotarization" MacCertificate="MacDeveloperVNext" MacNotarizationAppName="dotnet" />
    <CertificatesSignInfo Include="MacDeveloperVNextHardenWithNotarization" MacCertificate="MacDeveloperVNextHarden" MacNotarizationAppName="dotnet" />
  </ItemGroup>

  <!-- PostBuildSign switch is kept for avoiding breaks in repos that use it to avoid signing. -->
  <Choose Condition="'$(EnableDefaultArtifacts)' == 'true' and '$(PostBuildSign)' != 'true'">
    <When Condition="'$(EnableDefaultRidSpecificArtifacts)' == 'true'">
      <!--
        Only publish packages that contain this build's Target RID in the name.
      -->
      <ItemGroup>
        <ItemsToSign Include="$(ArtifactsShippingPackagesDir)**/*.$(TargetRid).*.nupkg"/>
        <ItemsToSign Include="$(ArtifactsNonShippingPackagesDir)**/*.$(TargetRid).*.nupkg" />
        <!--
          Integration with Microsoft.DotNet.Build.Tasks.Installers: Publish packages of the following formats as well.
          These are arch-specific Visual Studio insertion packages. As they're Windows-only, they only include architecture in the name:
          - VS.Redist.Common.*.$(TargetArchitecture).*.nupkg
          - VS.Redist.Common.*.$(TargetArchitecture)-*.*.nupkg
          
          These packages are always non-shipping, so only look there.
        -->
        <ItemsToSign Include="$(ArtifactsNonShippingPackagesDir)**/VS.Redist.Common.*.$(TargetArchitecture).*.nupkg" />
        <ItemsToSign Include="$(ArtifactsNonShippingPackagesDir)**/VS.Redist.Common.*.$(TargetArchitecture)-*.*.nupkg" />
      </ItemGroup>
      
      <ItemGroup>
        <!-- Always sign all vsix packages and VS Build Packages. These may be arch specific or agnostic, but they likely won't have the RID included. -->
        <ItemsToSign Include="$(VisualStudioSetupOutputPath)**\*.vsix" />
        <ItemsToSign Include="$(VisualStudioBuildPackagesDir)**\*.nupkg" />
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <!-- List of container files that will be opened and checked for files that need to be signed. -->
        <ItemsToSign Include="$(ArtifactsPackagesDir)**\*.nupkg" />
        <ItemsToSign Include="$(VisualStudioSetupOutputPath)**\*.vsix" />
        <ItemsToSign Include="$(VisualStudioBuildPackagesDir)**\*.nupkg" />
      </ItemGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <!-- Default certificate/strong-name to be used for all files with PKT=="31bf3856ad364e35". -->
    <StrongNameSignInfo Include="MsSharedLib72" PublicKeyToken="31bf3856ad364e35" CertificateName="Microsoft400" />
    <StrongNameSignInfo Include="SilverlightCert121" PublicKeyToken="7cec85d7bea7798e" CertificateName="Microsoft400" />
    <StrongNameSignInfo Include="StrongName" PublicKeyToken="b77a5c561934e089" CertificateName="Microsoft400" />
    <StrongNameSignInfo Include="StrongName" PublicKeyToken="b03f5f7f11d50a3a" CertificateName="Microsoft400" />
    <!-- Do not include specific key files if full assembly signing is not supported, as they will not be usable when we sign. -->
    <StrongNameSignInfo Include="$(MSBuildThisFileDirectory)snk\Open.snk" PublicKeyToken="cc7b13ffcd2ddd51" CertificateName="Microsoft400" Condition="'$(FullAssemblySigningSupported)' != 'false'" />

    <!--
      Map of file extensions to default certificate name. Files with these extensions are
      signed with the specified certificate. Particularly useful for files that don't have
      a public key token.
      The certificate can be overriden using the StrongNameSignInfo or the FileSignInfo item group.
    -->
    <FileExtensionSignInfo Include=".deb" CertificateName="LinuxSign" />
    <FileExtensionSignInfo Include=".jar" CertificateName="MicrosoftJARSHA2" />
    <FileExtensionSignInfo Include=".js;.ps1;.psd1;.psm1;.psc1;.py" CertificateName="Microsoft400" />
    <FileExtensionSignInfo Include=".dll;.exe;.mibc" CertificateName="Microsoft400" />
    <FileExtensionSignInfo Include=".nupkg" CertificateName="NuGet" />
    <FileExtensionSignInfo Include=".vsix" CertificateName="VsixSHA2" />
    <FileExtensionSignInfo Include=".zip" CertificateName="None" />
    <FileExtensionSignInfo Include=".tgz" CertificateName="None" />
    <FileExtensionSignInfo Include=".tar.gz" CertificateName="None" />
    <!-- Note, RPMs can only be unpack/repacked on Linux. They can be signed on non-Linux -->
    <FileExtensionSignInfo Include=".azl.rpm" CertificateName="LinuxSignMariner" />
    <FileExtensionSignInfo Include=".rpm" CertificateName="LinuxSign" />
    <!-- Note, these can only be unpack/repacked on Mac. They can be signed on a non-Mac -->
    <FileExtensionSignInfo Include=".pkg" CertificateName="MacDeveloper" />
    <!-- .app bundles are technically directories, but the Microsoft.DotNet.MacOsPkg
    tool packs these bundles into zips when unpacking .pkgs -->
    <FileExtensionSignInfo Include=".app" CertificateName="MacDeveloper" />
    <!-- Runtime hardening is required for notarization. -->
    <FileExtensionSignInfo Include=".dylib" CertificateName="MacDeveloperHarden" />
  </ItemGroup>

  <!-- The name of the .NET specific certificate, which is a general replacement for Microsoft400
       If UseDotNetCert is specific in a repo's eng/Signing.props, all usage of Microsoft400 is replaced
       with MicrosoftDotNet500 -->
  <PropertyGroup>
    <DotNetCertificateName>MicrosoftDotNet500</DotNetCertificateName>
    <UseDotNetCertificate>false</UseDotNetCertificate>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Flags for controlling whether empty signing lists are detected for in build and post-build signing.
         These flags are split (rather than just a single check based on PostBuildSign == true/false because
         some repos may do both in-build and post-build signing. -->
    <!-- Control whether an empty ItemsToSign item group is allowed when calling SignToolTask. -->
    <AllowEmptySignList Condition="'$(PostBuildSign)' != 'true'">false</AllowEmptySignList>
    <AllowEmptySignList Condition="'$(PostBuildSign)' == 'true'">true</AllowEmptySignList>

    <!-- Timeout in milliseconds for DotNet MicroBuild build command. '-1' is infinite. -->
    <SignToolDotNetTimeout Condition="'$(SignToolDotNetTimeout)' == ''">-1</SignToolDotNetTimeout>

    <NETCORE_ENGINEERING_TELEMETRY>Signing</NETCORE_ENGINEERING_TELEMETRY>
  </PropertyGroup>

  <!-- Sign tool parallelism limits. These may be overridden by a repo. -->
  <PropertyGroup>
    <!-- Number of containers to repack in parallel -->
    <SignToolRepackParallelism>16</SignToolRepackParallelism>
    <!-- Maximum size in MB that a file may be before it is repacked serially -->
    <SignToolRepackMaximumParallelFileSize>128</SignToolRepackMaximumParallelFileSize>
  </PropertyGroup>

  <!-- Allow repository to customize signing configuration -->
  <Import Project="$(RepositoryEngineeringDir)Signing.props" Condition="Exists('$(RepositoryEngineeringDir)Signing.props')" />

  <!-- Respect Artifact item repo extension point -->
  <ItemGroup Condition="'@(Artifact)' != ''">
    <ItemsToSign Include="@(Artifact)" Condition="'$(PostBuildSign)' != 'true'" />
  </ItemGroup>

</Project>
