<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <!--
    This file main target `SetupTargetFeeds` is used to create an ItemGroup with
    feed descriptors that will be used for publishing build assets.
    
    Parameters:
      - IsInternalBuild
      - IsStableBuild
      - RepositoryName
      - ChannelId
      - CommitSha
      - AzureStorageAccountName
      - AzureStorageAccountKey
      - AzureDevOpsFeedsBaseUrl
      - ArtifactsCategory
      - AzureStorageTargetFeedPAT
      - StaticInternalFeed          : URL of the feed to publish internal non-stable packages
      
      - CreateTestConfig            : If set to true the user will be able to test a TargetFeedConfig 
                                      constructed using parameters below:
        - TestFeedCategories
        - TestFeedURL
        - TestFeedName
        - TestFeedType
        - TestFeedToken
  -->

  <Target Name="SetupTargetFeeds">
    <Error
      Condition="'$(IsStableBuild)' == ''"
      Text="Parameter 'IsStableBuild' is empty. A boolean value is required." />

    <Error
      Condition="'$(IsInternalBuild)' == ''"
      Text="Parameter 'IsInternalBuild' is empty. A boolean value is required." />

    <Error
      Condition="'$(ChannelId)' == ''"
      Text="Parameter 'ChannelId' is empty. The ID of the target channel id BAR is required." />

    <Error
      Condition="('$(AzureStorageAccountName)' == '' or '$(AzureStorageAccountKey)' == '') and '$(IsStableBuild)' == 'true'"
      Text="Parameters 'AzureStorageAccountName/Key' are empty." />

    <!--
      If the user wants to use a test configuration we'll create a TargetFeedConfig using
      optional parameters passed as properties. This should prevent all the other 
      cases below from being activated.
    -->
    <ItemGroup Condition="'$(CreateTestConfig)' == 'true'">
      <TargetFeedConfig
        Include="$(TestFeedCategories)"
        TargetURL="$(TestFeedURL)"
        FeedName="$(TestFeedName)"
        Type="$(TestFeedType)"
        Token="$(TestFeedToken)" />
    </ItemGroup>

    <!--
      When a build is stable we ask `CreateInternalBlobFeed` in Tasks.Feed to create a new AzDO feed.
      That task will return an Azure Storage feed wrapped by an authenticated Azure function proxy,
      we use that to mimic an internal/authenticated feed. This will likely change in the future once
      we switch to using AzDO private feeds.
    -->
    <CreateInternalBlobFeed
        Condition="'@(TargetFeedConfig)' == '' AND '$(IsStableBuild)' == 'true'"
        RepositoryName="$(RepositoryName)"
        CommitSha="$(CommitSha)"
        AzureDevOpsFeedsBaseUrl="$(AzureDevOpsFeedsBaseUrl)"
        AzureStorageAccountName="$(AzureStorageAccountName)"
        AzureStorageAccountKey="$(AzureStorageAccountKey)">
      <Output TaskParameter="TargetFeedURL" PropertyName="NewAzDoFeedURL"/>
      <Output TaskParameter="TargetFeedName" PropertyName="NewTargetFeedName"/>
    </CreateInternalBlobFeed>

    <ItemGroup Condition="'@(TargetFeedConfig)' == '' AND '$(IsStableBuild)' == 'true'">
      <TargetFeedConfig
        Include="NetCore;OSX;Deb;Rpm;Node;BinaryLayout;Installer;Checksum;Maven;VSIX"
        TargetURL="$(NewAzDoFeedURL)/index.json"
        FeedName="$(NewTargetFeedName)"
        Type="AzureStorageFeed"
        Token="$(AzureStorageAccountKey)" />
    </ItemGroup>

    <!-- Assets for non-stable AND Internal builds are published to a static feed for now. -->
    <ItemGroup Condition="'@(TargetFeedConfig)' == '' AND '$(IsInternalBuild)' == 'true'">
      <TargetFeedConfig
        Include="NetCore;OSX;Deb;Rpm;Node;BinaryLayout;Installer;Checksum;Maven;VSIX"
        TargetURL="$(StaticInternalFeed)/index.json"
        FeedName="dotnet-core-internal"
        Type="AzureStorageFeed"
        Token="$(AzureStorageAccountKey)" />
    </ItemGroup>

    <!--
      - Adding this to let repos that want to override the TargetFeed be able to do so.
      - I'm reusing the parameter that was introduced by RM pipelines so that no further 
        changes are needed in customer repos.
      - Eventually this will be deprecated or at least modified so that the build TargetFeed
        is selected based on build intent ('channel').
    -->
    <PropertyGroup>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == '.NETCORE'">https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == '.NETCOREVALIDATION'">https://dotnetfeed.blob.core.windows.net/arcade-validation/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'ASPNETCORE'">https://dotnetfeed.blob.core.windows.net/aspnet-aspnetcore/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'ASPNETCORETOOLING'">https://dotnetfeed.blob.core.windows.net/aspnet-aspnetcore-tooling/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'ENTITYFRAMEWORKCORE'">https://dotnetfeed.blob.core.windows.net/aspnet-entityframeworkcore/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'ASPNETEXTENSIONS'">https://dotnetfeed.blob.core.windows.net/aspnet-extensions/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'CORECLR'">https://dotnetfeed.blob.core.windows.net/dotnet-coreclr/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'CORESDK'">https://dotnetfeed.blob.core.windows.net/dotnet-sdk/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'TOOLSINTERNAL'">https://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'TOOLSET'">https://dotnetfeed.blob.core.windows.net/dotnet-toolset/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'WINDOWSDESKTOP'">https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'NUGETCLIENT'">https://dotnetfeed.blob.core.windows.net/nuget-nugetclient/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'ASPNETENTITYFRAMEWORK6'">https://dotnetfeed.blob.core.windows.net/aspnet-entityframework6/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'ASPNETBLAZOR'">https://dotnetfeed.blob.core.windows.net/aspnet-blazor/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(ArtifactsCategory.ToUpper())' == 'IOT'">https://dotnetfeed.blob.core.windows.net/dotnet-iot/index.json</TargetStaticFeed>
      <TargetStaticFeed Condition="'$(TargetStaticFeed)' == ''">https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json</TargetStaticFeed>
    </PropertyGroup>

    <!-- Public non-stable feed used by `Validation` Channel. -->
    <ItemGroup Condition="'@(TargetFeedConfig)' == '' AND '$(ChannelId)' == '9'">
      <TargetFeedConfig
        Include="NetCore;OSX;Deb;Rpm;Node;BinaryLayout;Installer;Checksum;Maven;VSIX"
        TargetURL="$(TargetStaticFeed)"
        FeedName="public/dotnet-core-validation-public"
        Type="AzureStorageFeed"
        Token="$(AzureStorageTargetFeedPAT)" />
    </ItemGroup>

    <!-- Public non-stable feed used by `.NET Core 3 Dev` Channel. -->
    <ItemGroup Condition="'@(TargetFeedConfig)' == '' AND '$(ChannelId)' == '3'">
      <TargetFeedConfig
        Include="NetCore;OSX;Deb;Rpm;Node;BinaryLayout;Installer;Checksum;Maven;VSIX"
        TargetURL="$(TargetStaticFeed)"
        FeedName="public/dotnet-core-public"
        Type="AzureStorageFeed"
        Token="$(AzureStorageTargetFeedPAT)" />
    </ItemGroup>

    <Error
      Condition="'@(TargetFeedConfig)' == ''"
      Text="It wasn't possible to determine which target feed configuration to use." />

    <Message
      Text="##vso[task.setvariable variable=AzDoFeedName]%(TargetFeedConfig.FeedName)"
      Importance="high" />

    <Message
      Text="##vso[task.setvariable variable=TargetAzDOFeed]%(TargetFeedConfig.TargetURL)"
      Importance="high" />

    <Message
      Text="Artifact with category '%(TargetFeedConfig.Identity)' should go to %(TargetFeedConfig.Type) -> '%(TargetFeedConfig.TargetURL)'"
      Importance="high" />
  </Target>
</Project>
