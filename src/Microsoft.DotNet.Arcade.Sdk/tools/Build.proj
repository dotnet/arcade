<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project DefaultTargets="Execute" TreatAsLocalProperty="RepoRoot">
  <!--

  Required parameters:
    RepoRoot                        Repository root.
    Projects                        List of projects to build. Semicolon separated, may include globs.

  Optional parameters:
    Configuration                   Build configuration: "Debug", "Release", etc.

    DotNetRestoreSourcePropsPath    Overrides of ResourceSources (list of NuGet feeds to download dependencies from)
    DotNetBuildFromSource           Building the entire stack from source with no external dependencies.
    DotNetBuildOffline              Building without access to NuGet servers.
    DotNetOutputBlobFeedDir         Directory to publish Source Build assets to (packages, symbol pacakges, installers, etc.).
    DotNetPublishToBlobFeed         Publish assets to blob feed using DotNetPublishBlobFeedUrl and DotNetPublishBlobFeedKey.
    DotNetPublishBlobFeedUrl        Target feed URL, or empty if not publishing to Azure blob feed.
    DotNetPublishBlobFeedKey        Azure blob feed account key.
    DotNetSymbolServerTokenMsdl     Personal access token for MSDL symbol server. Available from variable group DotNet-Symbol-Publish.
    DotNetSymbolServerTokenSymWeb   Personal access token for SymWeb symbol server. Available from variable group DotNet-Symbol-Publish.
    DotNetSymbolExpirationInDays    Symbol expiration time in days (defaults to 10 years).
    DotNetSignType                  Specifies the signing type: 'real' (default), 'test'.

    ContinuousIntegrationBuild      "true" when building on a CI server (PR build or official build)
    Restore                         "true" to restore toolset and solution
    Build                           "true" to build solution
    Rebuild                         "true" to rebuild solution
    Execute                         "true" to execute an sdk project "execute" target
    Deploy                          "true" to deploy assets (e.g. VSIXes)
    Test                            "true" to run tests
    IntegrationTest                 "true" to run integration tests
    PerformanceTest                 "true" to run performance tests
    Pack                            "true" to build NuGet packages and VS insertion manifests
    Sign                            "true" to sign built binaries
    Publish                         "true" to publish artifacts (e.g. symbols)

    Workaround for https://github.com/NuGet/Home/issues/4695
    QuietRestore                    "true" to suppress Restore output.
    QuietRestoreBinaryLog           "true" to produce binary log for Restore.
  -->

  <PropertyGroup>
    <!-- IsRunningFromVisualStudio may be true even when running msbuild.exe from command line. This generally means that MSBUild is Visual Studio installation and therefore we need to find NuGet.targets in a different location.  -->
    <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'=='' and '$([MSBuild]::IsRunningFromVisualStudio())'=='true'">$(MSBuildToolsPath32)\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets</NuGetRestoreTargets>
    <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'==''">$(MSBuildToolsPath)\NuGet.targets</NuGetRestoreTargets>
  </PropertyGroup>

  <PropertyGroup>
    <_RepoRootOriginal>$(RepoRoot)</_RepoRootOriginal>
    <RepoRoot>$([System.IO.Path]::GetFullPath('$(RepoRoot)/'))</RepoRoot>

    <_RemoveProps>Projects;Restore;QuietRestore;QuietRestoreBinaryLog;Build;Rebuild;Deploy;Test;IntegrationTest;PerformanceTest;Pack;Sign;Publish;Execute</_RemoveProps>
    <_OriginalProjectsValue>$(Projects)</_OriginalProjectsValue>
  </PropertyGroup>

  <Import Project="RepoLayout.props"/>

  <!-- Allow for repo specific Build properties such as the list of Projects to build -->
  <Import Project="$(RepositoryEngineeringDir)Build.props" Condition="Exists('$(RepositoryEngineeringDir)Build.props')" />

  <PropertyGroup>
    <_ProjectsPropertyWasUpdatedInBuildProps Condition="'$(_OriginalProjectsValue)' != '$(Projects)'">true</_ProjectsPropertyWasUpdatedInBuildProps>
  </PropertyGroup>

  <ItemGroup Condition="'$(Projects)' != ''">
    <!-- Copy the original list so we can log diagnostics later. -->
    <_OriginalProjectToBuild Include="@(ProjectToBuild)" />
    <!-- Setting 'Projects' overrides the ProjectToBuild list. -->
    <ProjectToBuild Remove="@(ProjectToBuild)" />
    <ProjectToBuild Include="$(Projects)" />
  </ItemGroup>

  <!--
    Default values.
  -->
  <!-- If Projects is unspecified and ProjectToBuild was not set via Build.props, fallback to building .sln files in the repo root. -->
  <ItemGroup Condition="'@(ProjectToBuild)' == ''">
    <ProjectToBuild Include="$(RepoRoot)*.sln" />
  </ItemGroup>

  <ItemGroup Condition="'$(SdkTaskProjects)' != ''">
    <!-- SdkTaskProjects and Projects are unlikely to define the same "_SolutionBuildTargets".  If SdkTaskProjects are defined
         ignore Projects, these groups are mutually exclusive -->
    <ProjectToBuild Remove="@(ProjectToBuild)" />
    <_SdkTaskProject Include="$(SdkTaskProjects)"/>
    <!-- SdkTaskProjects are in the Arcade SDK, the user only knows the name of the projects, not the full path, so fully
         qualify the path with 'MSBuildThisFileDirectory' -->
    <ProjectToBuild Include="@(_SdkTaskProject->'$(MSBuildThisFileDirectory)%(Identity)')" />
  </ItemGroup>

  <PropertyGroup>
    <_PublishToBlobStorage>false</_PublishToBlobStorage>
    <_PublishToBlobStorage Condition="'$(DotNetPublishToBlobFeed)' == 'true'">true</_PublishToBlobStorage>

    <_DotNetOutputBlobFeedDir>$(DotNetOutputBlobFeedDir)</_DotNetOutputBlobFeedDir>
    <_DotNetOutputBlobFeedDir Condition="'$(_DotNetOutputBlobFeedDir)' != '' and !HasTrailingSlash('$(_DotNetOutputBlobFeedDir)')">$(_DotNetOutputBlobFeedDir)\</_DotNetOutputBlobFeedDir>
  </PropertyGroup>

  <Target Name="Execute">
    <Error Text="No projects were found to build. Either the 'Projects' property or 'ProjectToBuild' item group must be specified." Condition="'@(ProjectToBuild)' == ''"/>
    <Error Text="Property 'RepoRoot' must be specified" Condition="'$(_RepoRootOriginal)' == ''"/>
    <Error Text="File 'global.json' must exist in directory specified by RepoRoot: '$(_RepoRootOriginal)'" Condition="'$(_RepoRootOriginal)' != '' and !Exists('$(RepoRoot)global.json')"/>
    <Error Text="Property 'Execute' only applies to 'SdkTaskProjects' but no 'SdkTaskProjects' are defined" Condition="'$(Execute)' == 'true' and '$(SdkTaskProjects)' == ''" />
    <Error Text="The 'Projects' property should not be set in $(RepositoryEngineeringDir)Build.props. This property is intended for use by the build.ps1/sh scripts only. Use the 'ProjectToBuild' item group instead in Build.props to customize the list of projects." Condition="'$(_ProjectsPropertyWasUpdatedInBuildProps)' == 'true'" />

    <Message Importance="Normal" Text="ProjectToBuild was overriden by the 'Projects' property." Condition="'@(_OriginalProjectToBuild)' != ''" />

    <PropertyGroup>
      <_MSBuildCmd Condition="'$(MSBuildRuntimeType)' != 'Core'">"$(MSBuildBinPath)\MSBuild.exe" /nodeReuse:false</_MSBuildCmd>
      <_MSBuildCmd Condition="'$(MSBuildRuntimeType)' == 'Core'">"$(DotNetTool)" msbuild</_MSBuildCmd>
    </PropertyGroup>

    <PropertyGroup>
      <_QuietRestore>false</_QuietRestore>
      <_QuietRestore Condition="'$(ContinuousIntegrationBuild)' != 'true' and '$(QuietRestore)' == 'true'">true</_QuietRestore>

      <!--
        Do not restore toolset tools when building from source.
        The tools are not needed and not all of them are actually available.
      -->
      <_RestoreTools>false</_RestoreTools>
      <_RestoreTools Condition="'$(Restore)' == 'true' and '$(DotNetBuildFromSource)' != 'true'">true</_RestoreTools>
    </PropertyGroup>

    <ItemGroup>
      <_SolutionBuildTargets Include="Rebuild" Condition="'$(Rebuild)' == 'true'" />
      <_SolutionBuildTargets Include="Build" Condition="'$(Build)' == 'true' and '$(Rebuild)' != 'true'" />
      <!-- Deploy target is set up to chain after Build so that F5 in VS works. -->
      <_SolutionBuildTargets Include="Test" Condition="'$(Test)' == 'true'" />
      <!-- Pack before running integration and performance tests so that these tests can test packages produced by the repo. -->
      <_SolutionBuildTargets Include="Pack" Condition="'$(Pack)' == 'true'" />
      <_SolutionBuildTargets Include="IntegrationTest" Condition="'$(IntegrationTest)' == 'true'" />
      <_SolutionBuildTargets Include="PerformanceTest" Condition="'$(PerformanceTest)' == 'true'" />
      <!-- Used for sdk projects to perform some task -->
      <_SolutionBuildTargets Include="Execute" Condition="'$(Execute)' == 'true' and '$(SdkTaskProjects)' != ''" />
    </ItemGroup>

    <ItemGroup>
      <_CommonProps Include="Configuration=$(Configuration)"/>
      <_CommonProps Include="ContinuousIntegrationBuild=$(ContinuousIntegrationBuild)"/>
      <_CommonProps Include="RepoRoot=$(RepoRoot)"/>
      <_CommonProps Include="VersionsPropsPath=$(VersionsPropsPath)"/>
      <!--
        When building from source we suppress restore for projects that set ExcludeFromSourceBuild=true.
        NuGet Restore task reports a warning for such projects, which we suppress here.
      -->
      <_CommonProps Include="DisableWarnForInvalidRestoreProjects=true" Condition="'$(DotNetBuildFromSource)' == 'true'"/>

      <!--
        C++ projects expect VCTargetsPath property to be set. MSBuild generates this property to solution
        metaproject when solution is build directly, but doesn't do so when the solution is built using MSBuild task.
      -->
      <_CommonProps Include="VCTargetsPath=$([MSBuild]::ValueOrDefault('$(VCTargetsPath)', '$([MSBuild]::GetVsInstallRoot())\Common7\IDE\VC\VCTargets\'))" Condition="'$(MSBuildRuntimeType)' != 'Core'"/>
    </ItemGroup>

    <ItemGroup Condition="$(_RestoreTools)">
      <_RestoreToolsProps Include="@(_CommonProps)"/>
      <_RestoreToolsProps Include="BaseIntermediateOutputPath=$(ArtifactsToolsetDir)Common"/>
      <_RestoreToolsProps Include="ExcludeRestorePackageImports=true"/>
      <_RestoreToolsProps Include="PublishingToBlobStorage=$(_PublishToBlobStorage)"/>
    </ItemGroup>

    <ItemGroup>
      <_PublishProps Include="@(_CommonProps)"/>
      <_PublishProps Include="AzureFeedUrl=$(DotNetPublishBlobFeedUrl)" Condition="$(_PublishToBlobStorage)" />
      <_PublishProps Include="AzureAccountKey=$(DotNetPublishBlobFeedKey)" Condition="$(_PublishToBlobStorage)" />
      <_PublishProps Include="DotNetOutputBlobFeedDir=$(_DotNetOutputBlobFeedDir)" Condition="'$(_DotNetOutputBlobFeedDir)' != ''" />
    </ItemGroup>

    <ItemGroup>
      <_SolutionBuildProps Include="@(_CommonProps)"/>
      <_SolutionBuildProps Include="__DeployProjectOutput=$(Deploy)" Condition="'$(Deploy)' != ''"/>
    </ItemGroup>

    <ItemGroup>
      <_SolutionBuildPropsArgs Include="@(_SolutionBuildProps->'/p:%(Identity)\')" Condition="$([MSBuild]::ValueOrDefault(%(_SolutionBuildProps.Identity), '').EndsWith('\'))" />
      <_SolutionBuildPropsArgs Include="@(_SolutionBuildProps->'/p:%(Identity)')" Condition="!$([MSBuild]::ValueOrDefault(%(_SolutionBuildProps.Identity), '').EndsWith('\'))" />
      <_RestoreToolsPropArgs Include="@(_RestoreToolsProps->'/p:%(Identity)\')" Condition="$([MSBuild]::ValueOrDefault(%(_RestoreToolsProps.Identity), '').EndsWith('\'))" />
      <_RestoreToolsPropArgs Include="@(_RestoreToolsProps->'/p:%(Identity)')" Condition="!$([MSBuild]::ValueOrDefault(%(_RestoreToolsProps.Identity), '').EndsWith('\'))" />
    </ItemGroup>

    <PropertyGroup>
      <_SolutionBuildPropsCmdLine>"@(_SolutionBuildPropsArgs, '" "')"</_SolutionBuildPropsCmdLine>
      <_RestoreToolsPropsCmdLine>"@(_RestoreToolsPropArgs, '" "')"</_RestoreToolsPropsCmdLine>
    </PropertyGroup>

    <PropertyGroup Condition="'$(QuietRestoreBinaryLog)' == 'true'">
      <_SolutionBuildPropsCmdLine>$(_SolutionBuildPropsCmdLine) /bl:"$(ArtifactsLogDir)RestoreRepoTools.binlog"</_SolutionBuildPropsCmdLine>
      <_RestoreToolsPropsCmdLine>$(_RestoreToolsPropsCmdLine) /bl:"$(ArtifactsLogDir)Restore.binlog"</_RestoreToolsPropsCmdLine>
    </PropertyGroup>

    <ItemGroup>
      <!-- Find any ProjectToBuild items that are not .sln. We don't currently support mixing .sln with other types. We could make it work, but don't have a customer for it yet. -->
      <_ProjectToBuildExtension Include="%(ProjectToBuild.Extension)" Condition="'%(ProjectToBuild.Extension)' != '' and '%(ProjectToBuild.Extension)' != '.sln' " />
    </ItemGroup>

    <PropertyGroup>
      <!-- Normalize paths to avoid false warnings by NuGet about missing project references. -->
      <ProjectToBuildList>@(ProjectToBuild->'%(FullPath)')</ProjectToBuildList>
      <_BuildSolutions>@(ProjectToBuild->AnyHaveMetadataValue('Extension', '.sln'))</_BuildSolutions>
      <RestoreUsingNuGetTargets Condition="'$(RestoreUsingNuGetTargets)' == '' AND '$(_BuildSolutions)' == 'false'">true</RestoreUsingNuGetTargets>
    </PropertyGroup>

    <Error Condition="'$(_BuildSolutions)' == 'true' and '@(_ProjectToBuildExtension)' != '' "
           Text="Mixing .sln and other project formats in ProjectToBuild is not supported." />

    <!--
      Workaround for https://github.com/NuGet/Home/issues/4695.
      We launch a new msbuild process to restore.
    -->
    <Message Text="Restoring packages ..." Importance="high" Condition="'$(Restore)' == 'true' and '$(_QuietRestore)' == 'true'" />

    <MakeDir Directories="$(ArtifactsLogDir)" Condition="'$(Restore)' == 'true' and '$(_QuietRestore)' == 'true'" />

    <Exec Command='$(_MSBuildCmd) "$(MSBuildProjectDirectory)\Tools.proj" /nologo /m /v:quiet /t:Restore $(_RestoreToolsPropsCmdLine)'
          Condition="'$(_RestoreTools)' == 'true' and '$(_QuietRestore)' == 'true'" StandardOutputImportance="normal" />

    <Exec Command='$(_MSBuildCmd) "@(ProjectToBuild)" /nologo /m /v:quiet /t:Restore $(_SolutionBuildPropsCmdLine) /p:__BuildPhase=SolutionRestore'
          Condition="'$(RestoreUsingNuGetTargets)' != 'true' and '$(Restore)' == 'true' and '$(_QuietRestore)' == 'true'" StandardOutputImportance="normal" />

    <Exec Command='$(_MSBuildCmd) "$(NuGetRestoreTargets)" "/p:RestoreGraphProjectInput:$(ProjectToBuildList)" /nologo /m /v:quiet /t:Restore $(_SolutionBuildPropsCmdLine) /p:__BuildPhase=SolutionRestore'
          Condition="'$(RestoreUsingNuGetTargets)' == 'true' and '$(Restore)' == 'true' and '$(_QuietRestore)' == 'true'" StandardOutputImportance="normal" />

    <!--
      Restore built-in tools.
    -->
    <MSBuild Projects="Tools.proj"
             Targets="Restore"
             Properties="@(_RestoreToolsProps)"
             Condition="'$(_RestoreTools)' == 'true' and '$(_QuietRestore)' != 'true'"/>

    <!--
      Run solution restore separately from the other targets, in a different build phase.
      Since restore brings in new .props and .targets files we need to rerun evaluation.

      Note: msbuild caches the metaproject for the solution (see https://github.com/Microsoft/msbuild/issues/1695)
      We invalidate the cache by changing the value of __BuildPhase property.
    -->
    <MSBuild Projects="@(ProjectToBuild)"
             Properties="@(_SolutionBuildProps);__BuildPhase=SolutionRestore"
             RemoveProperties="$(_RemoveProps)"
             Targets="Restore"
             BuildInParallel="true"
             Condition="'$(RestoreUsingNuGetTargets)' != 'true' and '$(SdkTaskProjects)' == '' and '$(Restore)' == 'true' and '$(_QuietRestore)' != 'true'"/>

    <!--
      Workaround for https://github.com/NuGet/Home/issues/7648.
      Invoke restore using NuGet.targets directly. This avoids duplicate calls to RestoreTask and race conditions on writing restore results to disk.
    -->
    <MSBuild Projects="$(NuGetRestoreTargets)"
             Properties="@(_SolutionBuildProps);RestoreGraphProjectInput=$(ProjectToBuildList);__BuildPhase=SolutionRestore"
             RemoveProperties="$(_RemoveProps)"
             Targets="Restore"
             Condition="'$(RestoreUsingNuGetTargets)' == 'true' and '$(SdkTaskProjects)' == '' and '$(Restore)' == 'true' and '$(_QuietRestore)' != 'true'"/>

    <!--
      Build solution.
    -->
    <MSBuild Projects="@(ProjectToBuild)"
             Properties="@(_SolutionBuildProps);__BuildPhase=SolutionBuild"
             RemoveProperties="$(_RemoveProps)"
             Targets="@(_SolutionBuildTargets)"
             BuildInParallel="true"
             Condition="'@(_SolutionBuildTargets)' != ''" />

    <MSBuild Projects="AfterSolutionBuild.proj"
             Properties="@(_CommonProps)"
             Targets="@(_SolutionBuildTargets)"
             Condition="'$(SdkTaskProjects)' == ''" />

    <!--
      Sign artifacts.
    -->
    <MSBuild Projects="Sign.proj"
             Properties="@(_CommonProps)"
             Targets="Sign"
             Condition="'$(Sign)' == 'true'"/>

    <MSBuild Projects="AfterSigning.proj"
             Properties="@(_CommonProps)"
             Targets="@(_SolutionBuildTargets)"
             Condition="'$(SdkTaskProjects)' == ''" />

    <MSBuild Projects="Publish.proj"
             Properties="@(_PublishProps)"
             Targets="Publish"
             Condition="'$(Publish)' == 'true'"/>
  </Target>
</Project>
