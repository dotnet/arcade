<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>

  <Target Name="RunTests"
          Outputs="%(TestToRun.ResultsStdOutPath)"
          Condition="'$(SkipTests)' != 'true' and '@(TestToRun)' != ''">

    <Error Text="UseVSTestRunner property shouldn't be used when using Microsoft.Testing.Platform" Condition="'$(EnableMSTestRunner)' == 'true' OR '$(EnableNUnitRunner)' == 'true' OR '$(UseMicrosoftTestingPlatformRunner)' == 'true'" File="VSTest" />

    <PropertyGroup>
      <_TestEnvironment>%(TestToRun.EnvironmentDisplay)</_TestEnvironment>
      <_TestAssembly>%(TestToRun.Identity)</_TestAssembly>
      <_TestRuntime>%(TestToRun.TestRuntime)</_TestRuntime>
      <_TestTimeout>%(TestToRun.TestTimeout)</_TestTimeout>
      <_TestRunnerAdditionalArguments>%(TestToRun.TestRunnerAdditionalArguments)</_TestRunnerAdditionalArguments>

      <!-- Always use net472 for desktop to enable displaying source location from Portable PDBs in stack traces -->
      <_TestRunnerTargetFramework>net472</_TestRunnerTargetFramework>
      <_TestRunnerTargetFramework Condition="'$(_TestRuntime)' == 'Core'">netcoreapp2.0</_TestRunnerTargetFramework>
      <_TestRunnerTargetFramework Condition="%(TestToRun.TargetFramework) == 'netcoreapp1.1' or %(TestToRun.TargetFramework) == 'netcoreapp1.0'">netcoreapp1.0</_TestRunnerTargetFramework>

      <_TargetDir>$([System.IO.Path]::GetDirectoryName('$(_TestAssembly)'))\</_TargetDir>

      <_TestResultDirectory>$([System.IO.Path]::GetDirectoryName('%(TestToRun.ResultsTrxPath)'))</_TestResultDirectory>
      <_TestResultTrxFileName>$([System.IO.Path]::GetFileName('%(TestToRun.ResultsTrxPath)'))</_TestResultTrxFileName>
      <_TestResultHtmlFileName>$([System.IO.Path]::GetFileName('%(TestToRun.ResultsHtmlPath)'))</_TestResultHtmlFileName>

      <_TestRunnerCommand>&quot;$(DotNetTool)&quot; test $(_TestAssembly) --logger:"console%3Bverbosity=normal" --logger:"trx%3BLogFileName=$(_TestResultTrxFileName)" --logger:"html%3BLogFileName=$(_TestResultHtmlFileName)" "--ResultsDirectory:$(_TestResultDirectory)" "--Framework:%(TestToRun.TargetFrameworkIdentifier),Version=%(TestToRun.TargetFrameworkVersion)"</_TestRunnerCommand>
      <_TestRunnerCommand Condition="'%(TestToRun.TestRunSettingsFile)' != ''">$(_TestRunnerCommand) "--settings:%(TestToRun.TestRunSettingsFile)"</_TestRunnerCommand>
      <_TestRunnerCommand Condition="'%(TestToRun.CollectCoverage)' == 'true'">$(_TestRunnerCommand) --collect:"XPlat Code Coverage"</_TestRunnerCommand>
      <_TestRunnerCommand Condition="'$(_TestRunnerAdditionalArguments)' != ''">$(_TestRunnerCommand) $(_TestRunnerAdditionalArguments)</_TestRunnerCommand>

      <!-- 
        Redirect std output of the runner.
      -->
      <_TestRunnerCommand Condition="'$(TestCaptureOutput)' != 'false'">$(_TestRunnerCommand) >> "%(TestToRun.ResultsStdOutPath)" 2>&amp;1</_TestRunnerCommand>
    </PropertyGroup>

    <ItemGroup>
      <_OutputFiles Include="%(TestToRun.ResultsTrxPath)" />
      <_OutputFiles Include="%(TestToRun.ResultsHtmlPath)" />
      <_OutputFiles Include="%(TestToRun.ResultsStdOutPath)" />
    </ItemGroup>

    <MakeDir Directories="@(_OutputFiles->'%(RootDir)%(Directory)')"/>
    <Delete Files="@(_OutputFiles)" />

    <!--
      Add command line to the log.
    -->
    <Exec Command="echo === COMMAND LINE === > %(TestToRun.ResultsStdOutPath)
                   echo $(_TestRunnerCommand) >> %(TestToRun.ResultsStdOutPath)" />

    <Message Text="Running tests: $(_TestAssembly) [$(_TestEnvironment)]" Importance="high"/>
    <Exec Command='$(_TestRunnerCommand)'
          LogStandardErrorAsError="false"
          WorkingDirectory="$(_TargetDir)"
          IgnoreExitCode="true"
          Timeout="$(_TestTimeout)"
          ContinueOnError="WarnAndContinue">
      <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
    </Exec>

    <!--
      Report test status.
    -->
    <Message Text="Tests succeeded: $(_TestAssembly) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '0'" Importance="high" />

    <PropertyGroup>
      <_ResultsFileToDisplay>%(TestToRun.ResultsHtmlPath)</_ResultsFileToDisplay>
      <_ResultsFileToDisplay Condition="!Exists('$(_ResultsFileToDisplay)')">%(TestToRun.ResultsStdOutPath)</_ResultsFileToDisplay>
    </PropertyGroup>

    <!-- 
      Ideally we would set ContinueOnError="ErrorAndContinue" so that when a test fails in multi-targeted test project
      we'll still run tests for all target frameworks. ErrorAndContinue doesn't work well on Linux though: https://github.com/Microsoft/msbuild/issues/3961.
    -->
    <Error Text="Tests failed: $(_ResultsFileToDisplay) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0'" File="VSTest" />

    <ItemGroup>
      <FileWrites Include="@(_OutputFiles)"/>
    </ItemGroup>
  </Target>

  <!-- Generate .runsettings file with code coverage configuration when code coverage is enabled -->
  <Target Name="_GenerateCodeCoverageRunSettings"
          BeforeTargets="_AddVSTestSpecificSettingsToInnerBuild"
          Condition="'$(CollectCoverage)' == 'true' and '$(TestRunSettingsFile)' == ''">
    
    <PropertyGroup>
      <_GeneratedRunSettingsFile>$(ArtifactsObjDir)$(MSBuildProjectName).runsettings</_GeneratedRunSettingsFile>
      
      <!-- Build Include filter -->
      <_CoverageIncludeFilter Condition="'$(CoverageInclude)' != ''">$([System.String]::new('$(CoverageInclude)').Replace(';',','))</_CoverageIncludeFilter>
      
      <!-- Build Exclude filter -->
      <_CoverageExcludeFilter Condition="'$(CoverageExclude)' != ''">$([System.String]::new('$(CoverageExclude)').Replace(';',','))</_CoverageExcludeFilter>
      
      <!-- Build IncludeByFile filter -->
      <_CoverageIncludeByFileFilter Condition="'$(CoverageIncludeByFile)' != ''">$([System.String]::new('$(CoverageIncludeByFile)').Replace(';',','))</_CoverageIncludeByFileFilter>
      
      <!-- Build ExcludeByFile filter -->
      <_CoverageExcludeByFileFilter Condition="'$(CoverageExcludeByFile)' != ''">$([System.String]::new('$(CoverageExcludeByFile)').Replace(';',','))</_CoverageExcludeByFileFilter>
      
      <!-- Build ExcludeByAttribute filter -->
      <_CoverageExcludeByAttributeFilter Condition="'$(CoverageExcludeByAttribute)' != ''">$([System.String]::new('$(CoverageExcludeByAttribute)').Replace(';',','))</_CoverageExcludeByAttributeFilter>
    </PropertyGroup>
    
    <!-- Generate the runsettings file content dynamically -->
    <ItemGroup>
      <_RunSettingsLines Include="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" />
      <_RunSettingsLines Include="&lt;RunSettings&gt;" />
      <_RunSettingsLines Include="  &lt;DataCollectionRunSettings&gt;" />
      <_RunSettingsLines Include="    &lt;DataCollectors&gt;" />
      <_RunSettingsLines Include="      &lt;DataCollector friendlyName=&quot;XPlat code coverage&quot;&gt;" />
      <_RunSettingsLines Include="        &lt;Configuration&gt;" />
      <_RunSettingsLines Include="          &lt;Format&gt;$(_CodeCoverageFormat)&lt;/Format&gt;" />
      <_RunSettingsLines Include="          &lt;OutputPath&gt;$(_CodeCoverageOutputPath)&lt;/OutputPath&gt;" />
      <_RunSettingsLines Include="          &lt;DeterministicReport&gt;$(_CoverageDeterministic)&lt;/DeterministicReport&gt;" />
      <_RunSettingsLines Include="          &lt;Include&gt;$(_CoverageIncludeFilter)&lt;/Include&gt;" Condition="'$(_CoverageIncludeFilter)' != ''" />
      <_RunSettingsLines Include="          &lt;Exclude&gt;$(_CoverageExcludeFilter)&lt;/Exclude&gt;" Condition="'$(_CoverageExcludeFilter)' != ''" />
      <_RunSettingsLines Include="          &lt;ExcludeByFile&gt;$(_CoverageExcludeByFileFilter)&lt;/ExcludeByFile&gt;" Condition="'$(_CoverageExcludeByFileFilter)' != ''" />
      <_RunSettingsLines Include="          &lt;IncludeTestAssembly&gt;false&lt;/IncludeTestAssembly&gt;" />
      <_RunSettingsLines Include="          &lt;ExcludeByAttribute&gt;$(_CoverageExcludeByAttributeFilter)&lt;/ExcludeByAttribute&gt;" Condition="'$(_CoverageExcludeByAttributeFilter)' != ''" />
      <_RunSettingsLines Include="          &lt;SkipAutoProps&gt;true&lt;/SkipAutoProps&gt;" />
      <_RunSettingsLines Include="          &lt;DoesNotReturnAttribute&gt;DoesNotReturnAttribute&lt;/DoesNotReturnAttribute&gt;" />
      <_RunSettingsLines Include="          &lt;SingleHit&gt;false&lt;/SingleHit&gt;" />
      <_RunSettingsLines Include="          &lt;UseSourceLink&gt;true&lt;/UseSourceLink&gt;" />
      <_RunSettingsLines Include="        &lt;/Configuration&gt;" />
      <_RunSettingsLines Include="      &lt;/DataCollector&gt;" />
      <_RunSettingsLines Include="    &lt;/DataCollectors&gt;" />
      <_RunSettingsLines Include="  &lt;/DataCollectionRunSettings&gt;" />
      <_RunSettingsLines Include="&lt;/RunSettings&gt;" />
    </ItemGroup>
    
    <MakeDir Directories="$(ArtifactsObjDir)" />
    <WriteLinesToFile File="$(_GeneratedRunSettingsFile)" 
                      Lines="@(_RunSettingsLines)" 
                      Overwrite="true" 
                      WriteOnlyWhenDifferent="true" />
    
    <PropertyGroup>
      <TestRunSettingsFile>$(_GeneratedRunSettingsFile)</TestRunSettingsFile>
    </PropertyGroup>
    
    <ItemGroup>
      <FileWrites Include="$(_GeneratedRunSettingsFile)" />
    </ItemGroup>
  </Target>

  <!-- Set VSTest specific settings in a target so that the TestToRun item can read from it and customers can set it at any time during evaluation. -->
  <Target Name="_AddVSTestSpecificSettingsToInnerBuild" BeforeTargets="_InnerGetTestsToRun">
    <PropertyGroup>
      <TestRunSettingsFile Condition="'$(TestRunSettingsFile)' == ''">$(VSTestRunSettingsFile)</TestRunSettingsFile>
      
      <!-- Set code coverage output format and path for coverlet -->
      <_CodeCoverageFormat Condition="'$(CollectCoverage)' == 'true'">$(CodeCoverageFormat)</_CodeCoverageFormat>
      <_CodeCoverageOutputPath Condition="'$(CollectCoverage)' == 'true'">$(CodeCoverageOutputDirectory)</_CodeCoverageOutputPath>
      <_CoverageDeterministic Condition="'$(CollectCoverage)' == 'true'">$(CoverageDeterministic)</_CoverageDeterministic>
    </PropertyGroup>
  </Target>

</Project>
