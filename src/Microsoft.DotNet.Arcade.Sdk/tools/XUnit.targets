<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsTestProject)' == 'true'">
    <AutoGenerateBindingRedirects Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">true</AutoGenerateBindingRedirects>
    <_TestTargetName Condition="'$(TargetFrameworks)' == ''">InnerTest</_TestTargetName>
    <_TestTargetName Condition="'$(TargetFrameworks)' != ''">OuterTest</_TestTargetName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TestArchitectures)' == ''">
    <TestArchitectures>$(PlatformTarget)</TestArchitectures>
    <TestArchitectures Condition="'$(PlatformTarget)' == '' or '$(PlatformTarget)' == 'AnyCpu'">x64</TestArchitectures>
  </PropertyGroup>

  <Target Name="Test" DependsOnTargets="$(_TestTargetName)" Condition="'$(IsUnitTestProject)' == 'true' or '$(IsPerformanceTestProject)' == 'true'" />
  <Target Name="IntegrationTest" DependsOnTargets="$(_TestTargetName)" Condition="'$(IsIntegrationTestProject)' == 'true'" />

  <ItemGroup>
    <_TestArchitectureItems Include="$(TestArchitectures)" />
  </ItemGroup>

  <!-- Using Inputs/Outputs just to loop over test architectures -->
  <Target Name="InnerTest"
          Inputs="*%(_TestArchitectureItems.Identity)"
          Outputs="*%(_TestArchitectureItems.Identity)"
          Returns="@(_FailedTestRuns)"
          Condition="$(TargetFramework.StartsWith('netcoreapp')) or '$(OS)' == 'Windows_NT' or '$(MSBuildRuntimeType)' == 'Mono'">

    <PropertyGroup>
      <_TestArchitecture>%(_TestArchitectureItems.Identity)</_TestArchitecture>
      <_TestEnvironment>$(TargetFramework)|$(_TestArchitecture)</_TestEnvironment>
      <_TestOutPathNoExt>$(ArtifactsTestResultsDir)$(MSBuildProjectName)_$(TargetFramework)_$(_TestArchitecture)</_TestOutPathNoExt>
      <_TestStdOutPath>$(_TestOutPathNoExt).log</_TestStdOutPath>
      <_TestResultsXmlPath>$(_TestOutPathNoExt).xml</_TestResultsXmlPath>
      <_TestResultsHtmlPath>$(_TestOutPathNoExt).html</_TestResultsHtmlPath>
      <_RunOnCore>false</_RunOnCore>
      <_RunOnCore Condition="$(TargetFramework.StartsWith('netcoreapp'))">true</_RunOnCore>
    </PropertyGroup>

    <Error Text="Architecture specified in TestArchitectures is not supported: '$(_TestArchitecture)'" File="XUnit"
           Condition="'$(_TestArchitecture)' != 'x64' and ('$(_TestArchitecture)' != 'x86' or $(_RunOnCore))"/>

    <PropertyGroup Condition="'$(_RunOnCore)' == 'true'">
      <_TargetFileNameNoExt>$([System.IO.Path]::GetFileNameWithoutExtension('$(TargetFileName)'))</_TargetFileNameNoExt>
      <_CoreRuntimeConfigPath>$(TargetDir)$(_TargetFileNameNoExt).runtimeconfig.json</_CoreRuntimeConfigPath>
      <_CoreDepsPath>$(TargetDir)$(_TargetFileNameNoExt).deps.json</_CoreDepsPath>

      <!-- TODO: xUnit doesn't support -html on CoreCLR currently (see https://github.com/xunit/xunit/issues/977) -->
      <_TestRunnerCommand>"$(DotNetTool)" exec --depsfile "$(_CoreDepsPath)" --runtimeconfig "$(_CoreRuntimeConfigPath)" "$(NuGetPackageRoot)xunit.runner.console/$(XUnitVersion)/tools/netcoreapp1.0/xunit.console.dll" "$(TargetPath)" -noautoreporters -xml "$(_TestResultsXmlPath)" $(XUnitRunnerAdditionalArguments)</_TestRunnerCommand>
      <_TestResultsDisplayPath>$(_TestStdOutPath)</_TestResultsDisplayPath>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_RunOnCore)' != 'true'">
      <_XUnitConsoleExe>xunit.console.exe</_XUnitConsoleExe>
      <_XUnitConsoleExe Condition="'$(_TestArchitecture)' == 'x86'">xunit.console.x86.exe</_XUnitConsoleExe>
      <_TestRunnerCommand>"$(NuGetPackageRoot)xunit.runner.console\$(XUnitVersion)\tools\net452\$(_XUnitConsoleExe)" "$(TargetPath)" -noshadow -xml "$(_TestResultsXmlPath)" -html "$(_TestResultsHtmlPath)" $(XUnitRunnerAdditionalArguments)</_TestRunnerCommand>
      <_TestResultsDisplayPath>$(_TestResultsHtmlPath)</_TestResultsDisplayPath>
    </PropertyGroup>

    <MakeDir Directories="$(ArtifactsTestResultsDir)"/>
    <Delete Files="$(_TestOutPathNoExt).*" />

    <Message Text="Running tests: $(TargetPath) [$(_TestEnvironment)]" Importance="high"/>

    <!-- Note that xUnit outputs failure info to both STDOUT (stack trace, message) and STDERR (failed test name) -->
    <Exec Command='$(_TestRunnerCommand) > "$(_TestStdOutPath)" 2>&amp;1'
          LogStandardErrorAsError="false"
          WorkingDirectory="$(OutDir)"
          IgnoreExitCode="true">

      <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
    </Exec>

    <WriteLinesToFile File="$(_TestStdOutPath)" Overwrite="false" Lines=";=== COMMAND LINE ===;$(_TestRunnerCommand)" />

    <ItemGroup>
      <_FailedTestRuns Include="$(_TestEnvironment)" Condition="'$(_TestErrorCode)' != '0'" />
    </ItemGroup>

    <Message Text="Tests succeeded: $(TargetPath) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '0'" Importance="high" />
    <Warning Text="$(_TestResultsDisplayPath) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0' and '$(TargetFrameworks)' != ''" File="XUnit" />
    <Error Text="$(_TestResultsDisplayPath) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0' and '$(TargetFrameworks)' == ''" File="XUnit" />
  </Target>

  <Target Name="OuterTest" Returns="@(InnerOutput)">
    <ItemGroup>
      <_TargetFramework Include="$(TargetFrameworks)" />
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFile)"
             Condition="'$(TargetFrameworks)' != ''"
             Targets="InnerTest"
             Properties="TargetFramework=%(_TargetFramework.Identity)">
      <Output ItemName="_FailedTestRuns" TaskParameter="TargetOutputs" />
    </MSBuild>

    <Error Text="Tests failed on platforms: @(_FailedTestRuns, ', ')" Condition="'@(_FailedTestRuns)' != ''" File="XUnit" />
  </Target>

  <!-- Workaround for https://github.com/xunit/xunit/issues/1651 -->
  <ItemGroup>
    <None Remove="$(NuGetPackageRoot)xunit.runner.visualstudio\$(XUnitRunnerVisualStudioVersion)\build\net20\..\_common\xunit.abstractions.dll" />
  </ItemGroup>

</Project>
