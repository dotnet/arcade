<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <PropertyGroup>
    <DeployProjectOutput Condition="'$(DeployProjectOutput)' == ''">$(__DeployProjectOutput)</DeployProjectOutput>
    
    <!-- Run Deploy step by default when the solution is build directly via msbuild (from command line or VS). -->
    <DeployProjectOutput Condition="'$(DeployProjectOutput)' == ''">true</DeployProjectOutput>
  </PropertyGroup>

  <!-- Default empty deploy target. -->
  <Target Name="Deploy" AfterTargets="Build" Condition="'$(DeployProjectOutput)' == 'true'" />

  <PropertyGroup>
    <!--
      Unless specified otherwise project is assumed to produce artifacts (assembly, package, vsix, etc.) that ship.
      Test projects automatically set IsShipping to false.

      Some projects may produce packages that contain shipping assemblies but the packages themselves do not ship.
      Thes projects shall specify IsShippingPackage=false and leave IsShipping unset (will default to true).

      Targets that need to determine whether an artifact is shipping shall use the artifact specific IsShippingXxx property,
      if available for the kind of artifact they operate on.
    -->
    <IsShipping Condition="'$(IsShipping)' == ''">true</IsShipping>

    <IsShippingAssembly Condition="'$(IsShippingAssembly)' == ''">$(IsShipping)</IsShippingAssembly>
    <IsShippingPackage Condition="'$(IsVisualStudioBuildPackage)' == 'true'">false</IsShippingPackage>
    <IsShippingPackage Condition="'$(IsShippingPackage)' == ''">$(IsShipping)</IsShippingPackage>
    <IsShippingVsix Condition="'$(IsShippingVsix)' == ''">$(IsShipping)</IsShippingVsix>

    <!--
      Set PackageOutputPath based on the IsShippingPackage flag set by projects.
      This distinction allows publishing tools to determine which assets to publish to official channels.

      Visual Studio Build (aka CoreXT) packages are non-shipping packages that are used to insert binaries into an internal 
      Visual Studio repository that builds the product from components. These packages are not standard NuGet packages.
    -->
    <PackageOutputPath Condition="'$(IsShippingPackage)' == 'true'">$(ArtifactsShippingPackagesDir)</PackageOutputPath>
    <PackageOutputPath Condition="'$(IsShippingPackage)' != 'true'">$(ArtifactsNonShippingPackagesDir)</PackageOutputPath>
    <PackageOutputPath Condition="'$(IsVisualStudioBuildPackage)' == 'true'">$(VisualStudioBuildPackagesDir)</PackageOutputPath>

    <IsSwixProject>false</IsSwixProject>
    <IsSwixProject Condition="'$(VisualStudioInsertionComponent)' != '' and '$(IsVsixProject)' != 'true'">true</IsSwixProject>
  </PropertyGroup>

  <!--
    Closed source license must be added to the package. 
    NuGet.org accepts only OSI or FSF approved licenses when using license type expression. 
  -->
  <PropertyGroup Condition="'$(PackageLicenseExpressionInternal)' != '' and '$(IsPackable)' == 'true' and '$(PackageLicenseFile)' == ''">
    <PackageLicenseFile>License.txt</PackageLicenseFile>
  </PropertyGroup>

  <ItemGroup Condition="'$(PackageLicenseExpressionInternal)' != '' and '$(IsPackable)' == 'true'">
    <None Include="$(MSBuildThisFileDirectory)Licenses\$(PackageLicenseExpressionInternal).txt" Pack="true" PackagePath="$(PackageLicenseFile)"/>
  </ItemGroup>

  <!--
    Copyright used for binary assets (assemblies and packages) built by Microsoft must be Microsoft copyright.
    Override any other value the project may set.
  -->
  <PropertyGroup>
    <Copyright>$(CopyrightMicrosoft)</Copyright>
  </PropertyGroup>
</Project>
