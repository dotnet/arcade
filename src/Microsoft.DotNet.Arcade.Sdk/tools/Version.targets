<?xml version="1.0" encoding="utf-8"?>
<!-- All Rights Reserved. Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <!--
    Specification: https://github.com/dotnet/arcade/blob/master/Documentation/Versioning.md

    Properties:
      SemanticVersioningV1        "true" if the Version needs to respect SemVer 1.0. Default is false, which means format following SemVer 2.0.
  -->

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Target Name="_InitializeAssemblyVersion" BeforeTargets="GetAssemblyVersion">
    <Error Text="Invalid format of OfficialBuildId: '$(OfficialBuildId)'" 
           Condition="$(VersionSuffixDateStamp) != '' and ($(VersionSuffixDateStamp.Length) != 5 or $(VersionSuffixBuildOfTheDayPadded.Length) != 2)"/>

    <PropertyGroup Condition="'$(VersionSuffixDateStamp)' != ''">
      <!-- 
        File version has 4 parts and need to increase every official build. This is especially important when building MSIs.

        MAJOR.MINOR.FILEPATCH.FILEREVISION

        MAJOR and MINOR: Specified in the first two parts of VersionPrefix property.
        FILEPATCH: Set to PATCH * 100 + yy. PATCH is specified in the third part of VersionPrefix property.
        FILEREVISION: Set to (50 * mm + dd) * 100 + r. This algorithm makes it easy to parse the month and date from FILEREVISION while staying in the range of a short which is what a version element uses.
      -->

      <_FileMajor>$(VersionPrefix.Split($([System.Convert]::ToString(".").ToCharArray())).GetValue($([System.Convert]::ToInt32(0))))</_FileMajor>
      <_FileMinor>$(VersionPrefix.Split($([System.Convert]::ToString(".").ToCharArray())).GetValue($([System.Convert]::ToInt32(1))))</_FileMinor>

      <!-- patch * 100 + yy -->
      <_FilePatch>$(VersionPrefix.Split($([System.Convert]::ToString(".").ToCharArray())).GetValue($([System.Convert]::ToInt32(2))))</_FilePatch>
      <_FilePatch>$([MSBuild]::Add($([MSBuild]::Multiply($([System.Convert]::ToInt32($(_FilePatch))),$([System.Convert]::ToInt32(100)))), $([System.Convert]::ToInt32($(_BuildNumberYY)))))</_FilePatch>

      <!-- mm * 5000 + dd * 100 + r -->
      <_FileRevision>$([MSBuild]::Add($([MSBuild]::Add($([MSBuild]::Multiply($([System.Convert]::ToInt32($(_BuildNumberMM))), $([System.Convert]::ToInt32(5000)))), $([MSBuild]::Multiply($([System.Convert]::ToInt32($(_BuildNumberDD))), $([System.Convert]::ToInt32(100)))))), $([System.Convert]::ToInt32($(_BuildNumberR)))))</_FileRevision>

      <FileVersion>$(_FileMajor).$(_FileMinor).$(_FilePatch).$(_FileRevision)</FileVersion>
    </PropertyGroup>

    <PropertyGroup Condition="'$(VersionSuffixDateStamp)' == ''">
      <!--
        Set FileVersion to a distinct version that's greater than any shipping version.
        This makes it possible to install binaries produced by a dev build over product binaries,
        provided that the installer only requires higher version. 
      -->
      <FileVersion>42.42.42.42424</FileVersion>

      <!--
        Respect version explicitly set by the project.
        The default .NET Core SDK implementation sets AssemblyVersion from NuGet package version, 
        which we want to override in dev builds.
      -->
      <AssemblyVersion Condition="'$(AssemblyVersion)' == ''">42.42.42.42</AssemblyVersion>
    </PropertyGroup>
  </Target>

</Project>
