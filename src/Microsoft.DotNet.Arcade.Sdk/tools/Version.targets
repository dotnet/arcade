<?xml version="1.0" encoding="utf-8"?>
<!-- All Rights Reserved. Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <!--
    Specification: https://github.com/dotnet/arcade/blob/master/Documentation/Versioning.md

    Properties:
      SemanticVersioningV1        "true" if the Version needs to respect SemVer 1.0. Default is false, which means format following SemVer 2.0.
  -->

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Target Name="_InitializeAssemblyVersion" BeforeTargets="GetAssemblyVersion">
    <Error Text="Invalid format of OfficialBuildId: '$(OfficialBuildId)'"
           Condition="$(VersionSuffixDateStamp) != '' and ($(VersionSuffixDateStamp.Length) != 5 or $(VersionSuffixBuildOfTheDayPadded.Length) != 2)"/>

    <PropertyGroup Condition="'$(VersionSuffixDateStamp)' != ''">
      <!--
        File version has 4 parts and need to increase every official build. This is especially important when building MSIs.

        MAJOR.MINOR.FILEPATCH.FILEREVISION

        MAJOR and MINOR: Specified in the first two parts of VersionPrefix property.
        FILEPATCH: Set to PATCH * 100 + yy. PATCH is specified in the third part of VersionPrefix property.
        FILEREVISION: Set to (50 * mm + dd) * 100 + r. This algorithm makes it easy to parse the month and date from FILEREVISION while staying in the range of a short which is what a version element uses.
      -->

      <_FileMajor>$(VersionPrefix.Split($([System.Convert]::ToString(".").ToCharArray())).GetValue($([System.Convert]::ToInt32(0))))</_FileMajor>
      <_FileMinor>$(VersionPrefix.Split($([System.Convert]::ToString(".").ToCharArray())).GetValue($([System.Convert]::ToInt32(1))))</_FileMinor>

      <!-- patch * 100 + yy -->
      <_FilePatch>$(VersionPrefix.Split($([System.Convert]::ToString(".").ToCharArray())).GetValue($([System.Convert]::ToInt32(2))))</_FilePatch>
      <_FilePatch>$([MSBuild]::Add($([MSBuild]::Multiply($([System.Convert]::ToInt32($(_FilePatch))),$([System.Convert]::ToInt32(100)))), $([System.Convert]::ToInt32($(_BuildNumberYY)))))</_FilePatch>

      <!-- mm * 5000 + dd * 100 + r -->
      <_FileRevision>$([MSBuild]::Add($([MSBuild]::Add($([MSBuild]::Multiply($([System.Convert]::ToInt32($(_BuildNumberMM))), $([System.Convert]::ToInt32(5000)))), $([MSBuild]::Multiply($([System.Convert]::ToInt32($(_BuildNumberDD))), $([System.Convert]::ToInt32(100)))))), $([System.Convert]::ToInt32($(_BuildNumberR)))))</_FileRevision>

      <FileVersion>$(_FileMajor).$(_FileMinor).$(_FilePatch).$(_FileRevision)</FileVersion>
    </PropertyGroup>

    <PropertyGroup Condition="'$(VersionSuffixDateStamp)' == ''">
      <!--
        Set FileVersion to a distinct version that's greater than any shipping version.
        This makes it possible to install binaries produced by a dev build over product binaries,
        provided that the installer only requires higher version.
      -->
      <FileVersion>42.42.42.42424</FileVersion>

      <!--
        Respect version explicitly set by the project.
        The default .NET Core SDK implementation sets AssemblyVersion from NuGet package version,
        which we want to override in dev builds.
      -->
      <AssemblyVersion Condition="'$(AssemblyVersion)' == ''">42.42.42.42</AssemblyVersion>
    </PropertyGroup>
  </Target>

  <!--
    GenerateNativeVersionFile target is a standalone target intended to be pulled into a build once as
    a pre-step before kicking off a native build. It will generate a _version.h or _version.c depending
    on the OS it is targeting.
  -->
  <Target Name="GenerateNativeVersionFile"
          DependsOnTargets="_InitializeAssemblyVersion;InitializeSourceControlInformationFromSourceControlManager">

    <Error Condition="'$(SourceRevisionId)' == ''" Text="SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs." />

    <PropertyGroup>
      <_SourceBuildInfo> %40Commit: $(SourceRevisionId)</_SourceBuildInfo>
    </PropertyGroup>

   <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
      <NativeVersionFile Condition="'$(NativeVersionFile)' == ''">$(ArtifactsObjDir)_version.h</NativeVersionFile>
      <_WindowsFileVersion>$(FileVersion.Replace('.', ','))</_WindowsFileVersion>
      <_Windows_VER_DEBUG>0</_Windows_VER_DEBUG>
      <_Windows_VER_DEBUG Condition="'$(Configuration)'=='Debug'">VS_FF_DEBUG</_Windows_VER_DEBUG>

      <_NativeVersionFileContents>
<![CDATA[
#ifndef VER_COMPANYNAME_STR
#define VER_COMPANYNAME_STR         "Microsoft Corporation"
#endif
#ifndef VER_FILEDESCRIPTION_STR
#define VER_FILEDESCRIPTION_STR     "$(AssemblyName)"
#endif
#ifndef VER_INTERNALNAME_STR
#define VER_INTERNALNAME_STR        VER_FILEDESCRIPTION_STR
#endif
#ifndef VER_ORIGINALFILENAME_STR
#define VER_ORIGINALFILENAME_STR    VER_FILEDESCRIPTION_STR
#endif
#ifndef VER_PRODUCTNAME_STR
#define VER_PRODUCTNAME_STR         "Microsoft\xae .NET Framework"
#endif
#undef VER_PRODUCTVERSION
#define VER_PRODUCTVERSION          $(_WindowsFileVersion)
#undef VER_PRODUCTVERSION_STR
#define VER_PRODUCTVERSION_STR      "$(_WindowsFileVersion)$(_SourceBuildInfo)"
#undef VER_FILEVERSION
#define VER_FILEVERSION             $(_WindowsFileVersion)
#undef VER_FILEVERSION_STR
#define VER_FILEVERSION_STR         "$(_WindowsFileVersion)$(_SourceBuildInfo)"
#ifndef VER_LEGALCOPYRIGHT_STR
#define VER_LEGALCOPYRIGHT_STR      "\xa9 Microsoft Corporation. All rights reserved."
#endif
#ifndef VER_DEBUG
#define VER_DEBUG                   $(_Windows_VER_DEBUG)
#endif
]]>
      </_NativeVersionFileContents>
    </PropertyGroup>

    <!--
      Copy the NativeVersion.rc file next to the version header so that it can be picked
      up and used in the native build along with the version.h file.
    -->
    <Copy SourceFiles="$(MSBuildThisFileDirectory)NativeVersion.rc"
          DestinationFolder="$([System.IO.Path]::GetDirectoryName($(NativeVersionFile)))"
          Condition="'$(OS)' == 'Windows_NT'" />

    <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
      <NativeVersionFile Condition="'$(NativeVersionFile)' == ''">$(ArtifactsObjDir)_version.c</NativeVersionFile>

      <!--
        There isn't a defacto standard for including version information in a native binary on unix so we defined a static
        variable which contains the version information we want which can be retrived by using What(1) or strings+grep.
        See https://github.com/dotnet/coreclr/issues/3133 for further discussion on this approach.
      -->
      <_NativeVersionFileContents>
<![CDATA[
static char sccsid[] __attribute__((used)) = "@(#)Version $(FileVersion)$(_SourceBuildInfo)";
 ]]>
      </_NativeVersionFileContents>
    </PropertyGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(NativeVersionFile)))" />

    <WriteLinesToFile
      File="$(NativeVersionFile)"
      Lines="$(_NativeVersionFileContents.Replace(';', '%3B'))"
      Overwrite="true" />

    <ItemGroup>
      <FileWrites Include="$(NativeVersionFile)" />
    </ItemGroup>
  </Target>

</Project>