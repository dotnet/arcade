<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>

  <!-- OS invariant helper properties for use in the repo's DotNetBuild.props file and here. -->
  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <ArchiveExtension>.zip</ArchiveExtension>
    <FlagParameterPrefix>-</FlagParameterPrefix>
    <ArcadeFalseBoolBuildArg>0</ArcadeFalseBoolBuildArg>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <ArchiveExtension>.tar.gz</ArchiveExtension>
    <FlagParameterPrefix>--</FlagParameterPrefix>
    <ArcadeFalseBoolBuildArg>false</ArcadeFalseBoolBuildArg>
  </PropertyGroup>

  <!-- Repo extensibility point. -->
  <Import Project="$(RepositoryEngineeringDir)DotNetBuild.props" Condition="Exists('$(RepositoryEngineeringDir)DotNetBuild.props')" />
  <!-- Remove the legacy extension point when all repositories updated to Arcade 9 and renamed their SourceBuild.props file. -->
  <Import Project="$(RepositoryEngineeringDir)SourceBuild.props" Condition="Exists('$(RepositoryEngineeringDir)SourceBuild.props')" />

  <PropertyGroup>
    <!--
      Do not use inner-clone in full product source-build, unless explicitly requested,
      i.e. for specific repos, like source-build-externals.
    -->
    <UseInnerClone Condition="'$(UseInnerClone)' == '' and '$(DotNetBuildOrchestrator)' != 'true'">true</UseInnerClone>

    <!-- Prefer abbreviations to avoid long paths (breaks on Windows) -->
    <SourceBuildOutputDir Condition="'$(SourceBuildOutputDir)' == ''">$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'sb'))</SourceBuildOutputDir>
    <CurrentRepoSourceBuildSourceDir>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'src'))</CurrentRepoSourceBuildSourceDir>
    <CurrentRepoSourceBuildSourceDir Condition="'$(UseInnerClone)' != 'true'">$(RepoRoot)</CurrentRepoSourceBuildSourceDir>
    <CurrentRepoSourceBuildPackageCache>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'package-cache'))</CurrentRepoSourceBuildPackageCache>
    <SourceBuildSelfPrebuiltReportDir>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'prebuilt-report'))</SourceBuildSelfPrebuiltReportDir>
    
    <!--
      Keep artifacts/ inside source dir so that ancestor-based file lookups find the inner repo, not
      the outer repo. The inner repo global.json and NuGet.config files may have been modified by
      source-build, and we want projects inside the artifacts/ dir to respect that.

      Inner-clone removal - in VMR use regular artifacts dir.
    -->
    <CurrentRepoSourceBuildArtifactsDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildSourceDir)', 'artifacts'))</CurrentRepoSourceBuildArtifactsDir>
    <CurrentRepoSourceBuildArtifactsLogsDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsDir)', 'log', '$(Configuration)'))</CurrentRepoSourceBuildArtifactsLogsDir>
    <CurrentRepoSourceBuildArtifactsPackagesDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsDir)', 'packages', '$(Configuration)'))</CurrentRepoSourceBuildArtifactsPackagesDir>
    <CurrentRepoSourceBuildArtifactsNonShippingPackagesDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsPackagesDir)', 'NonShipping'))</CurrentRepoSourceBuildArtifactsNonShippingPackagesDir>

    <CurrentRepoSourceBuildNuGetSourceName>source-build-int-nupkg-cache</CurrentRepoSourceBuildNuGetSourceName>

    <PrebuiltBaselineDataFileDefault>$(RepositoryEngineeringDir)SourceBuildPrebuiltBaseline.xml</PrebuiltBaselineDataFileDefault>
    <PrebuiltBaselineDataFile Condition="Exists('$(PrebuiltBaselineDataFileDefault)')">$(PrebuiltBaselineDataFileDefault)</PrebuiltBaselineDataFile>
  </PropertyGroup>

</Project>
