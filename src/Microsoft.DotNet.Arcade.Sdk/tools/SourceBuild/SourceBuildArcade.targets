<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>

  <!-- OS invariant helper properties for use in the repo's DotNetBuild.props file and here. -->
  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <ArchiveExtension>.zip</ArchiveExtension>
    <FlagParameterPrefix>-</FlagParameterPrefix>
    <ArcadeFalseBoolBuildArg>0</ArcadeFalseBoolBuildArg>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <ArchiveExtension>.tar.gz</ArchiveExtension>
    <FlagParameterPrefix>--</FlagParameterPrefix>
    <ArcadeFalseBoolBuildArg>false</ArcadeFalseBoolBuildArg>
  </PropertyGroup>

  <!-- Repo extensibility point. -->
  <Import Project="$(RepositoryEngineeringDir)DotNetBuild.props" Condition="Exists('$(RepositoryEngineeringDir)DotNetBuild.props')" />
  <!-- Remove the legacy extension point when all repositories updated to Arcade 9 and renamed their SourceBuild.props file. -->
  <Import Project="$(RepositoryEngineeringDir)SourceBuild.props" Condition="Exists('$(RepositoryEngineeringDir)SourceBuild.props')" />

  <PropertyGroup>
    <!--
      Do not use inner-clone in full product source-build, unless explicitly requested,
      i.e. for specific repos, like source-build-externals.
    -->
    <UseInnerClone Condition="'$(UseInnerClone)' == '' and '$(DotNetBuildFromSourceFlavor)' != 'Product' and '$(DotNetBuildOrchestrator)' != 'true'">true</UseInnerClone>

    <!-- Do not create intermediate package in full product source-build. -->
    <CreateIntermediatePackage Condition="'$(DotNetBuildFromSourceFlavor)' != 'Product' and '$(DotNetBuildOrchestrator)' != 'true'">true</CreateIntermediatePackage>

    <!-- Prefer abbreviations to avoid long paths (breaks on Windows) -->
    <SourceBuildOutputDir Condition="'$(SourceBuildOutputDir)' == ''">$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'sb'))</SourceBuildOutputDir>
    <CurrentRepoSourceBuildSourceDir>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'src'))</CurrentRepoSourceBuildSourceDir>
    <CurrentRepoSourceBuildSourceDir Condition="'$(UseInnerClone)' != 'true'">$(RepoRoot)</CurrentRepoSourceBuildSourceDir>
    <CurrentRepoSourceBuildPackageCache>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'package-cache'))</CurrentRepoSourceBuildPackageCache>
    <SourceBuildSelfPrebuiltReportDir>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'prebuilt-report'))</SourceBuildSelfPrebuiltReportDir>

    <!--
      Keep artifacts/ inside source dir so that ancestor-based file lookups find the inner repo, not
      the outer repo. The inner repo global.json and NuGet.config files may have been modified by
      source-build, and we want projects inside the artifacts/ dir to respect that.

      Inner-clone removal - in VMR use regular artifacts dir.
    -->
    <CurrentRepoSourceBuildArtifactsDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildSourceDir)', 'artifacts'))</CurrentRepoSourceBuildArtifactsDir>
    <CurrentRepoSourceBuildArtifactsLogsDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsDir)', 'log', '$(Configuration)'))</CurrentRepoSourceBuildArtifactsLogsDir>
    <CurrentRepoSourceBuildArtifactsPackagesDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsDir)', 'packages', '$(Configuration)'))</CurrentRepoSourceBuildArtifactsPackagesDir>
    <CurrentRepoSourceBuildArtifactsNonShippingPackagesDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsPackagesDir)', 'NonShipping'))</CurrentRepoSourceBuildArtifactsNonShippingPackagesDir>

    <CurrentRepoSourceBuildNuGetSourceName>source-build-int-nupkg-cache</CurrentRepoSourceBuildNuGetSourceName>
    <!-- If this path is updated, also update the component detection task in eng\common\templates\steps\source-build.yml -->
    <CurrentRepoSourceBuiltNupkgCacheDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsDir)', 'obj', 'source-built-upstream-cache'))</CurrentRepoSourceBuiltNupkgCacheDir>

    <PrebuiltBaselineDataFileDefault>$(RepositoryEngineeringDir)SourceBuildPrebuiltBaseline.xml</PrebuiltBaselineDataFileDefault>
    <PrebuiltBaselineDataFile Condition="Exists('$(PrebuiltBaselineDataFileDefault)')">$(PrebuiltBaselineDataFileDefault)</PrebuiltBaselineDataFile>

    <!-- By default, use the license file from the root of the repo for the intermediate nupkg. -->
    <DetectSourceBuildIntermediateNupkgLicense Condition="'$(DetectSourceBuildIntermediateNupkgLicense)' == ''">true</DetectSourceBuildIntermediateNupkgLicense>

    <EnableDefaultSourceBuildIntermediateItems Condition="'$(EnableDefaultSourceBuildIntermediateItems)' == ''">true</EnableDefaultSourceBuildIntermediateItems>

    <!--
      This is fed into the inner source build as an environment variable (DotNetTargetFrameworkFilter) to enable filtering.
      The default target framework filter includes all recent netcoreapps in SBRP, as well as 8.0 (latest) and 7.0 (working to get rid of it.

      TFM filtering is enabled by default and can be disabled, at repo level, by setting NoTargetFrameworkFiltering property to true,
      in repo's root Directory.Build.props file.
    -->
    <_DefaultNetFrameworkFilter>netstandard2.0%3bnetstandard2.1%3bnetcoreapp2.1%3bnetcoreapp3.1%3bnet5.0%3bnet6.0%3bnet7.0%3bnet8.0%3bnet9.0</_DefaultNetFrameworkFilter>
    <SourceBuildTargetFrameworkFilter Condition="'$(SourceBuildTargetFrameworkFilter)' == ''">$(_DefaultNetFrameworkFilter)</SourceBuildTargetFrameworkFilter>
    <RepoManifestFile>$(ArtifactsDir)RepoManifest.xml</RepoManifestFile>
    <CreateRepoSymbolsArchiveDependsOn Condition="'$(CreateIntermediatePackage)' == 'true'">GetCategorizedIntermediateNupkgContents</CreateRepoSymbolsArchiveDependsOn>
  </PropertyGroup>

  <Target Name="GetSourceBuildIntermediateNupkgNameConvention">
    <PropertyGroup>
      <HostArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLowerInvariant())</HostArchitecture>
      <SourceBuildTargetArchitecture Condition="'$(SourceBuildTargetArchitecture)' == ''">$(HostArchitecture)</SourceBuildTargetArchitecture>

      <SourceBuildTargetPortableOSPlatform Condition="$([MSBuild]::IsOSPlatform('windows'))">win</SourceBuildTargetPortableOSPlatform>
      <SourceBuildTargetPortableOSPlatform Condition="$([MSBuild]::IsOSPlatform('osx'))">osx</SourceBuildTargetPortableOSPlatform>
      <SourceBuildTargetPortableOSPlatform Condition="$([MSBuild]::IsOSPlatform('linux'))">linux</SourceBuildTargetPortableOSPlatform>
      <SourceBuildTargetPortableOSPlatform Condition="'$(SourceBuildTargetPortableOSPlatform)'==''">linux</SourceBuildTargetPortableOSPlatform>
    
      <PortableRid>$(SourceBuildTargetPortableOSPlatform)-$(SourceBuildTargetArchitecture)</PortableRid>

      <TargetRid Condition="'$(SourceBuildNonPortable)' == 'true' and '$(TargetRid)' == ''">$([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier)</TargetRid>
      <!-- Default to building for the portable OS platform with host machine architecture. -->
      <TargetRid Condition="'$(TargetRid)' == ''">$(PortableRid)</TargetRid>
    
      <SourceBuildIntermediateNupkgRid Condition="'$(SourceBuildIntermediateNupkgRid)' == ''">$(PortableRid)</SourceBuildIntermediateNupkgRid>
      
      <SourceBuildIntermediateNupkgPrefix>Microsoft.SourceBuild.Intermediate.</SourceBuildIntermediateNupkgPrefix>
      <SourceBuildIntermediateNupkgSuffix Condition="'$(SourceBuildManagedOnly)' != 'true'">.$(SourceBuildIntermediateNupkgRid)</SourceBuildIntermediateNupkgSuffix>
    </PropertyGroup>
  </Target>

  <!--
    Get the list of nupkg contents, categorized into supplemental categories if necessary. By
    default, all non-symbol-package nupkg files and archive files in
    'artifacts/packages/{configuration}' are packed in the intermediate nupkg.

    To configure this, add a target to eng/DotNetBuild.props with
    'BeforeTargets="GetCategorizedIntermediateNupkgContents"' that sets up
    'IntermediateNupkgArtifactFile' items with optional 'Category' metadata.

    When 'Category' is set, this tooling produces one supplemental intermediate nupkg per named
    category. All files not in a category are put into the "main" intermediate nupkg.
  -->
  <Target Name="GetCategorizedIntermediateNupkgContents">
    <ItemGroup Condition="'$(EnableDefaultSourceBuildIntermediateItems)' == 'true'">
      <!-- Catch-all: anything not in a category gets packed in the 'main' intermediate nupkg. -->
      <IntermediateNupkgArtifactFile Include="$(CurrentRepoSourceBuildArtifactsPackagesDir)**\*.nupkg" />
      <IntermediateNupkgArtifactFile Include="$(CurrentRepoSourceBuildArtifactsPackagesDir)**\*$(ArchiveExtension)" />
      <!-- Don't pack any symbol packages: not needed for downstream source-build CI. -->
      <IntermediateNupkgArtifactFile Remove="$(CurrentRepoSourceBuildArtifactsPackagesDir)**\*.symbols.nupkg" />
    </ItemGroup>

    <Error
      Text="No source-build artifacts were found and the resulting intermediate is empty." 
      Condition="'$(AllowEmptySourceBuiltIntermediates)' != 'true' and '@(IntermediateNupkgArtifactFile)' == ''" />
    
    <ItemGroup>
      <IntermediateNupkgFile Include="@(IntermediateNupkgArtifactFile)" PackagePath="artifacts" />

      <!-- Report goes into the 'main' intermediate nupkg, if we're creating it. -->
      <IntermediateNupkgFile Condition="'$(CreateIntermediatePackage)' == 'true'" Include="$(SourceBuildSelfPrebuiltReportDir)**\*" PackagePath="prebuilt-report" />
    </ItemGroup>

    <RemoveDuplicates Inputs="@(IntermediateNupkgFile)">
      <Output TaskParameter="Filtered" ItemName="IntermediatePackageFile" />
    </RemoveDuplicates>

    <ItemGroup>
      <IntermediateNonShippingNupkgFile Include="@(IntermediatePackageFile)" Condition="$([System.Text.RegularExpressions.Regex]::Match(%(Identity),'[\\\\/]NonShipping[\\\\/]').Success)"/>
      <SupplementalIntermediateNupkgCategory Include="%(IntermediatePackageFile.Category)" />
    </ItemGroup>

    <PropertyGroup>
      <!-- The prefix needs to match what's defined in tarball source-build infra. Consider using a single property, in the future. -->
      <NonShippingPackagesListPrefix>NonShipping.Packages.</NonShippingPackagesListPrefix>
      <NonShippingPackagesList Condition="'@(IntermediateNonShippingNupkgFile)' != ''">$(CurrentRepoSourceBuildArtifactsPackagesDir)$(NonShippingPackagesListPrefix)$(GitHubRepositoryName).lst</NonShippingPackagesList>
    </PropertyGroup>

    <WriteLinesToFile
      Condition="'$(NonShippingPackagesList)' != ''"
      File="$(NonShippingPackagesList)"
      Lines="@(IntermediateNonShippingNupkgFile->'%(Filename)%(Extension)')"
      Overwrite="true" />
  </Target>

  <!--
    Create symbols archive in product source-build and during intermediate package build
    in repo build, if SupplementalIntermediateNupkgCategory matches SymbolsIntermediateNupkgCategory.

    Include symbols archive in the main intermediate nupkg, by default. Repos can select a different
    intermediate nupkg by defining 'SymbolsIntermediateNupkgCategory' property in eng/DotNetBuild.props.

    Conditioning out for Windows as the tar execution below doesn't work cross-plat.
  -->

  <Target Name="CreateRepoSymbolsArchive"
          Condition="'$(OS)' != 'Windows_NT' and '$(SupplementalIntermediateNupkgCategory)' == '$(SymbolsIntermediateNupkgCategory)'"
          DependsOnTargets="$(CreateRepoSymbolsArchiveDependsOn);
                            DiscoverRepoSymbols;
                            PackageRepoSymbols"/>

  <Target Name="DiscoverRepoSymbols">
    <PropertyGroup>
      <SymbolsRoot>$(CurrentRepoSourceBuildArtifactsDir)</SymbolsRoot>
      <!-- Fall back to repo root for source-build-externals or repos that don't have the regular SymbolsRoot as defined above -->
      <SymbolsRoot Condition="!Exists('$(SymbolsRoot)') or '$(GitHubRepositoryName)' == 'source-build-externals'">$(RepoRoot)</SymbolsRoot>
    </PropertyGroup>

    <ItemGroup>
      <AbsoluteSymbolPath Include="$(SymbolsRoot)**\obj\**\*.pdb" />
      <AbsoluteSymbolPath Condition="'@(AbsoluteSymbolPath)' != ''">
        <RelativePath>$([MSBuild]::MakeRelative($(SymbolsRoot), %(FullPath)))</RelativePath>
      </AbsoluteSymbolPath>
    </ItemGroup>
  </Target>

  <Target Name="PackageRepoSymbols"
          DependsOnTargets="DiscoverRepoSymbols">
    <PropertyGroup>
      <SymbolsArchiveLocation>$(CurrentRepoSourceBuildArtifactsNonShippingPackagesDir)</SymbolsArchiveLocation>
      <SymbolsArchiveLocation Condition="'$(GitHubRepositoryName)' == 'nuget-client' and '$(PackageOutputPath)' != ''">$([MSBuild]::EnsureTrailingSlash('$(PackageOutputPath)'))</SymbolsArchiveLocation>
      <SymbolsList>$([MSBuild]::NormalizePath('$(SymbolsArchiveLocation)', 'symbols.lst'))</SymbolsList>
      <SymbolsArchivePrefix>Symbols.</SymbolsArchivePrefix>
      <!-- $(Version) and $(TargetRid) are only available when target is executed as part of intermediate package creation. -->
      <SymbolsArchiveSuffix Condition="'$(CreateIntermediatePackage)' == 'true'">.$(Version).$(TargetRid)</SymbolsArchiveSuffix>
      <SymbolsArchiveFile>$(SymbolsArchiveLocation)$(SymbolsArchivePrefix)$(GitHubRepositoryName)$(SymbolsArchiveSuffix)$(ArchiveExtension)</SymbolsArchiveFile>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(SymbolsList)"
      Lines="@(AbsoluteSymbolPath->'%(RelativePath)')"
      Overwrite="true"
      Condition="'@(AbsoluteSymbolPath)' != ''" />

    <Exec Command="tar --numeric-owner -czf $(SymbolsArchiveFile) --files-from=$(SymbolsList)"
          WorkingDirectory="$(SymbolsRoot)" Condition="Exists($(SymbolsList))" />
    <Message Importance="High" Text="Packaged symbols to $(SymbolsArchiveFile)" Condition="Exists($(SymbolsList))" />

    <ItemGroup Condition="Exists($(SymbolsList))">
      <SymbolsArchivePackageFile Include="$(SymbolsArchiveFile)" PackagePath="artifacts" />
      <SymbolsArchivePackageFile Condition="'$(SymbolsIntermediateNupkgCategory)' != ''">
        <Category>$(SymbolsIntermediateNupkgCategory)</Category>
      </SymbolsArchivePackageFile>
      <IntermediatePackageFile Include="@(SymbolsArchivePackageFile)" />
    </ItemGroup>

    <Delete Files="$(SymbolsList)" Condition="Exists($(SymbolsList))" />
  </Target>

  <Target Name="CopyRepoSymbolsToIntermediates"
          DependsOnTargets="DiscoverRepoSymbols">
    <MakeDir Directories="$(SourceBuiltSymbolsDir)" />
    <Copy
      SourceFiles="@(AbsoluteSymbolPath)"
      DestinationFolder="$(SourceBuiltSymbolsDir)%(RecursiveDir)" />
  </Target>
  <!--
    This target can be removed once we enable standard repo assets manifests and SB orchestrator
    starts using it - https://github.com/dotnet/source-build/issues/3970
  -->
  <Target Name="CreateRepoManifest"
          DependsOnTargets="
            GetCategorizedIntermediateNupkgContents;
            CreateRepoSymbolsArchive">
    <ItemGroup>
      <RepoManifestLine Include='&lt;Build&gt;' />
      <RepoManifestLine Include='&lt;Artifact Path="%(IntermediatePackageFile.Identity)" /&gt;' />
      <RepoManifestLine Include='&lt;/Build&gt;' />
    </ItemGroup>

    <WriteLinesToFile
      File="$(RepoManifestFile)"
      Lines="@(RepoManifestLine)"
      Overwrite="true" />
  </Target>

  <Target Name="IncludeRepoManifestInIntermediatePackage"
           Condition="'$(CreateIntermediatePackage)' == 'true' and Exists($(RepoManifestFile))"
           DependsOnTargets="CreateRepoManifest">
    <ItemGroup>
      <Content Include="$(RepoManifestFile)" PackagePath="." />
    </ItemGroup>
  </Target>
</Project>
