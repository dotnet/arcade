<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>

  <Import Project="SourceBuildArcade.targets" />

  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.SourceBuild.AddSourceToNuGetConfig" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />
  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.SourceBuild.AddSourceMappingToNugetConfig" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />
  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.SourceBuild.ReadSourceBuildIntermediateNupkgDependencies" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />

  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.SourceBuild.Tasks" Version="$(MicrosoftDotNetSourceBuildTasksVersion)" IsImplicitlyDefined="true" />
  </ItemGroup>

  <Target Name="CollectSourceBuildIntermediateNupkgDependencies"
          Condition="
            '$(DotNetBuildFromSourceFlavor)' != 'Product' and
            (('$(ArcadeBuildFromSource)' == 'true' and '$(ArcadeInnerBuildFromSource)' == 'true') or
              '$(SetUpSourceBuildIntermediateNupkgCache)' == 'true')"
          DependsOnTargets="GetSourceBuildIntermediateNupkgNameConvention"
          BeforeTargets="CollectPackageReferences">
    <ReadSourceBuildIntermediateNupkgDependencies
      VersionDetailsXmlFile="$([MSBuild]::NormalizePath('$(RepositoryEngineeringDir)', 'Version.Details.xml'))"
      SourceBuildIntermediateNupkgPrefix="$(SourceBuildIntermediateNupkgPrefix)"
      SourceBuildIntermediateNupkgRid="$(SourceBuildIntermediateNupkgRid)">
      <Output TaskParameter="Dependencies" ItemName="SourceBuildIntermediateNupkgReference" />
    </ReadSourceBuildIntermediateNupkgDependencies>

    <ItemGroup>
      <PackageReference Include="@(SourceBuildIntermediateNupkgReference)" />
    </ItemGroup>
  </Target>

  <Target Name="SetUpSourceBuildIntermediateNupkgCache"
          Condition="
            '$(DotNetBuildFromSourceFlavor)' != 'Product' and
            (('$(ArcadeBuildFromSource)' == 'true' and '$(ArcadeInnerBuildFromSource)' == 'true' and '@(SourceBuildIntermediateNupkgReference)' != '') or
              '$(SetUpSourceBuildIntermediateNupkgCache)' == 'true')"
          AfterTargets="Restore">
    <ItemGroup>
      <IntermediateNupkgSourceDir Include="$([MSBuild]::NormalizeDirectory(
        '$(NuGetPackageRoot)',
        '$([System.String]::new(`%(SourceBuildIntermediateNupkgReference.Identity)`).ToLowerInvariant())',
        '$([System.String]::new(`%(SourceBuildIntermediateNupkgReference.ExactVersion)`).ToLowerInvariant())'))" />

      <IntermediateNupkgSourceArtifactsDir Include="$([MSBuild]::NormalizeDirectory(
        '$([System.String]::new(`%(IntermediateNupkgSourceDir.Identity)`).ToLowerInvariant())',
        'artifacts'))" />

      <SourceBuiltNupkgFile Include="%(IntermediateNupkgSourceArtifactsDir.Identity)**\*.nupkg" />
    </ItemGroup>

    <Copy
      SourceFiles="@(SourceBuiltNupkgFile)"
      DestinationFiles="@(SourceBuiltNupkgFile -> '$(CurrentRepoSourceBuiltNupkgCacheDir)%(Filename)%(Extension)')" />

    <!-- Remove the original source build intermediate directory. The extracted cached remains.
         This ensures that all sources of intermediates are in the nupkg cache dir, and tooling like CG can
         exclude scanning of these directories, instead focusing on whether the packages are utilized rather
         than simply available. -->
    <RemoveDir Directories="@(IntermediateNupkgSourceDir)" />

    <AddSourceToNuGetConfig
      NuGetConfigFile="$(RestoreConfigFile)"
      SourceName="$(CurrentRepoSourceBuildNuGetSourceName)"
      SourcePath="$(CurrentRepoSourceBuiltNupkgCacheDir)" />

    <AddSourceMappingToNugetConfig
      NuGetConfigFile="$(RestoreConfigFile)"
      SourceName="$(CurrentRepoSourceBuildNuGetSourceName)" />
  </Target>

</Project>
