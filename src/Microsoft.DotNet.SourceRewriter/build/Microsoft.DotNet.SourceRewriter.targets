<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <PropertyGroup>
    <AddSourceToFilesToPackageDependsOn>$(AddSourceToFilesToPackageDependsOn);GenerateInternalTypesSource</AddSourceToFilesToPackageDependsOn>

    <!-- If ToolHostCmd is undefined, we default to assuming 'dotnet' is on the path -->
    <ToolHostCmd Condition="'$(ToolHostCmd)' == ''">dotnet</ToolHostCmd>

    <_SourceRewriterPath Condition="'$(MSBuildRuntimeType)' == 'core'">$(MSBuildThisFileDirectory)\..\tools\netcoreapp2.1\Microsoft.DotNet.SourceRewriter.dll</_SourceRewriterPath>
    <_SourceRewriterPath Condition="'$(MSBuildRuntimeType)' != 'core'">$(MSBuildThisFileDirectory)\..\tools\net472\Microsoft.DotNet.SourceRewriter.exe</_SourceRewriterPath>

    <_SourceRewriterCommand Condition="'$(MSBuildRuntimeType)' == 'core'">$(ToolHostCmd) $(_SourceRewriterPath)</_SourceRewriterCommand>
    <_SourceRewriterCommand Condition="'$(MSBuildRuntimeType)' != 'core' and '$(OS)' == 'Windows_NT'">$(_SourceRewriterPath)</_SourceRewriterCommand>
    <_SourceRewriterCommand Condition="'$(MSBuildRuntimeType)' != 'core' and '$(OS)' != 'Windows_NT'">mono --runtime=v4.0.30319 "$(_SourceRewriterPath)"</_SourceRewriterCommand>
  </PropertyGroup>

  <!--This target will run when building a source package and
    property GenerateInternalTypesSource is set to true. It will
    take the source files that need to be packaged, and it will use
    a roslyn-based task to convert all of the public exposed types on
    those files into internal types instead.-->
  <Target Name="GenerateInternalTypesSource" Condition="'$(GenerateInternalTypesSource)' == 'true' AND '@(SourcePackageFiles)' != ''">
    <ItemGroup>
      <_NewSourcesToPackage Include="@(SourcePackageFiles -> '$(IntermediateOutputPath)%(FileName)%(Extension)')">
        <OriginalIdentity>%(Identity)</OriginalIdentity>
      </_NewSourcesToPackage>
      <SourcePackageFiles Remove="@(SourcePackageFiles)" />
      <SourcePackageFiles Include="@(_NewSourcesToPackage)" />
      <FileWrites Include="@(SourcePackageFiles)" />
    </ItemGroup>

    <PropertyGroup>
      <_SourceRewriterResponseFile>$(IntermediateOutputPath)sourcerewriter.rsp</_SourceRewriterResponseFile>
      <!-- Escaping the semicolon with %3B so that it gets written correctly into the response file -->
      <_SourceRewriterArgs>&quot;@(SourcePackageFiles -> '%(OriginalIdentity)', '%3B')&quot; &quot;$(IntermediateOutputPath.TrimEnd('/').TrimEnd('\\'))&quot;</_SourceRewriterArgs>
      <_SourceRewriterCommand>$(_SourceRewriterCommand) @&quot;$(_SourceRewriterResponseFile)&quot;</_SourceRewriterCommand>
    </PropertyGroup>

    <MakeDir Directories="$(IntermediateOutputPath)" />
    <WriteLinesToFile File="$(_SourceRewriterResponseFile)" Lines="$(_SourceRewriterArgs)" Overwrite="true" />

    <Exec Command="$(_SourceRewriterCommand)"
          StandardOutputImportance="Low">
      <Output TaskParameter="ExitCode" PropertyName="SourceRewriterExitCode" />
    </Exec>
    <Error Condition="'$(SourceRewriterExitCode)' != '0'" Text="There was an error while rewriting the source with the command: $(_SourceRewriterCommand)" />
  </Target>
</Project>
