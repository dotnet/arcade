<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(NetToolCurrent);$(NetFrameworkToolCurrent)</TargetFrameworks>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <SignAssembly>false</SignAssembly>
    <Description>This package provides support for publishing assets to appropriate channels.</Description>
    <DevelopmentDependency>true</DevelopmentDependency>
    <IsBuildTaskProject>true</IsBuildTaskProject>
    <PackageType>MSBuildSdk</PackageType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <SignAssembly>true</SignAssembly>
    <DefineConstants>$(DefineConstants);DOTNET_BUILD_SOURCE_ONLY</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Azure.Core" Condition="'$(DotNetBuildSourceOnly)' != 'true'" />
    <PackageReference Include="Azure.Identity" Condition="'$(DotNetBuildSourceOnly)' != 'true'" />
    <PackageReference Include="Azure.Storage.Blobs" Condition="'$(DotNetBuildSourceOnly)' != 'true'" />
    <PackageReference Include="Microsoft.Build.Tasks.Core" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(DotNetBuildSourceOnly)' != 'true'">
    <!-- ProductConstructionService.Client stopped supporting .NET 4.7.2 long ago.
    This functionality should eventually be moved into an arcade-services package,
    but for users consuming other functionality we'll still support 4.7.2 by ifdefing it out. -->
    <PackageReference Include="Microsoft.DotNet.ProductConstructionService.Client" />
    <PackageReference Include="Microsoft.DotNet.DarcLib" />
    <!-- SymbolUploadHelper uses Azure SDKs, S.T.Json, and several other dependencies that can't be downgraded safely.
    On .NET Core/.NET these deps come from the shared framework and we don't need try to do version fixups, and 
    the symbol publishing doesn't run on framework anyway (this project has a throwing stub for .NET framework in that path
    due to the reliance in maestro). Until we really need to multitarget, this is the better path. -->
    <ProjectReference Include="..\Microsoft.DotNet.Internal.SymbolHelper\Microsoft.DotNet.Internal.SymbolHelper.csproj" />
    <!-- Additionally, SymbolHelper relies on Microsoft.DiaSymReader which brings NS.Library 1.6.1 and the slew of
    old packages with it. Upgrade to keep CG happy. -->
    <PackageReference Include="NETStandard.Library" IsImplicitlyDefined="false" PrivateAssets="all" ExcludeAssets="runtime" VersionOverride="2.0.3" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
    <PackageReference Include="Microsoft.Bcl.HashCode" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Common\Microsoft.Arcade.Common\Microsoft.Arcade.Common.csproj" />
    <ProjectReference Include="..\Microsoft.DotNet.Deployment.Tasks.Links\Microsoft.DotNet.Deployment.Tasks.Links.csproj" Condition="'$(DotNetBuildSourceOnly)' != 'true'" />
    <!--<ProjectReference Include="..\VersionTools\Microsoft.DotNet.VersionTools\Microsoft.DotNet.VersionTools.csproj" />-->
    <ProjectReference Include="..\Microsoft.DotNet.ArcadeAzureIntegration\Microsoft.DotNet.ArcadeAzureIntegration.csproj" Condition="'$(DotNetBuildSourceOnly)' != 'true'" />
    <ProjectReference Include="..\Microsoft.DotNet.Build.Manifest\Microsoft.DotNet.Build.Manifest.csproj" />
  </ItemGroup>
 
  <ItemGroup>
    <Compile Include="..\Common\Internal\EnumExtensions.cs" />
  </ItemGroup>

  <!-- Most tasks are not supported on NETFramework or source build. Add only those that we need -->
  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(DotNetBuildSourceOnly)' == 'true'">
    <Compile Remove="@(Compile)" />
    <Compile Include="src\PushToBuildStorage.cs" />
    <Compile Include="src\common\NativeMethods.cs" />
  </ItemGroup>

</Project>
