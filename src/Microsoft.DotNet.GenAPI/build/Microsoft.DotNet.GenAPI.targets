<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup>
    <!-- If ToolHostCmd is undefined, we default to assuming 'dotnet' is on the path -->
    <ToolHostCmd Condition="'$(ToolHostCmd)' == ''">dotnet</ToolHostCmd>

    <GenAPITargetPath Condition="'$(GenAPITargetPath)' == ''">$(TargetDir)$(TargetName).cs</GenAPITargetPath>
    <_GenAPIPath Condition="'$(MSBuildRuntimeType)' == 'core'">$(MSBuildThisFileDirectory)\..\tools\netcoreapp2.1\Microsoft.DotNet.GenAPI.dll</_GenAPIPath>
    <_GenAPIPath Condition="'$(MSBuildRuntimeType)' != 'core'">$(MSBuildThisFileDirectory)\..\tools\net472\Microsoft.DotNet.GenAPI.exe</_GenAPIPath>

    <_GenAPICommand Condition="'$(MSBuildRuntimeType)' == 'core'">$(ToolHostCmd) "$(_GenAPIPath)"</_GenAPICommand>
    <_GenAPICommand Condition="'$(MSBuildRuntimeType)' != 'core' and '$(OS)' == 'Windows_NT'">"$(_GenAPIPath)"</_GenAPICommand>
    <_GenAPICommand Condition="'$(MSBuildRuntimeType)' != 'core' and '$(OS)' != 'Windows_NT'">mono --runtime=v4.0.30319 "$(_GenAPIPath)"</_GenAPICommand>

    <!-- Sequence ourselves last in PrepareForRun
         This ensures the output has been copied to TargetPath, but still permits
         us to participate in FileWrites. -->
    <PrepareForRunDependsOn Condition="'$(GenerateReferenceAssemblySource)' == 'true'">
      $(PrepareForRunDependsOn);
      GenerateReferenceAssemblySource;
    </PrepareForRunDependsOn>
  </PropertyGroup>

  <ItemGroup Condition="'$(GeneratePlatformNotSupportedAssembly)' == 'true' or '$(GeneratePlatformNotSupportedAssemblyMessage)' != ''">
    <AssemblyMetadata Include="NotSupported">
      <Value>True</Value>
    </AssemblyMetadata>
  </ItemGroup>

  <Target Name="GenerateReferenceAssemblySource"
          Inputs="$(TargetPath)"
          Outputs="$(GenAPITargetPath)">

    <ItemGroup>
      <!-- build out a list of directories where dependencies are located -->
      <_referencePathDirectoriesWithDuplicates Include="@(ReferencePath->'%(RootDir)%(Directory)'->TrimEnd('\'))" />
      <!-- strip metadata, removing duplicates -->
      <_referencePathDirectories Include="%(_referencePathDirectoriesWithDuplicates.Identity)" />
    </ItemGroup>

    <Exec Command="$(_GenAPICommand) &quot;$(TargetPath)&quot; --lib-path &quot;@(_referencePathDirectories)&quot; --out &quot;$(GenAPITargetPath)&quot; $(GenAPIAdditionalParameters)" />

    <ItemGroup>
      <FileWrites Include="$(GenAPITargetPath)"/>
    </ItemGroup>

  </Target>

  <PropertyGroup Condition="'$(GeneratePlatformNotSupportedAssembly)' == 'true' or '$(GeneratePlatformNotSupportedAssemblyMessage)' != ''">
    <!-- Tell ResolveMatchingContract to run and resolve contract to project reference -->
    <ResolveMatchingContract>true</ResolveMatchingContract>
    <NotSupportedSourceFile>$(IntermediateOutputPath)$(TargetName).notsupported.cs</NotSupportedSourceFile>
    <CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateNotSupportedSource</CoreCompileDependsOn>
    <!-- Not supported sources are created from the ref assembly, we currently don't produce finalizers in dummmy assemblies, so we disable ApiCompat to not fail. -->
    <RunApiCompat>false</RunApiCompat>
  </PropertyGroup>

  <!-- GenerateNotSupportedSource
       Inputs:
         * A contract assembly
         * Reference assemblies

       Generates source for the contract that throws PlatformNotSupportedException
  -->
  <Target Name="GenerateNotSupportedSource" 
          DependsOnTargets="ResolveMatchingContract"
          Inputs="@(ReferencePath);@(ResolvedMatchingContract)"
          Outputs="$(NotSupportedSourceFile)">

    <ItemGroup>
      <!-- build out a list of directories where dependencies are located -->
      <_referencePathDirectoriesWithDuplicates Include="@(ReferencePath->'%(RootDir)%(Directory)'->TrimEnd('\'))" />
      <!-- strip metadata, removing duplicates -->
      <_referencePathDirectories Include="%(_referencePathDirectoriesWithDuplicates.Identity)" />
    </ItemGroup>

    <Error Text="No single matching contract found." Condition="'@(ResolvedMatchingContract -> Count())' != '1'" />

    <PropertyGroup>
      <GenAPIArgs>"%(ResolvedMatchingContract.Identity)"</GenAPIArgs>
      <GenAPIArgs>$(GenAPIArgs) --lib-path "@(_referencePathDirectories)"</GenAPIArgs>
      <GenAPIArgs>$(GenAPIArgs) --out "$(NotSupportedSourceFile)"</GenAPIArgs>
      <GenAPIArgs Condition="'$(GeneratePlatformNotSupportedAssembly)' == 'true' or '$(GeneratePlatformNotSupportedAssemblyMessage)' != ''">$(GenAPIArgs) --throw "$(GeneratePlatformNotSupportedAssemblyMessage)"</GenAPIArgs>
      <GenAPIArgs Condition="'$(GeneratePlatformNotSupportedAssemblyWithGlobalPrefix)' == 'true'">$(GenAPIArgs) --global</GenAPIArgs>
    </PropertyGroup>

    <Exec Command="$(_GenAPICommand) $(GenAPIArgs)" 
          WorkingDirectory="$(ToolRuntimePath)" />

    <ItemGroup>
      <FileWrites Include="$(NotSupportedSourceFile)" />
      <Compile Include="$(NotSupportedSourceFile)" />
    </ItemGroup>

  </Target>

</Project>
