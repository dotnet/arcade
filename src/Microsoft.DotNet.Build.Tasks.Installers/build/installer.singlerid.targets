<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>

  <PropertyGroup>
    <_InstallerTargetsImported>true</_InstallerTargetsImported>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)installer.targetos.targets" />

  <Target Name="GetInstallerGenerationFlags" DependsOnTargets="_GetTargetOSArchInfo">
    <!-- Filter the installer generation/build flags for the current build machine. -->
    <PropertyGroup>
      <!--
        Save the project's GenerateInstallers setting. It's possible the current arch of the current OS
        doesn't support MSI generation, but we still want to create an MSI across architectures. For
        example, we want to make an MSI that installs the arm apphost pack into the x64 SDK location
        on an x64 machine.
      -->
      <GenerateCrossArchMsi Condition="'$(_osSupportsWixBasedInstallers)' == 'true'">true</GenerateCrossArchMsi>

      <GenerateMSI Condition="'$(_osArchSupportsWixBasedInstallers)' == 'true'">true</GenerateMSI>

      <GeneratePkg Condition="$([MSBuild]::IsOSPlatform('osx')) and '$(TargetRuntimeOS)' == 'osx'">true</GeneratePkg>
    </PropertyGroup>

    <!--
      Apply the global Build*Package properties. These use distro-specific logic to determine if the
      current distro should build RPM packages or Debian packages.

      This logic is external because the legacy infra needs the values.
    -->
    <PropertyGroup>
      <GenerateDeb>$(GenerateInstallers)</GenerateDeb>
      <GenerateRpm>$(GenerateInstallers)</GenerateRpm>
      <GenerateDeb Condition="'$(GenerateDeb)' == 'true' and '$(BuildDebPackage)' != 'true'">false</GenerateDeb>
      <GenerateRpm Condition="'$(GenerateRpm)' == 'true' and '$(BuildRpmPackage)' != 'true'">false</GenerateRpm>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateInstallers" DependsOnTargets="GetInstallerGenerationFlags" Condition="'$(SkipInstallerBuild)' != 'true' and '$(GenerateInstallers)' == 'true'">   
    <Error
      Text="InstallerName '$(InstallerName)' is empty or starts with a '-': expected a value like 'dotnet-runtime'."
      Condition="'$(InstallerName)' == '' or $(InstallerName.StartsWith('-'))" />

    <MakeDir Directories="$(PackageOutputPath)" />

    <!--
      Define one recursive build invocation for each installer target.
      This allows each type of installer to set properties as it needs without interfering with the others.
    -->
    <ItemGroup>
      <_InstallerBuildProject
        Include="$(MSBuildProjectFile)"
        Targets="GenerateDeb"
        Properties="_IsIndividualInstallerBuild=true;GenerateDeb=true"
        Condition="'$(GenerateDeb)' == 'true'" />
      <_InstallerBuildProject
        Include="$(MSBuildProjectFile)"
        Targets="GenerateRpm"
        Properties="_IsIndividualInstallerBuild=true;GenerateRpm=true"
        Condition="'$(GenerateRpm)' == 'true'" />
      <_InstallerBuildProject
        Include="$(MSBuildProjectFile)"
        Targets="GenerateMsi"
        Properties="_IsIndividualInstallerBuild=true;GenerateMSI=true"
        Condition="'$(GenerateMSI)' == 'true'" />
      <_InstallerBuildProject
        Include="$(MSBuildProjectFile)"
        Targets="GenerateCrossArchMsi"
        Properties="_IsIndividualInstallerBuild=true;GenerateCrossArchMsi=true"
        Condition="'$(GenerateCrossArchMsi)' == 'true'" />
      <_InstallerBuildProject
        Include="$(MSBuildProjectFile)"
        Targets="GeneratePkg"
        Properties="_IsIndividualInstallerBuild=true;GeneratePkg=true"
        Condition="'$(GeneratePkg)' == 'true'" />
      <_InstallerBuildProject
        Include="$(MSBuildProjectFile)"
        Targets="GenerateVSInsertionNupkg"
        Properties="_IsIndividualInstallerBuild=true;GenerateMSI=$(GenerateMSI);GenerateCrossArchMsi=$(GenerateCrossArchMsi)"
        Condition="'$(GenerateVSInsertionPackages)' == 'true'" />
    </ItemGroup>
    <MSBuild Projects="@(_InstallerBuildProject)"
             Targets="%(_InstallerBuildProject.Targets)"
             BuildInParallel="$(BuildInParallel)" />
  </Target>

  <!-- When we're actually building an installer, include the installer build targets file. -->
  <Import Project="installer.build.targets" Condition="'$(_IsIndividualInstallerBuild)' == 'true'" />

  <PropertyGroup>
    <BuildDependsOn>$(BuildDependsOn);_GetSkipInstallerBuildProps;GenerateInstallers</BuildDependsOn>
  </PropertyGroup>

</Project>
