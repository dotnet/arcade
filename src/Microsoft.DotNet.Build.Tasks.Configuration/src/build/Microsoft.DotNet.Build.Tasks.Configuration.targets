<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <UsingTask TaskName="GenerateConfigurationProps" AssemblyFile="$(DotNetBuildTasksConfigurationDll)"/>
  <UsingTask TaskName="FindBestConfigurations" AssemblyFile="$(DotNetBuildTasksConfigurationDll)"/>
  <UsingTask TaskName="NormalizeConfigurations" AssemblyFile="$(DotNetBuildTasksConfigurationDll)"/>

  <PropertyGroup>
    <_traversalBuildConfigurations>$(BuildConfiguration)</_traversalBuildConfigurations>
    <_traversalBuildConfigurations Condition="'$(AdditionalBuildConfigurations)' != ''">$(_traversalBuildConfigurations);$(AdditionalBuildConfigurations)</_traversalBuildConfigurations>
  </PropertyGroup>

  <!-- Runs during traversal when BuildAllConfigurations is set to expand each project
       to a separate instance for each of its BuildConfigurations -->
  <Target Name="ExpandAllBuildConfigurations"
          Condition="'$(BuildAllConfigurations)' == 'true'">
    <MSBuild Targets="GetBuildConfigurations"
             Projects="@(Project)"
             Condition="'$(BuildAllConfigurations)' == 'true'">
      <Output TaskParameter="TargetOutputs"
              ItemName="_projectBuildConfigurationsExact" />
    </MSBuild>
    
    <ItemGroup>
      <!-- we need to ignore placeholder build configurations that start with _ -->
      <_projectBuildConfigurationsExact Remove="@(_projectBuildConfigurationsExact)" Condition="$([System.String]::Copy('%(Identity)').StartsWith('_'))" />      
    </ItemGroup>

    <NormalizeConfigurations Properties="@(Property)"
                             PropertyValues="@(PropertyValue)"
                             BuildConfiguration="$(BuildConfiguration)"
                             Configurations="@(_projectBuildConfigurationsExact)">
      <Output TaskParameter="NormalizedConfigurations" ItemName="_projectBuildConfigurations" />
    </NormalizeConfigurations>

    <ItemGroup>
      <!-- assign configuration as a separate step to prevent batching during the transform which can reorder the list.
           order or projects matters here since this applies to traversal projects which build projects serially. -->
      <_projectBuildConfigurations>
        <AdditionalProperties>Configuration=%(Identity);%(_projectBuildConfigurations.AdditionalProperties)</AdditionalProperties>
      </_projectBuildConfigurations>

      <!-- transform back to project -->
      <_projectWithConfiguration Include="@(_projectBuildConfigurations->'%(OriginalItemSpec)')" />
    </ItemGroup>

    <ItemGroup>
      <Project Remove="@(Project)" />
      <Project Include="@(_projectWithConfiguration)" />
    </ItemGroup>
  </Target>

  <Target Name="ExpandAllPackageConfigurations"
          BeforeTargets="ExpandProjectReferences"
          Condition="'$(MSBuildProjectExtension)' == '.pkgproj'">
    <MSBuild Targets="GetPackageConfigurations"
             Projects="@(_NonPkgProjProjectReference)">
      <Output TaskParameter="TargetOutputs"
              ItemName="_NonPkgProjProjectReferenceBuildConfigurationsExact" />
    </MSBuild>
    
    <ItemGroup>
      <!-- we need to ignore placeholder build configurations that start with _ -->
      <_NonPkgProjProjectReferenceBuildConfigurationsExact Remove="@(_NonPkgProjProjectReferenceBuildConfigurationsExact)" Condition="$([System.String]::Copy('%(Identity)').StartsWith('_'))" />
    </ItemGroup>

    <NormalizeConfigurations Properties="@(Property)"
                             PropertyValues="@(PropertyValue)"
                             BuildConfiguration="$(BuildConfiguration)"
                             Configurations="@(_NonPkgProjProjectReferenceBuildConfigurationsExact)">
      <Output TaskParameter="NormalizedConfigurations" ItemName="_NonPkgProjProjectReferenceBuildConfigurations" />
    </NormalizeConfigurations>

    <ItemGroup>
      <!-- assign configuration as a separate step to prevent batching during the transform which can reorder the list.
           order or projects matters here since this applies to traversal projects which build projects serially. -->
      <_NonPkgProjProjectReferenceBuildConfigurations>
        <AdditionalProperties>Configuration=%(Identity);%(_NonPkgProjProjectReferenceBuildConfigurations.AdditionalProperties)</AdditionalProperties>
      </_NonPkgProjProjectReferenceBuildConfigurations>

      <!-- transform back to project -->
      <_NonPkgProjProjectReferenceWitnConfiguration Include="@(_NonPkgProjProjectReferenceBuildConfigurations->'%(OriginalItemSpec)')" />
    </ItemGroup>

    <ItemGroup>
      <_NonPkgProjProjectReference Remove="@(_NonPkgProjProjectReference)" />
      <_NonPkgProjProjectReference Include="@(_NonPkgProjProjectReferenceWitnConfiguration)" />
    </ItemGroup>
  </Target>

  <!-- Runs during traversal to select which projects and configurations of those projects to build
       Batches over the projects because we need to treat BuildConfigurations as a Property
       as well as copy the Project based on results of FindBestConfigurations. -->
  <Target Name="FilterBuildConfiguration"
          Condition="'$(BuildAllConfigurations)' != 'true'"
          Inputs="%(Project.Identity)"
          Outputs="unused">

    <MSBuild Targets="GetBuildConfigurations"
             Projects="@(Project)">
      <Output TaskParameter="TargetOutputs"
              PropertyName="_projectBuildConfigurations" />
    </MSBuild>

    <FindBestConfigurations Properties="@(Property)"
                            PropertyValues="@(PropertyValue)"
                            SupportedConfigurations="$(_projectBuildConfigurations)"
                            Configurations="$(_traversalBuildConfigurations)">
      <Output TaskParameter="BestConfigurations" ItemName="_projectBestConfigurations" />
    </FindBestConfigurations>

    <ItemGroup>
      <!-- Apply configuration, this does a Cartesian product between @(Project) and @(_projectBestConfigurations) -->
      <_projectWithConfiguration Include="@(Project)" Condition="'@(_projectBestConfigurations)' != ''">
        <AdditionalProperties>Configuration=%(_projectBestConfigurations.Identity);%(_projectWithConfiguration.AdditionalProperties)</AdditionalProperties>
      </_projectWithConfiguration>
      <Project Remove="@(Project)"/>
      <Project Include="@(_projectWithConfiguration)"/>
    </ItemGroup>
  </Target>

  <Target Name="FilterProjects"
          Condition="'$(FilterProjectsByBuildConfiguration)' != 'false'"
          DependsOnTargets="ExpandAllBuildConfigurations;FilterBuildConfiguration" />

  <!-- Runs in a leaf project (eg: csproj) to determine all configurations -->
  <Target Name="GetBuildConfigurations"
          Returns="$(_AllBuildConfigurations)">
    <PropertyGroup>
      <_AllBuildConfigurations>$(BuildConfigurations)</_AllBuildConfigurations>
      <_AllBuildConfigurations Condition="'$(BuildConfigurations)' == ''">$(_traversalBuildConfigurations)</_AllBuildConfigurations>
    </PropertyGroup>
  </Target>

  <!-- Runs in a leaf project (eg: csproj) to determine configurations to package -->
  <Target Name="GetPackageConfigurations"
          Returns="$(PackageConfigurations)">
     <ItemGroup Condition="'$(PackageConfigurations)' == ''">
       <_buildConfigurations Include="$(BuildConfigurations)" />
       <_excludeBuildConfigurations Include="mono" />
       <_packageConfigurations Include="@(_buildConfigurations)" Exclude="@(_excludeBuildConfigurations)" />
     </ItemGroup>

     <PropertyGroup Condition="'$(PackageConfigurations)' == ''">
       <PackageConfigurations>@(_packageConfigurations)</PackageConfigurations>
     </PropertyGroup>
  </Target>

  <!-- Runs in a leaf project (csproj) to determine best configuration for ProjectReferences -->
  <Target Name="AnnotateProjectReference"
          BeforeTargets="AssignProjectConfiguration"
          Condition="'@(ProjectReference)' != ''"
          Inputs="%(ProjectReference.Identity)"
          Outputs="unused">

    <MSBuild Targets="GetBuildConfigurations"
             Projects="@(ProjectReference)">
      <Output TaskParameter="TargetOutputs" PropertyName="_projectReferenceBuildConfigurations" />
    </MSBuild>

    <PropertyGroup>
      <!--
        When building in VS or using the solution file Configuration for some projects is set to Debug/Release
        in such cases we should treat it as an empty configuration and set it to be $BuildConfiguration for the
        purposes of annotating project references.
      -->
      <Configuration Condition="'$(Configuration)' == 'Debug' or '$(Configuration)' == 'Release'">$(BuildConfiguration)</Configuration>

      <!--
        When building in VS AssignProjectConfiguration tries to unset Configuration and Platform but for our configuration
        system we need those properties to be passed through so the correct configuration can be selected. So we need to
        set this property to false to prevent them from being unset.
      -->
      <ShouldUnsetParentConfigurationAndPlatform>false</ShouldUnsetParentConfigurationAndPlatform>
    </PropertyGroup>

    <!-- Find the best configuration for the current Project's Configuration -->
    <FindBestConfigurations Properties="@(Property)"
                            PropertyValues="@(PropertyValue)"
                            SupportedConfigurations="$(_projectReferenceBuildConfigurations)"
                            Configurations="$(Configuration)">
      <Output TaskParameter="BestConfigurations" PropertyName="_projectReferenceConfiguration" />
    </FindBestConfigurations>

    <Error Condition="'$(_projectReferenceConfiguration)' == ''" Text="Could not find a configuration for ProjectReference '@(ProjectReference)' from configurations '$(_projectReferenceBuildConfigurations)' when building '$(MSBuildProjectName)' for configuration '$(Configuration)' ." />

    <ItemGroup>
      <ProjectReference>
        <AdditionalProperties>Configuration=$(_projectReferenceConfiguration);%(ProjectReference.AdditionalProperties)</AdditionalProperties>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <Target Name="_getAllBuildConfigurations">
    <ItemGroup>
      <_buildConfigurationsExact Include="$(BuildConfigurations)" />
      <!-- For BuildAllConfigurations we need to ignore any placeholder build configuration that starts with _ -->
      <_buildConfigurationsExact Remove="@(_buildConfigurationsExact)" Condition="$([System.String]::Copy('%(Identity)').StartsWith('_'))" />
      <_buildConfigurationsExact Condition="'@(_buildConfigurationsExact)' == ''" Include="$(_traversalBuildConfigurations)" />
    </ItemGroup>

    <NormalizeConfigurations Properties="@(Property)"
                             PropertyValues="@(PropertyValue)"
                             BuildConfiguration="$(Configuration)"
                             Configurations="@(_buildConfigurationsExact)">
      <Output TaskParameter="NormalizedConfigurations" ItemName="_buildConfigurations" />
    </NormalizeConfigurations>
  </Target>

  <Target Name="BuildAllConfigurations" DependsOnTargets="_getAllBuildConfigurations">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Properties="Configuration=%(_buildConfigurations.Identity);BuildAllConfigurations=true" />
  </Target>
  <Target Name="BuildAll" DependsOnTargets="BuildAllConfigurations" />

  <Target Name="RebuildAllConfigurations" DependsOnTargets="_getAllBuildConfigurations">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="Rebuild"
             Properties="Configuration=%(_buildConfigurations.Identity);BuildAllConfigurations=true" />
  </Target>
  <Target Name="RebuildAll" DependsOnTargets="RebuildAllConfigurations" />

  <Target Name="CleanAllConfigurations" DependsOnTargets="_getAllBuildConfigurations">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="Clean"
             Properties="Configuration=%(_buildConfigurations.Identity);BuildAllConfigurations=true" />
  </Target>
  <Target Name="CleanAll" DependsOnTargets="CleanAllConfigurations" />

  <!-- intentionally not sequenced, expected to be called by repository init, after restore but before build of other targets -->
  <Target Name="GenerateConfigurationProps">
    <Error Condition="'@(Property)' == ''" Text="Property item was not specified.  It is required for using the $(MSBuildThisFileName) package." />
    <Error Condition="'@(PropertyValue)' == ''" Text="PropertyValue item was not specified.  It is required for using the $(MSBuildThisFileName) package." />
    <Error Condition="'$(BuildConfigurationFolder)' == ''" Text="BuildConfigurationFolder property was not specified.  It is required for using the $(MSBuildThisFileName) package." />
    <!-- Generate the configurations for this repo -->
    <GenerateConfigurationProps Properties="@(Property)" PropertyValues="@(PropertyValue)" PropsFolder="$(BuildConfigurationFolder)" />
  </Target>

  <Import Project="BinPlace.targets" />
</Project>
