<?xml version="1.0" encoding="utf-8"?>
<!-- All Rights Reserved. Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <!-- Wrap RunCommand and RunArguments inside code coverage invocation. -->
  <PropertyGroup>
    <CoverageExecutablePath Condition="'$(CoverageExecutablePath)' == ''">$(GlobalToolsDir)coverlet</CoverageExecutablePath>
    <RunArguments>"$(TestAssembly)" --target "$(RunCommand)" --targetargs "$(RunArguments)" --format "$(CoverageFormat)" --output "$(CoverageOutputPath)" --threshold "$(CoverageThreshold)" --threshold-type "$(CoverageThresholdType)"</RunArguments>
    <RunArguments Condition="'$(CoverageExcludeByFile)' != ''">$(RunArguments) --exclude-by-file $(CoverageExcludeByFile)</RunArguments>
    <RunArguments Condition="'$(CoverageExclude)' != ''">$(RunArguments) --exclude "$(CoverageExclude)"</RunArguments>
    <RunCommand>$(CoverageExecutablePath)</RunCommand>
  </PropertyGroup>

  <!--
    Temporary till we consume System.Private.CoreLib sources via SourceLink.
    https://github.com/dotnet/corefx/issues/30974
   -->
  <ItemGroup>
    <PostRunScriptCommands Condition="'$(TargetOS)' == 'Windows_NT'" Include="powershell -Command &quot;(gc $(CoverageOutputPath)) -replace '$(CoverageTransformSource)', '$(CoverageTransformDestination)' | Out-File $(CoverageOutputPath) -encoding ASCII&quot;" />
  </ItemGroup>

  <Target Name="SetupCoverageFilter">

    <PropertyGroup>
      <CoverageExcludeByFile>--exclude-by-file @(CoverageExcludeFile -> '%(Identity)', ' --exclude-by-file ')</CoverageExcludeByFile>
      <RunArguments>$(RunArguments) $(CoverageExcludeByFile)</RunArguments>
    </PropertyGroup>

    <PropertyGroup>
      <IncludeDirectoriesFilter>--include-directory @(CoverageProbePath -> '$(RunScriptHostDir)%(Identity)', ' --include-directory ')</IncludeDirectoriesFilter>
      <IncludeDirectoriesFilter Condition="'$(TargetOS)' != 'Windows_NT'">$(CoverageProbePath.Replace('\', '/'))</IncludeDirectoriesFilter>
      <RunArguments>$(RunArguments) $(IncludeDirectoriesFilter)</RunArguments>
    </PropertyGroup>

    <!-- 
      We need to filter the data to only the assembly being tested. Otherwise we will gather tons of data about other assemblies.
      If the code being tested is part of the runtime itself, it requires special treatment.
    -->
    <PropertyGroup Condition="'$(AssemblyBeingTested)' == ''">
      <_ProjectDirectoryUnderSourceDir>$(MSBuildProjectDirectory.SubString($(SourceDir.Length)))</_ProjectDirectoryUnderSourceDir>
      <AssemblyBeingTested>$(_ProjectDirectoryUnderSourceDir.SubString(0, $(_ProjectDirectoryUnderSourceDir.IndexOfAny("\\/"))))</AssemblyBeingTested>
    </PropertyGroup>

    <!--
      By default, code coverage data is only gathered for the assembly being tested.
      CodeCoverageAssemblies can be passed in to the build to gather coverage on additional assemblies.
    -->
    <ItemGroup>
      <_CoverageAssemblies Include="$(AssemblyBeingTested)" />
      <_CoverageAssemblies Include="System.Private.CoreLib" Condition="'$(TestRuntime)' == 'true'" />
      <_CoverageAssemblies Include="@(AssembliesBeingTested)" />
      <_CoverageAssemblies Include="$(CoverageAssemblies)" Condition="'$(CoverageAssemblies)' != ''" />
    </ItemGroup>

    <PropertyGroup Condition="'$(CoverageType)' != 'all'">
      <CoverageFilter>--include @(_CoverageAssemblies -> '[%(Identity)]*', ' --include ')</CoverageFilter>
      <RunArguments>$(RunArguments) $(CoverageFilter)</RunArguments>
    </PropertyGroup>

  </Target>

  <Import Project="$(MSBuildThisFileDirectory)CoverageReport.targets" />

</Project>
