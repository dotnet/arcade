<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup>
    <TargetOS Condition="'$(TargetOS)' == ''">$(DefaultOSGroup)</TargetOS>
    <IncludeDefaultTestReferences Condition="'$(IncludeDefaultTestReferences)' == '' and '$(IsTestProject)' == 'true'">true</IncludeDefaultTestReferences>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Copies the app.config file to the OutDir. -->
    <TestRuntimeTemplateConfigPath Condition="'$(TestRuntimeTemplateConfigPath)' == '' and '$(TargetFrameworkIdentifier)' == '.NETFramework'">$(TestAssetsDir)netfx.exe.config</TestRuntimeTemplateConfigPath>

    <!-- By default copy the test runtime config file for executable test projects (+ test support projects). -->
    <GenerateRuntimeConfigurationFiles Condition="'$(IsTestProject)' == 'true' and ('$(IsTestSupportProject)' != 'true' or '$(OutputType.ToLower())' == 'exe')">true</GenerateRuntimeConfigurationFiles>
  </PropertyGroup>

  <ItemGroup Condition="'$(GenerateRuntimeConfigurationFiles)' == 'true'">
    <None Include="$(TestRuntimeTemplateConfigPath)"
          Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'"
          Link="$(TargetName).exe.config"
          CopyToOutputDirectory="PreserveNewest"
          Visible="false" />
    <!--
      Include deps.json and runtimeconfig.json in ContentWithTargetPath so they will
      be copied to the output folder of projects that reference this one.
      Tracking issue: https://github.com/dotnet/sdk/issues/1675
    -->
    <ContentWithTargetPath Include="$(ProjectDepsFilePath)"
                           Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(GenerateDependencyFile)' == 'true'"
                           CopyToOutputDirectory="PreserveNewest"
                           TargetPath="$(ProjectDepsFileName)" />
    <ContentWithTargetPath Include="$(ProjectRuntimeConfigFilePath)"
                           Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'"
                           CopyToOutputDirectory="PreserveNewest"
                           TargetPath="$(ProjectRuntimeConfigFileName)" />
  </ItemGroup>

  <!--
    As we disabled implicit framework references but want to populate the framework node in the runtimeconfig's
    runtimeOptions node we manually set the RuntimeFramework.
    At that point restore and conflict resolution already happened therefore setting the item here has no side effects.
   -->
  <Target Name="SetRuntimeFrameworksBeforeGenerateConfigurationFiles"
          Condition="'$(GenerateRuntimeConfigurationFiles)' == 'true'"
          BeforeTargets="GenerateBuildRuntimeConfigurationFiles">
    <ItemGroup>
      <RuntimeFramework Include="Microsoft.NETCore.App" Version="$(ProductVersion)" />
    </ItemGroup>
  </Target>

  <!-- Auto references support. Used by test projects and companions. -->
  <Target Name="AddDefaultTestReferences"
          Condition="'$(IncludeDefaultReferences)' == 'true' and '$(IncludeDefaultTestReferences)' == 'true'"
          BeforeTargets="SetupDefaultReferences">
    <ItemGroup>
      <!-- Harmless, but causes PRI targets to run -->
      <DefaultReferenceExclusions Include="System.Runtime.WindowsRuntime.UI.Xaml" />
      <DefaultReferenceExclusions Include="@(ReferenceFromRuntime)"/>

      <!-- Reference everything in the targeting pack directory -->
      <DefaultReferenceDirs Include="$(RefPath)" />
      <DefaultReferenceItems Include="%(DefaultReferenceDirs.Identity)/*.dll" />

      <DefaultReferenceExclusions>
        <RefDir>%(DefaultReferenceDirs.Identity)</RefDir>
      </DefaultReferenceExclusions>
      <_defaultReferenceExclusionsFullPath Include="%(DefaultReferenceExclusions.RefDir)%(DefaultReferenceExclusions.Identity).dll" />

      <!-- Ensure conflict resolution can see these references. -->
      <Reference Include="%(DefaultReferenceItems.FullPath)" Private="false" />
    </ItemGroup>
  </Target>

  <Target Name="RemoveConflictResolutionAssetsForTests"
          AfterTargets="_HandlePackageFileConflicts"
          DependsOnTargets="AddDefaultTestReferences"
          Condition="'@(_defaultReferenceExclusionsFullPath)' != ''">
    <ItemGroup>
      <Reference Remove="@(_defaultReferenceExclusionsFullPath)" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="GenerateFileVersionProps" AssemblyFile="$(CoreFxTestingAssemblyPath)"/>
  <Target Name="GenerateFileVersionProps">
    <GenerateFileVersionProps Files="@(SharedFrameworkRuntimeFiles)"
                              PackageId="Microsoft.NETCore.App"
                              PackageVersion="$(ProductVersion)"
                              PlatformManifestFile="$(PlatformManifestFile)"
                              PreferredPackages="Microsoft.NetCore.App"
                              PermitDllAndExeFilesLackingFileVersion="true" />
  </Target>

  <!--
    Shared framework deps file generation.
    Produces a test shared-framework deps file.
    To use invoke target directly specifying NETCoreAppTestSharedFrameworkPath property.
  -->
  <UsingTask TaskName="GenerateTestSharedFrameworkDepsFile" AssemblyFile="$(CoreFxTestingAssemblyPath)"/>
  <Target Name="GenerateTestSharedFrameworkDepsFile">
    <GenerateTestSharedFrameworkDepsFile SharedFrameworkDirectory="$(NETCoreAppTestSharedFrameworkPath)" />
  </Target>

  <!-- Full coverage report. -->
  <Import Condition="'$(EnableFullCoverageReportTarget)' == 'true' and '$(SkipCoverageReport)' != 'true' and '$(Coverage)' == 'true'" Project="$([MSBuild]::NormalizePath('$(TestCoreDir)', 'coverage', 'CoverageReport.targets'))" />

  <!-- Import the core testing infrastructure only for test projects. -->
  <Import Condition="'$(IsTestProject)' == 'true' and '$(IsTestSupportProject)' != 'true'"  Project="$(TestCoreDir)Core.targets" />

</Project>
