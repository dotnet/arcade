<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup Condition="'$(BuildingUAPVertical)' == 'true'">
    <!--
      Inside an AppContainer we can't write into the WorkingDirectory. As System.IO is used
      to write the results file we can't use the documents folder either. Therefore we write
      into the app's local state directory which doesn't need a StorageFolder broker.
    -->
    <UAPResultsPathCmd Condition="'$(UAPResultsPathCmd)' == ''">&quot;%LOCALAPPDATA%\Packages\5cd54353-3ed7-4a6e-a72f-db349f28867c_v52bfwc2c21ha\LocalState\$(AssemblyName).xml&quot;</UAPResultsPathCmd>
  </PropertyGroup>

  <!-- General xunit options -->
  <PropertyGroup>
    <RunArguments>$(TestAssembly)</RunArguments>
    <RunArguments Condition="'$(BuildingUAPVertical)' != 'true'">$(RunArguments) -xml $(TestResultsName)</RunArguments>
    <RunArguments Condition="'$(BuildingUAPVertical)' == 'true'">$(RunArguments) -xml $(UAPResultsPathCmd)</RunArguments>
    <RunArguments>$(RunArguments) -nologo</RunArguments>
    <RunArguments>$(RunArguments) -notrait category=non$(_bc_TargetGroup)tests</RunArguments>

    <TargetOSTrait Condition="'$(TargetOS)' == 'Windows_NT'">nonwindowstests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'Linux'">nonlinuxtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'OSX'">nonosxtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'FreeBSD'">nonfreebsdtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'NetBSD'">nonnetbsdtests</TargetOSTrait>
    <RunArguments Condition="'$(TargetOSTrait)' != ''">$(RunArguments) -notrait category=$(TargetOSTrait)</RunArguments>

    <!-- Add local and global options to the argument stack. -->
    <RunArguments Condition="'$(XUnitMaxThreads)' != ''">$(RunArguments) -maxthreads $(XUnitMaxThreads)</RunArguments>
    <RunArguments Condition="'$(XUnitMethodName)' != ''">$(RunArguments) -method $(XUnitMethodName)</RunArguments>
    <RunArguments Condition="'$(XUnitClassName)' != ''">$(RunArguments) -class $(XUnitClassName)</RunArguments>
    <RunArguments Condition="'$(XUnitShowProgress)' == 'true'">$(RunArguments) -verbose</RunArguments>
    <RunArguments Condition="'$(BuildingNETFxVertical)' == 'true' and '$(XUnitNoAppdomain)' == 'true'">$(RunArguments) -noappdomain</RunArguments>

    <!-- Traits -->
    <_withCategories Condition="'$(WithCategories)' != ''">;$(WithCategories.Trim(';'))</_withCategories>
    <_withoutCategories Condition="'$(WithoutCategories)' != ''">;$(WithoutCategories.Trim(';'))</_withoutCategories>
    <!-- Default non categories -->
    <_withoutCategories Condition="!$(_withCategories.Contains('failing'))">$(_withoutCategories);failing</_withoutCategories>
    <_withoutCategories Condition="'$(Outerloop)' != 'true'">$(_withoutCategories);Outerloop</_withoutCategories>
    <RunArguments>$(RunArguments)$(_withCategories.Replace(';', ' -trait category='))</RunArguments>
    <RunArguments>$(RunArguments)$(_withoutCategories.Replace(';', ' -notrait category='))</RunArguments>

    <!-- User passed in options. -->
    <RunArguments Condition="'$(XUnitOptions)' != ''">$(RunArguments) $(XUnitOptions)</RunArguments>

    <!-- Escape arguments with user inputs. -->
    <RunArguments>$([MSBuild]::Escape('$(RunArguments)'))</RunArguments>
  </PropertyGroup>

  <PropertyGroup>
    <TestsSuccessfulSemaphoreName Condition="'$(WithCategories)' != ''">$(TestsSuccessfulSemaphoreName).with$(WithCategories.Replace(';', '.'))</TestsSuccessfulSemaphoreName>
    <TestsSuccessfulSemaphoreName Condition="'$(WithoutCategories)' != ''">$(TestsSuccessfulSemaphoreName).without$(WithoutCategories.Replace(';', '.'))</TestsSuccessfulSemaphoreName>
  </PropertyGroup>

  <Target Name="ValidateTargetOSTrait">

    <Error Condition="'$(TargetOSTrait)' == ''"
           Text="TargetOS [$(TargetOS)] is unknown so we don't know how to configure the test run for this project [$(TestProjectName)]" />

  </Target>

  <!-- Setup run commands. -->
  <Choose>

    <When Condition="'$(BuildingNETCoreAppVertical)' == 'true'">
      <PropertyGroup>
        <TestRunnerName>xunit.console.dll</TestRunnerName>
        <TestRunnerNameWithoutExtension>$([System.IO.Path]::GetFileNameWithoutExtension('$(TestRunnerName)'))</TestRunnerNameWithoutExtension>

        <RunCommand>$(RunScriptHost)</RunCommand>
        <RunArguments>$(TestRunnerName) $(RunArguments)</RunArguments>
      </PropertyGroup>
    </When>

    <When Condition="'$(BuildingNETFxVertical)' == 'true'">
      <PropertyGroup>
        <TestRunnerName>xunit.console.exe</TestRunnerName>
        <RunCommand>$(TestRunnerName)</RunCommand>
      </PropertyGroup>
    </When>

    <When Condition="'$(BuildingUAPVertical)' == 'true'">
      <PropertyGroup>
        <!-- Globally registered UWP console app. -->
        <TestRunnerName>XUnitRunnerUap</TestRunnerName>
        <RunCommand>$(TestRunnerName)</RunCommand>
      </PropertyGroup>

      <ItemGroup>
        <!-- Copy the runner files over. -->
        <RunScriptCommands Include="for /F %%f in ('dir /b /s &quot;$(RunnerDir)&quot;^|find /i /v &quot;.pri&quot;') do @(set relPath=%%f%26 set relPath=!relPath:$(RunnerDir)=!%26 if exist %%f\nul (if not exist !relPath! mkdir !relPath!) else (if not exist !relPath! mklink /h !relPath! %%f 1>NUL))" />

        <!-- Copy the runtime binaries over. -->
        <RunScriptCommands Include="for /R &quot;$(_RuntimePath)&quot; %25%25I in (%2A) do @if not exist &quot;%25%25~nxI&quot; (mklink /H &quot;%25%25~nxI&quot; &quot;%25%25I&quot; 1>NUL)" />

        <!-- We need to have the ni as well as the non-ni version of the binary. The host (being a rather old build) looks for the ni name first (so we need that as well for now.) -->
        <RunScriptCommands Include="copy /y &quot;$(_RuntimePath)System.Private.CoreLib.dll&quot; System.Private.CoreLib.ni.dll" />

        <!-- Install -->
        <RunScriptCommands Include="call &quot;$(LauncherPath)&quot; -install appxmanifest.xml $(TestAssembly)" />

        <!-- Save error level as the uninstall command overwrites the global one. -->
        <PostRunScriptCommands Include="set ERRORLEVEL=%ERRORLEVEL%" />

        <!-- Copy the log files and the results files from the Documents folder to the test folder -->
        <PostRunScriptCommands Include="move /Y $(UAPResultsPathCmd) .\$(TestResultsName)" />

        <!-- Uninstall -->
        <PostRunScriptCommands Include="call &quot;$(LauncherPath)&quot; -uninstall appxmanifest.xml $(TestAssembly)" />
      </ItemGroup>
    </When>

    <When Condition="'$(UseDotNetNativeToolchain)' == 'true'">
      <PropertyGroup>
        <TestRunnerName>xunit.console.exe</TestRunnerName>
        <RunCommand>$(TestRunnerName)</RunCommand>

        <!-- We use the netcoreapp runner for ILC but change its extension to .exe to satisfy ILC. -->
        <OriginalTestRunnerName>xunit.console.dll</OriginalTestRunnerName>

        <_TestILCFolder>%RUNTIME_PATH%\TestILC</_TestILCFolder>
        <ILCBuildType Condition="'$(ILCBuildType)' == ''">ret</ILCBuildType>
        <_UseSharedAssemblies Condition="'$(EnableMultiFileILCTests)' == 'true'">-useSharedAssemblies</_UseSharedAssemblies>
        <_ILCWin32 Condition="'$(BuildingUAPAOTVertical)' != 'true'">-win32</_ILCWin32>
      </PropertyGroup>

      <ItemGroup>
        <RunScriptCommands Include="for /R &quot;$(ILCFXInputFolder)&quot; %25%25I in (%2A) do @if not exist &quot;%25%25~nxI&quot; (mklink /H &quot;%25%25~nxI&quot; &quot;%25%25I&quot; 1>NUL)" />
        <RunScriptCommands Include="copy /y $(_TestILCFolder)\default.rd.xml %EXECUTION_DIR%" />
        <RunScriptCommands Include="move /y $(OriginalTestRunnerName) $(TestRunnerName)" />
        <RunScriptCommands Include="if exist %EXECUTION_DIR%int rmdir /S /Q %EXECUTION_DIR%int" />
        <RunScriptCommands Include="if exist %EXECUTION_DIR%native rmdir /S /Q %EXECUTION_DIR%native" />

        <RunScriptCommands Include="call $(_TestILCFolder)\ilc.exe -ExeName $(TestRunnerName) -in %EXECUTION_DIR% -out %EXECUTION_DIR%int\$(TestRunnerName)\ -usedefaultpinvoke -buildtype $(ILCBuildType) -v diag $(_UseSharedAssemblies) $(_ILCWin32)" />
        <RunScriptCommands Include="set ILCERRORLEVEL=%ERRORLEVEL%" />
        <RunScriptCommands Include="if NOT [%ILCERRORLEVEL%] == [0] exit /b %ILCERRORLEVEL%" />
        <RunScriptCommands Include="robocopy /S /NP %EXECUTION_DIR%int\$(TestRunnerName)\ %EXECUTION_DIR%native\" />

        <RunScriptCommands Include="copy /y $(_TestILCFolder)\CRT\vcruntime140_app.dll %EXECUTION_DIR%native" />
        <RunScriptCommands Include="echo > %EXECUTION_DIR%\native\$(TestAssembly)"/>
        <RunScriptCommands Include="cd native"/>

        <!-- These will cause failures if execution is skipped, such as on ARM -->
        <PostRunScriptCommands Condition="'$(ArchGroup)' != 'arm'" Include="copy /y $(TestResultsName) %EXECUTION_DIR%\" />
      </ItemGroup>
    </When>

  </Choose>

</Project>