<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup Condition="'$(BuildingUAPVertical)' == 'true'">
    <!--
      Inside an AppContainer we can't write into the WorkingDirectory. As System.IO is used
      to write the results file we can't use the documents folder either. Therefore we write
      into the app's local state directory which doesn't need a StorageFolder broker.
    -->
    <UAPResultsPathCmd Condition="'$(UAPResultsPathCmd)' == ''">&quot;%LOCALAPPDATA%\Packages\5cd54353-3ed7-4a6e-a72f-db349f28867c_v52bfwc2c21ha\LocalState\$(AssemblyName).xml&quot;</UAPResultsPathCmd>
  </PropertyGroup>

  <!-- General xunit options -->
  <PropertyGroup>
    <RunArguments>$(TestAssembly)</RunArguments>
    <RunArguments Condition="'$(BuildingUAPVertical)' != 'true'">$(RunArguments) -xml $(TestResultsName)</RunArguments>
    <RunArguments Condition="'$(BuildingUAPVertical)' == 'true'">$(RunArguments) -xml $(UAPResultsPathCmd)</RunArguments>
    <RunArguments>$(RunArguments) -nologo</RunArguments>
    <RunArguments Condition="'$(ArchiveTest)' == 'true'">$(RunArguments) -nocolor</RunArguments>
    <RunArguments>$(RunArguments) -notrait category=non$(_bc_TargetGroup)tests</RunArguments>

    <TargetOSTrait Condition="'$(TargetOS)' == 'Windows_NT'">nonwindowstests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'Linux'">nonlinuxtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'OSX'">nonosxtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'FreeBSD'">nonfreebsdtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'NetBSD'">nonnetbsdtests</TargetOSTrait>
    <RunArguments Condition="'$(TargetOSTrait)' != ''">$(RunArguments) -notrait category=$(TargetOSTrait)</RunArguments>

    <!-- Add local and global options to the argument stack. -->
    <RunArguments Condition="'$(XUnitMaxThreads)' != ''">$(RunArguments) -maxthreads $(XUnitMaxThreads)</RunArguments>
    <RunArguments Condition="'$(XUnitMethodName)' != ''">$(RunArguments) -method $(XUnitMethodName)</RunArguments>
    <RunArguments Condition="'$(XUnitClassName)' != ''">$(RunArguments) -class $(XUnitClassName)</RunArguments>
    <!-- There's no verbose switch in the XUnitRunnerUap. -->
    <RunArguments Condition="'$(XUnitShowProgress)' == 'true' AND '$(BuildingUAPVertical)' != 'true'">$(RunArguments) -verbose</RunArguments>
    <RunArguments Condition="'$(BuildingNETFxVertical)' == 'true' and '$(XUnitNoAppdomain)' == 'true'">$(RunArguments) -noappdomain</RunArguments>

    <!-- Legacy Outerloop switch -->
    <TestScope Condition="'$(TestScope)' == '' and '$(Outerloop)' == 'true'">all</TestScope>
    
    <!-- Traits -->
    <WithoutCategories Condition="'$(WithoutCategories)' == '' and '$(ContinuousIntegrationBuild)' == 'true' and '$(OfficialBuildId)' == ''">IgnoreForCI</WithoutCategories>
    <_withCategories Condition="'$(WithCategories)' != ''">;$(WithCategories.Trim(';'))</_withCategories>
    <_withoutCategories Condition="'$(WithoutCategories)' != ''">;$(WithoutCategories.Trim(';'))</_withoutCategories>
    <!-- Default categories -->
    <_withCategories Condition="'$(TestScope)' == 'outerloop'">$(_withCategories);OuterLoop</_withCategories>
    <_withoutCategories Condition="'$(TestScope)' == '' or '$(TestScope)' == 'innerloop'">$(_withoutCategories);OuterLoop</_withoutCategories>
    <_withoutCategories Condition="!$(_withCategories.Contains('failing'))">$(_withoutCategories);failing</_withoutCategories>
    <!-- Add to run argument string -->
    <RunArguments>$(RunArguments)$(_withCategories.Replace(';', ' -trait category='))</RunArguments>
    <RunArguments>$(RunArguments)$(_withoutCategories.Replace(';', ' -notrait category='))</RunArguments>

    <!-- User passed in options. -->
    <RunArguments Condition="'$(XUnitOptions)' != ''">$(RunArguments) $(XUnitOptions)</RunArguments>
  </PropertyGroup>

  <PropertyGroup>
    <TestsSuccessfulSemaphoreName Condition="'$(WithCategories)' != ''">$(TestsSuccessfulSemaphoreName).with$(WithCategories.Replace(';', '.'))</TestsSuccessfulSemaphoreName>
    <TestsSuccessfulSemaphoreName Condition="'$(WithoutCategories)' != ''">$(TestsSuccessfulSemaphoreName).without$(WithoutCategories.Replace(';', '.'))</TestsSuccessfulSemaphoreName>
  </PropertyGroup>

  <Target Name="ValidateTargetOSTrait">

    <Error Condition="'$(TargetOSTrait)' == ''"
           Text="TargetOS [$(TargetOS)] is unknown so we don't know how to configure the test run for this project [$(TestProjectName)]" />

  </Target>

  <!-- Overwrite the runner config file with the app local one. -->
  <Target Name="OverwriteTestRunnerConfigFile"
          Condition="'$(BuildingNETFxVertical)' == 'true' or '$(BuildingNetCoreAppVertical)' == 'true'"
          AfterTargets="CopyFilesToOutputDirectory">

    <PropertyGroup>
      <TestRunnerNameWithoutExtension>$([System.IO.Path]::GetFileNameWithoutExtension('$(TestRunnerName)'))</TestRunnerNameWithoutExtension>
    </PropertyGroup>

    <ItemGroup Condition="'$(BuildingNETFxVertical)' == 'true'">
      <_testRunnerConfigSourceFile Include="$(TargetDir)$(TargetName).exe.config" Condition="'$(GenerateRuntimeConfigurationFiles)' == 'true'" />
      <_testRunnerConfigSourceFile Include="$(TargetDir)$(TargetName).exe.config" Condition="'$(IncludeRemoteExecutor)' == 'true'" />
      <_testRunnerConfigDestFile Include="$(TargetDir)$(TestRunnerName).config" Condition="'$(GenerateRuntimeConfigurationFiles)' == 'true'" />
      <_testRunnerConfigDestFile Include="$(TargetDir)Microsoft.DotNet.RemoteExecutorHost.exe.config" Condition="'$(IncludeRemoteExecutor)' == 'true'" />
    </ItemGroup>

    <ItemGroup Condition="'$(BuildingNetCoreAppVertical)' == 'true'">
      <_testRunnerConfigSourceFile Include="$(ProjectRuntimeConfigFilePath)" Condition="Exists('$(ProjectRuntimeConfigFilePath)')" />
      <_testRunnerConfigSourceFile Include="$(ProjectRuntimeConfigDevFilePath)" Condition="Exists('$(ProjectRuntimeConfigDevFilePath)')" />
      <_testRunnerConfigSourceFile Include="$(ProjectRuntimeConfigFilePath)" Condition="Exists('$(ProjectRuntimeConfigFilePath)') and '$(IncludeRemoteExecutor)' == 'true'" />
      <_testRunnerConfigSourceFile Include="$(ProjectRuntimeConfigDevFilePath)" Condition="Exists('$(ProjectRuntimeConfigDevFilePath)') and '$(IncludeRemoteExecutor)' == 'true'" />
      <_testRunnerConfigDestFile Include="$(TargetDir)$(TestRunnerNameWithoutExtension).runtimeconfig.json" Condition="Exists('$(ProjectRuntimeConfigFilePath)')" />
      <_testRunnerConfigDestFile Include="$(TargetDir)$(TestRunnerNameWithoutExtension).runtimeconfig.dev.json" Condition="Exists('$(ProjectRuntimeConfigDevFilePath)')" />
      <_testRunnerConfigDestFile Include="$(TargetDir)Microsoft.DotNet.RemoteExecutorHost.runtimeconfig.json" Condition="Exists('$(ProjectRuntimeConfigFilePath)') and '$(IncludeRemoteExecutor)' == 'true'" />
      <_testRunnerConfigDestFile Include="$(TargetDir)Microsoft.DotNet.RemoteExecutorHost.runtimeconfig.dev.json" Condition="Exists('$(ProjectRuntimeConfigDevFilePath)') and '$(IncludeRemoteExecutor)' == 'true'" />
    </ItemGroup>

    <Copy SourceFiles="@(_testRunnerConfigSourceFile)"
          Condition="'@(_testRunnerConfigSourceFile)' != ''"
          DestinationFiles="@(_testRunnerConfigDestFile)"
          SkipUnchangedFiles="true" />

  </Target>

  <!-- Work around https://github.com/dotnet/sdk/issues/968 -->
  <Target Name="RemoveXUnitAnalyzer"
          Condition="'$(EnableXUnitAnalyzer)' != 'true'"
          BeforeTargets="CoreCompile">
    <ItemGroup>
      <Analyzer Remove="@(Analyzer)"
                Condition="'%(Analyzer.NuGetPackageId)' == 'xunit.analyzers'" />
    </ItemGroup>
  </Target>

  <!-- Setup run commands. -->
  <Choose>

    <When Condition="'$(BuildingNETCoreAppVertical)' == 'true'">
      <PropertyGroup>
        <TestRunnerName>xunit.console.dll</TestRunnerName>
        <RunCommand>"$(RunScriptHost)"</RunCommand>
        <RunArguments>$(TestRunnerName) $(RunArguments)</RunArguments>
      </PropertyGroup>
    </When>

    <When Condition="'$(BuildingNETFxVertical)' == 'true'">
      <PropertyGroup>
        <TestRunnerName>xunit.console.exe</TestRunnerName>
        <RunCommand>$(TestRunnerName)</RunCommand>
      </PropertyGroup>
    </When>

    <When Condition="'$(BuildingUAPVertical)' == 'true'">
      <PropertyGroup>
        <!-- Globally registered UWP console app. -->
        <TestRunnerName>XUnitRunnerUap</TestRunnerName>
        <RunCommand>$(TestRunnerName)</RunCommand>
      </PropertyGroup>

      <ItemGroup>
        <!-- Copy the runner files over. -->
        <RunScriptCommands Include="for /F %%f in ('dir /b /s &quot;$(RunnerDir)&quot;^|find /i /v &quot;.pri&quot;') do @(set relPath=%%f%26 set relPath=!relPath:$(RunnerDir)=!%26 if exist %%f\nul (if not exist !relPath! mkdir !relPath!) else (if not exist !relPath! mklink /h !relPath! %%f 1>NUL))" />

        <!-- Copy the runtime binaries over. -->
        <RunScriptCommands Include="for /R &quot;$(_RuntimePath)&quot; %25%25I in (%2A) do @if not exist &quot;%25%25~nxI&quot; (mklink /H &quot;%25%25~nxI&quot; &quot;%25%25I&quot; 1>NUL)" />

        <!-- We need to have the ni as well as the non-ni version of the binary. The host (being a rather old build) looks for the ni name first (so we need that as well for now.) -->
        <RunScriptCommands Include="copy /y &quot;$(_RuntimePath)System.Private.CoreLib.dll&quot; System.Private.CoreLib.ni.dll" />

        <!-- Install -->
        <RunScriptCommands Include="call &quot;$(LauncherPath)&quot; -install appxmanifest.xml $(TestAssembly)" />

        <!-- Save error level as the uninstall command overwrites the global one. -->
        <PostRunScriptCommands Include="set ERRORLEVEL=%ERRORLEVEL%" />

        <!-- Copy the test results file to the execution directory -->
        <PostRunScriptCommands Include="move /Y $(UAPResultsPathCmd) .\$(TestResultsName)" />

        <!-- Uninstall -->
        <PostRunScriptCommands Include="call &quot;$(LauncherPath)&quot; -uninstall appxmanifest.xml $(TestAssembly)" />
      </ItemGroup>
    </When>

  </Choose>

  <!-- Main test targets -->
  <Target Name="Test" DependsOnTargets="$(TestDependsOn)" Condition="'$(IsUnitTestProject)' == 'true'" />
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" Condition="'$(IsUnitTestProject)' == 'true'" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" Condition="'$(IsUnitTestProject)' == 'true'" />

</Project>
