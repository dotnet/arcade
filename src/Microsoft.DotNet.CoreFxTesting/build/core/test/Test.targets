<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <!-- General xunit options -->
  <PropertyGroup>
    <RunArguments>$(TestAssembly)</RunArguments>
    <RunArguments>$(RunArguments) -xml $(TestResultsName)</RunArguments>
    <RunArguments>$(RunArguments) -nologo</RunArguments>
    <RunArguments Condition="'$(ArchiveTest)' == 'true'">$(RunArguments) -nocolor</RunArguments>
    <RunArguments>$(RunArguments) -notrait category=non$(_bc_TargetGroup)tests</RunArguments>

    <TargetOSTrait Condition="'$(TargetOS)' == 'Windows_NT'">nonwindowstests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'Linux'">nonlinuxtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'OSX'">nonosxtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'FreeBSD'">nonfreebsdtests</TargetOSTrait>
    <TargetOSTrait Condition="'$(TargetOS)' == 'NetBSD'">nonnetbsdtests</TargetOSTrait>
    <RunArguments Condition="'$(TargetOSTrait)' != ''">$(RunArguments) -notrait category=$(TargetOSTrait)</RunArguments>

    <!-- Add local and global options to the argument stack. -->
    <RunArguments Condition="'$(XUnitMaxThreads)' != ''">$(RunArguments) -maxthreads $(XUnitMaxThreads)</RunArguments>
    <RunArguments Condition="'$(XUnitMethodName)' != ''">$(RunArguments) -method $(XUnitMethodName)</RunArguments>
    <RunArguments Condition="'$(XUnitClassName)' != ''">$(RunArguments) -class $(XUnitClassName)</RunArguments>
    <RunArguments Condition="'$(XUnitShowProgress)' == 'true'">$(RunArguments) -verbose</RunArguments>
    <RunArguments Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(XUnitNoAppdomain)' == 'true'">$(RunArguments) -noappdomain</RunArguments>

    <!-- Legacy Outerloop switch -->
    <TestScope Condition="'$(TestScope)' == '' and '$(Outerloop)' == 'true'">all</TestScope>
    
    <!-- Traits -->
    <WithoutCategories Condition="'$(ArchiveTest)' == 'true'">IgnoreForCI</WithoutCategories>
    <_withCategories Condition="'$(WithCategories)' != ''">;$(WithCategories.Trim(';'))</_withCategories>
    <_withoutCategories Condition="'$(WithoutCategories)' != ''">;$(WithoutCategories.Trim(';'))</_withoutCategories>
    <!-- Default categories -->
    <_withCategories Condition="'$(TestScope)' == 'outerloop'">$(_withCategories);OuterLoop</_withCategories>
    <_withoutCategories Condition="'$(TestScope)' == '' or '$(TestScope)' == 'innerloop'">$(_withoutCategories);OuterLoop</_withoutCategories>
    <_withoutCategories Condition="!$(_withCategories.Contains('failing'))">$(_withoutCategories);failing</_withoutCategories>
    <!-- Add to run argument string -->
    <RunArguments>$(RunArguments)$(_withCategories.Replace(';', ' -trait category='))</RunArguments>
    <RunArguments>$(RunArguments)$(_withoutCategories.Replace(';', ' -notrait category='))</RunArguments>

    <!-- User passed in options. -->
    <RunArguments Condition="'$(XUnitOptions)' != ''">$(RunArguments) $(XUnitOptions)</RunArguments>
  </PropertyGroup>

  <PropertyGroup>
    <TestsSuccessfulSemaphoreName Condition="'$(WithCategories)' != ''">$(TestsSuccessfulSemaphoreName).with$(WithCategories.Replace(';', '.'))</TestsSuccessfulSemaphoreName>
    <TestsSuccessfulSemaphoreName Condition="'$(WithoutCategories)' != ''">$(TestsSuccessfulSemaphoreName).without$(WithoutCategories.Replace(';', '.'))</TestsSuccessfulSemaphoreName>
  </PropertyGroup>

  <Target Name="ValidateTargetOSTrait"
          BeforeTargets="GenerateRunScript">

    <Error Condition="'$(TargetOSTrait)' == ''"
           Text="TargetOS [$(TargetOS)] is unknown so we don't know how to configure the test run for this project [$(TestProjectName)]" />

  </Target>

  <!-- Overwrite the runner config file with the app local one. -->
  <Target Name="OverwriteDesktopTestRunnerConfigs"
          Condition="'$(GenerateRuntimeConfigurationFiles)' == 'true' and '$(TargetFrameworkIdentifier)' == '.NETFramework'"
          AfterTargets="CopyFilesToOutputDirectory">

    <ItemGroup>
      <_testRunnerConfigSourceFile Include="$(TargetDir)$(TargetName).exe.config" />
      <_testRunnerConfigDestFile Include="$(TargetDir)$(TestRunnerName).config" />
    </ItemGroup>

    <Copy SourceFiles="@(_testRunnerConfigSourceFile)"
          Condition="'@(_testRunnerConfigSourceFile)' != ''"
          DestinationFiles="@(_testRunnerConfigDestFile)"
          SkipUnchangedFiles="true" />

  </Target>

  <!-- Setup run commands. -->
  <Choose>

    <When Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
      <PropertyGroup>
        <TestRunnerName>xunit.console.dll</TestRunnerName>
        <RunCommand>"$(RunScriptHost)"</RunCommand>
        <RunArguments>exec --runtimeconfig $(AssemblyName).runtimeconfig.json $(TestRunnerName) $(RunArguments)</RunArguments>
      </PropertyGroup>
    </When>

    <When Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
      <PropertyGroup>
        <TestRunnerName>xunit.console.exe</TestRunnerName>
        <RunCommand>$(TestRunnerName)</RunCommand>
      </PropertyGroup>
    </When>

  </Choose>

  <!-- ResolveAssemblyReferences is the target that populates ReferenceCopyLocalPaths which is what is copied to output directory. -->
  <Target Name="CopyRunnerToOutputDirectory" BeforeTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <!-- Add the runner configuration file -->
      <None Include="$(TestRunnerConfigPath)"
            CopyToOutputDirectory="PreserveNewest"
            Visible="false" />

      <!-- Copy test runner to output directory -->
      <None Include="$([System.IO.Path]::GetDirectoryName('$(XunitConsole472Path)'))\*"
            Exclude="$([System.IO.Path]::GetDirectoryName('$(XunitConsole472Path)'))\xunit.console.*exe.config;$([System.IO.Path]::GetDirectoryName('$(XunitConsole472Path)'))\xunit.console.x86.exe"
            Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(XunitConsole472Path)' != ''"
            CopyToOutputDirectory="PreserveNewest"
            Visible="false" />

      <_xunitConsoleNetCoreExclude Condition="'$(GenerateDependencyFile)' != 'true'" Include="$([System.IO.Path]::GetDirectoryName('$(XunitConsoleNetCore21AppPath)'))\xunit.console.deps.json" />
      <None Include="$([System.IO.Path]::GetDirectoryName('$(XunitConsoleNetCore21AppPath)'))\*"
            Exclude="@(_xunitConsoleNetCoreExclude)"
            Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(XunitConsoleNetCore21AppPath)' != ''"
            CopyToOutputDirectory="PreserveNewest"
            Visible="false" />
    </ItemGroup>
  </Target>

  <!-- Main test targets -->
  <Target Name="Test" DependsOnTargets="$(TestDependsOn)" />
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" />

</Project>
