<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup>
    <TestProjectName Condition="'$(TestProjectName)' == ''">$(MSBuildProjectName)</TestProjectName>
    <TestsSuccessfulSemaphoreName>tests.passed</TestsSuccessfulSemaphoreName>
  </PropertyGroup>

  <!-- Set env variable to use the local netfx assemblies instead of the ones in the GAC. -->
  <ItemGroup Condition="'$(BuildingNETFxVertical)' == 'true'">
    <RunScriptCommands Include="set DEVPATH=%RUNTIME_PATH%" />
  </ItemGroup>

  <!--
    Set DOTNET_ROOT and DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX to route global tools shims to the correct host and runtime.
    On Helix we currently depend on a globally installed SDK.
  -->
  <ItemGroup Condition="'$(BuildingNETCoreAppVertical)' == 'true'">
    <RunScriptCommands Condition="'$(TargetOS)' == 'Windows_NT' AND '$(ArchiveTests)' != 'true'" Include="set DOTNET_ROOT=$(DotNetRoot)" />
    <RunScriptCommands Condition="'$(TargetOS)' != 'Windows_NT' AND '$(ArchiveTests)' != 'true'" Include="export DOTNET_ROOT=$(DotNetRoot)" />
    <RunScriptCommands Condition="'$(TargetOS)' == 'Windows_NT'" Include="set DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX=$(TestRollForwardPolicy)" />
    <RunScriptCommands Condition="'$(TargetOS)' != 'Windows_NT'" Include="export DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX=$(TestRollForwardPolicy)" />
  </ItemGroup>
  
  <!-- Binplace dirs for supplemental test data. -->
  <ItemGroup>
    <SupplementalTestDataDir Include="$(TestPath)" />
    <SupplementalTestDataDir Include="$(OutDir)" />
  </ItemGroup>

  <!-- Test target execution order. -->
  <PropertyGroup>
    <TestDependsOn>
      $(TestDependsOn);
      GenerateRunScript;
      RunTests;
      ArchiveTestBuild;
    </TestDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <RunTestsDependsOn>
      ValidateTestPlatform;
      $(RunTestsDependsOn);
      DiscoverRunTestsInputs;
      DiscoverRunTestsOutputs;
    </RunTestsDependsOn>
  </PropertyGroup>

  <!--
    Unit/Functional/Integration test support.
    Supported runners: xunit.
  -->
  <Import Condition="'$(IsUnitTestProject)' == 'true' OR '$(IsIntegrationTestProject)' == 'true'" Project="$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', 'test', 'Test.props'))" />

  <!--
    Performance test support.
    Supported runners: xunit-performance.
  -->
  <Import Condition="'$(IsPerformanceTestProject)' == 'true'" Project="$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', 'performance', 'Performance.props'))" />

  <!--
    Code Coverage support.
    Supported runners: OpenCover.

    Inputs:
      - Coverage: Intended to be passed in as a global property.
  -->
  <PropertyGroup>
    <_CoverageSupported Condition="'$(Coverage)' == 'true' AND '$(CoverageSupported)' != 'false' AND '$(IsPerformanceTestProject)' != 'true'">true</_CoverageSupported>
  </PropertyGroup>
  <Import Condition="'$(_CoverageSupported)' == 'true'" Project="$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', 'coverage', 'Coverage.props'))" />

</Project>